/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@antv/f2/build/f2.js":
/*!*******************************************!*\
  !*** ./node_modules/@antv/f2/build/f2.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n(function webpackUniversalModuleDefinition(root, factory) {\n    if (true)\n        module.exports = factory();\n    else {}\n})(this, function () {\n    return /******/ (function (modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/\n        /******/ // The require function\n        /******/ function __webpack_require__(moduleId) {\n            /******/\n            /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) {\n                /******/ return installedModules[moduleId].exports;\n                /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n                /******/ \n            };\n            /******/\n            /******/ // Execute the module function\n            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            /******/\n            /******/ // Flag the module as loaded\n            /******/ module.l = true;\n            /******/\n            /******/ // Return the exports of the module\n            /******/ return module.exports;\n            /******/ \n        }\n        /******/\n        /******/\n        /******/ // expose the modules object (__webpack_modules__)\n        /******/ __webpack_require__.m = modules;\n        /******/\n        /******/ // expose the module cache\n        /******/ __webpack_require__.c = installedModules;\n        /******/\n        /******/ // define getter function for harmony exports\n        /******/ __webpack_require__.d = function (exports, name, getter) {\n            /******/ if (!__webpack_require__.o(exports, name)) {\n                /******/ Object.defineProperty(exports, name, {\n                    /******/ configurable: false,\n                    /******/ enumerable: true,\n                    /******/ get: getter\n                    /******/ \n                });\n                /******/ }\n            /******/ \n        };\n        /******/\n        /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __webpack_require__.n = function (module) {\n            /******/ var getter = module && module.__esModule ?\n                /******/ function getDefault() { return module['default']; } :\n                /******/ function getModuleExports() { return module; };\n            /******/ __webpack_require__.d(getter, 'a', getter);\n            /******/ return getter;\n            /******/ \n        };\n        /******/\n        /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n        /******/\n        /******/ // __webpack_public_path__\n        /******/ __webpack_require__.p = \"\";\n        /******/\n        /******/ // Load entry module and return exports\n        /******/ return __webpack_require__(__webpack_require__.s = 140);\n        /******/ \n    })([\n        /* 0 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview Utility for F2\n             * @author dxq613 @gmail.com\n             * @author sima.zhang1990@gmail.com\n             */\n            var DomUtil = __webpack_require__(47);\n            var Util = {\n                upperFirst: __webpack_require__(48),\n                lowerFirst: __webpack_require__(49),\n                isString: __webpack_require__(50),\n                isNumber: __webpack_require__(51),\n                isBoolean: __webpack_require__(52),\n                isFunction: __webpack_require__(53),\n                isDate: __webpack_require__(54),\n                isArray: __webpack_require__(20),\n                isNil: __webpack_require__(30),\n                isObject: __webpack_require__(31),\n                isPlainObject: __webpack_require__(32),\n                deepMix: __webpack_require__(56),\n                mix: __webpack_require__(57),\n                each: __webpack_require__(33),\n                uniq: __webpack_require__(58),\n                isObjectValueEqual: function isObjectValueEqual(a, b) {\n                    // for vue.js\n                    a = Object.assign({}, a);\n                    b = Object.assign({}, b);\n                    var aProps = Object.getOwnPropertyNames(a);\n                    var bProps = Object.getOwnPropertyNames(b);\n                    if (aProps.length !== bProps.length) {\n                        return false;\n                    }\n                    for (var i = 0, len = aProps.length; i < len; i++) {\n                        var propName = aProps[i];\n                        if (a[propName] !== b[propName]) {\n                            return false;\n                        }\n                    }\n                    return true;\n                },\n                wrapBehavior: function wrapBehavior(obj, action) {\n                    if (obj['_wrap_' + action]) {\n                        return obj['_wrap_' + action];\n                    }\n                    var method = function method(e) {\n                        obj[action](e);\n                    };\n                    obj['_wrap_' + action] = method;\n                    return method;\n                },\n                getWrapBehavior: function getWrapBehavior(obj, action) {\n                    return obj['_wrap_' + action];\n                },\n                parsePadding: function parsePadding(padding) {\n                    var top;\n                    var right;\n                    var bottom;\n                    var left;\n                    if (Util.isNumber(padding) || Util.isString(padding)) {\n                        top = bottom = left = right = padding;\n                    }\n                    else if (Util.isArray(padding)) {\n                        top = padding[0];\n                        right = !Util.isNil(padding[1]) ? padding[1] : padding[0];\n                        bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];\n                        left = !Util.isNil(padding[3]) ? padding[3] : right;\n                    }\n                    return [top, right, bottom, left];\n                },\n                directionEnabled: function directionEnabled(mode, dir) {\n                    if (mode === undefined) {\n                        return true;\n                    }\n                    else if (typeof mode === 'string') {\n                        return mode.indexOf(dir) !== -1;\n                    }\n                    return false;\n                }\n            };\n            Util.Array = {\n                merge: function merge(dataArray) {\n                    var rst = [];\n                    for (var i = 0, len = dataArray.length; i < len; i++) {\n                        rst = rst.concat(dataArray[i]);\n                    }\n                    return rst;\n                },\n                values: function values(data, name) {\n                    var rst = [];\n                    var tmpMap = {};\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var obj = data[i];\n                        var value = obj[name];\n                        if (!Util.isNil(value)) {\n                            if (!Util.isArray(value)) {\n                                if (!tmpMap[value]) {\n                                    rst.push(value);\n                                    tmpMap[value] = true;\n                                }\n                            }\n                            else {\n                                Util.each(value, function (val) {\n                                    if (!tmpMap[val]) {\n                                        rst.push(val);\n                                        tmpMap[val] = true;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                    return rst;\n                },\n                firstValue: function firstValue(data, name) {\n                    var rst = null;\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var obj = data[i];\n                        var value = obj[name];\n                        if (!Util.isNil(value)) {\n                            if (Util.isArray(value)) {\n                                rst = value[0];\n                            }\n                            else {\n                                rst = value;\n                            }\n                            break;\n                        }\n                    }\n                    return rst;\n                },\n                group: function group(data, fields, appendConditions) {\n                    if (appendConditions === void 0) {\n                        appendConditions = {};\n                    }\n                    if (!fields) {\n                        return [data];\n                    }\n                    var groups = Util.Array.groupToMap(data, fields);\n                    var array = [];\n                    if (fields.length === 1 && appendConditions[fields[0]]) {\n                        var values = appendConditions[fields[0]];\n                        Util.each(values, function (value) {\n                            value = '_' + value;\n                            array.push(groups[value]);\n                        });\n                    }\n                    else {\n                        for (var i in groups) {\n                            array.push(groups[i]);\n                        }\n                    }\n                    return array;\n                },\n                groupToMap: function groupToMap(data, fields) {\n                    if (!fields) {\n                        return {\n                            0: data\n                        };\n                    }\n                    var callback = function callback(row) {\n                        var unique = '_';\n                        for (var i = 0, l = fields.length; i < l; i++) {\n                            unique += row[fields[i]] && row[fields[i]].toString();\n                        }\n                        return unique;\n                    };\n                    var groups = {};\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var row = data[i];\n                        var key = callback(row);\n                        if (groups[key]) {\n                            groups[key].push(row);\n                        }\n                        else {\n                            groups[key] = [row];\n                        }\n                    }\n                    return groups;\n                },\n                remove: function remove(arr, obj) {\n                    if (!arr) {\n                        return;\n                    }\n                    var index = arr.indexOf(obj);\n                    if (index !== -1) {\n                        arr.splice(index, 1);\n                    }\n                },\n                getRange: function getRange(values) {\n                    if (!values.length) {\n                        return {\n                            min: 0,\n                            max: 0\n                        };\n                    }\n                    var max = Math.max.apply(null, values);\n                    var min = Math.min.apply(null, values);\n                    return {\n                        min: min,\n                        max: max\n                    };\n                }\n            };\n            Util.mix(Util, DomUtil);\n            module.exports = Util;\n            /***/ \n        }),\n        /* 1 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Theme = __webpack_require__(46);\n            var Util = __webpack_require__(0);\n            var Global = {\n                version: '3.3.9',\n                scales: {},\n                widthRatio: {\n                    column: 1 / 2,\n                    rose: 0.999999,\n                    multiplePie: 3 / 4\n                },\n                lineDash: [4, 4]\n            };\n            Global.setTheme = function (theme) {\n                Util.deepMix(this, theme);\n            };\n            Global.setTheme(Theme);\n            module.exports = Global;\n            /***/ \n        }),\n        /* 2 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Element = __webpack_require__(27);\n            var Shape = \n            /*#__PURE__*/\n            function (_Element) {\n                _inheritsLoose(Shape, _Element);\n                function Shape() {\n                    return _Element.apply(this, arguments) || this;\n                }\n                var _proto = Shape.prototype;\n                _proto._initProperties = function _initProperties() {\n                    this._attrs = {\n                        zIndex: 0,\n                        visible: true,\n                        destroyed: false,\n                        isShape: true,\n                        attrs: {}\n                    };\n                };\n                _proto.getType = function getType() {\n                    return this._attrs.type;\n                };\n                _proto.drawInner = function drawInner(context) {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    self.createPath(context);\n                    var originOpacity = context.globalAlpha;\n                    if (self.hasFill()) {\n                        var fillOpacity = attrs.fillOpacity;\n                        if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n                            context.globalAlpha = fillOpacity;\n                            context.fill();\n                            context.globalAlpha = originOpacity;\n                        }\n                        else {\n                            context.fill();\n                        }\n                    }\n                    if (self.hasStroke()) {\n                        var lineWidth = attrs.lineWidth;\n                        if (lineWidth > 0) {\n                            var strokeOpacity = attrs.strokeOpacity;\n                            if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {\n                                context.globalAlpha = strokeOpacity;\n                            }\n                            context.stroke();\n                        }\n                    }\n                };\n                _proto.getBBox = function getBBox() {\n                    var bbox = this._attrs.bbox;\n                    if (!bbox) {\n                        bbox = this.calculateBox();\n                        if (bbox) {\n                            bbox.x = bbox.minX;\n                            bbox.y = bbox.minY;\n                            bbox.width = bbox.maxX - bbox.minX;\n                            bbox.height = bbox.maxY - bbox.minY;\n                        }\n                        this._attrs.bbox = bbox;\n                    }\n                    return bbox;\n                };\n                _proto.calculateBox = function calculateBox() {\n                    return null;\n                };\n                _proto.createPath = function createPath() { };\n                return Shape;\n            }(Element);\n            module.exports = Shape;\n            /***/ \n        }),\n        /* 3 */\n        /***/ (function (module, exports) {\n            /**\n             * 2 Dimensional Vector\n             * @module vector2\n             */\n            module.exports = {\n                /**\n                 * Creates a new, empty vector2\n                 *\n                 * @return {vector2} a new 2D vector\n                 */\n                create: function create() {\n                    return [0, 0];\n                },\n                /**\n                 * Calculates the length of a vector2\n                 *\n                 * @param {vector2} v vector to calculate length of\n                 * @return {Number} length of v\n                 */\n                length: function length(v) {\n                    var x = v[0];\n                    var y = v[1];\n                    return Math.sqrt(x * x + y * y);\n                },\n                /**\n                 * Normalize a vector2\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v vector to normalize\n                 * @return {vector2} out\n                 */\n                normalize: function normalize(out, v) {\n                    var len = this.length(v);\n                    if (len === 0) {\n                        out[0] = 0;\n                        out[1] = 0;\n                    }\n                    else {\n                        out[0] = v[0] / len;\n                        out[1] = v[1] / len;\n                    }\n                    return out;\n                },\n                /**\n                 * Adds two vector2's\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {vector2} out\n                 */\n                add: function add(out, v1, v2) {\n                    out[0] = v1[0] + v2[0];\n                    out[1] = v1[1] + v2[1];\n                    return out;\n                },\n                /**\n                 * Subtracts vector v2 from vector v1\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {vector2} out\n                 */\n                sub: function sub(out, v1, v2) {\n                    out[0] = v1[0] - v2[0];\n                    out[1] = v1[1] - v2[1];\n                    return out;\n                },\n                /**\n                 * Scales a vector2 by a scalar number\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v the vector to scale\n                 * @param {Number} s amount to scale the vector by\n                 * @return {vector2} out\n                 */\n                scale: function scale(out, v, s) {\n                    out[0] = v[0] * s;\n                    out[1] = v[1] * s;\n                    return out;\n                },\n                /**\n                 * Calculates the dot product of two vector2's\n                 *\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {Number} dot product of v1 and v2\n                 */\n                dot: function dot(v1, v2) {\n                    return v1[0] * v2[0] + v1[1] * v2[1];\n                },\n                /**\n                 * Calculates the direction of two vector2's\n                 *\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {Boolean} the direction of v1 and v2\n                 */\n                direction: function direction(v1, v2) {\n                    return v1[0] * v2[1] - v2[0] * v1[1];\n                },\n                /**\n                 * Calculates the angle of two vector2's\n                 *\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {Number} angle of v1 and v2\n                 */\n                angle: function angle(v1, v2) {\n                    var theta = this.dot(v1, v2) / (this.length(v1) * this.length(v2));\n                    return Math.acos(theta);\n                },\n                /**\n                 * Calculates the angle of two vector2's with direction\n                 *\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @param {Boolean} direction the direction of two vector2's\n                 * @return {Number} angle of v1 and v2\n                 */\n                angleTo: function angleTo(v1, v2, direction) {\n                    var angle = this.angle(v1, v2);\n                    var angleLargeThanPI = this.direction(v1, v2) >= 0;\n                    if (direction) {\n                        if (angleLargeThanPI) {\n                            return Math.PI * 2 - angle;\n                        }\n                        return angle;\n                    }\n                    if (angleLargeThanPI) {\n                        return angle;\n                    }\n                    return Math.PI * 2 - angle;\n                },\n                /**\n                 * whether a vector2 is zero vector\n                 *\n                 * @param  {vector2} v vector to calculate\n                 * @return {Boolean}   is or not a zero vector\n                 */\n                zero: function zero(v) {\n                    return v[0] === 0 && v[1] === 0;\n                },\n                /**\n                 * Calculates the euclidian distance between two vector2's\n                 *\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {Number} distance between a and b\n                 */\n                distance: function distance(v1, v2) {\n                    var x = v2[0] - v1[0];\n                    var y = v2[1] - v1[1];\n                    return Math.sqrt(x * x + y * y);\n                },\n                /**\n                 * Creates a new vector2 initialized with values from an existing vector\n                 *\n                 * @param {vector2} v vector to clone\n                 * @return {Array} a new 2D vector\n                 */\n                clone: function clone(v) {\n                    return [v[0], v[1]];\n                },\n                /**\n                 * Return the minimum of two vector2's\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {vector2} out\n                 */\n                min: function min(out, v1, v2) {\n                    out[0] = Math.min(v1[0], v2[0]);\n                    out[1] = Math.min(v1[1], v2[1]);\n                    return out;\n                },\n                /**\n                 * Return the maximum of two vector2's\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v1 the first operand\n                 * @param {vector2} v2 the second operand\n                 * @return {vector2} out\n                 */\n                max: function max(out, v1, v2) {\n                    out[0] = Math.max(v1[0], v2[0]);\n                    out[1] = Math.max(v1[1], v2[1]);\n                    return out;\n                },\n                /**\n                 * Transforms the vector2 with a mat2d\n                 *\n                 * @param {vector2} out the receiving vector\n                 * @param {vector2} v the vector to transform\n                 * @param {mat2d} m matrix to transform with\n                 * @return {vector2} out\n                 */\n                transformMat2d: function transformMat2d(out, v, m) {\n                    var x = v[0];\n                    var y = v[1];\n                    out[0] = m[0] * x + m[2] * y + m[4];\n                    out[1] = m[1] * x + m[3] * y + m[5];\n                    return out;\n                }\n            };\n            /***/ \n        }),\n        /* 4 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isObject = __webpack_require__(25);\n            var isArray = __webpack_require__(13);\n            var each = function each(elements, func) {\n                if (!elements) {\n                    return;\n                }\n                var rst = void 0;\n                if (isArray(elements)) {\n                    for (var i = 0, len = elements.length; i < len; i++) {\n                        rst = func(elements[i], i);\n                        if (rst === false) {\n                            break;\n                        }\n                    }\n                }\n                else if (isObject(elements)) {\n                    for (var k in elements) {\n                        if (elements.hasOwnProperty(k)) {\n                            rst = func(elements[k], k);\n                            if (rst === false) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            };\n            module.exports = each;\n            /***/ \n        }),\n        /* 5 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var G = {\n                Canvas: __webpack_require__(79),\n                Group: __webpack_require__(36),\n                Shape: __webpack_require__(2),\n                Matrix: __webpack_require__(24),\n                Vector2: __webpack_require__(3)\n            };\n            __webpack_require__(81);\n            __webpack_require__(82);\n            __webpack_require__(83);\n            __webpack_require__(84);\n            __webpack_require__(85);\n            __webpack_require__(86);\n            __webpack_require__(87);\n            __webpack_require__(88);\n            __webpack_require__(89);\n            module.exports = G;\n            /***/ \n        }),\n        /* 6 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Base = __webpack_require__(34);\n            var GROUP_ATTRS = ['color', 'size', 'shape'];\n            var FIELD_ORIGIN = '_origin';\n            var FIELD_ORIGIN_Y = '_originY';\n            var Global = __webpack_require__(1);\n            var Attr = __webpack_require__(64);\n            var GeometryShape = __webpack_require__(8);\n            var Adjust = __webpack_require__(23);\n            function parseFields(field) {\n                if (Util.isArray(field)) {\n                    return field;\n                }\n                if (Util.isString(field)) {\n                    return field.split('*');\n                }\n                return [field];\n            }\n            /**\n             * The parent class for Geometry\n             * @class Geom\n             */\n            var Geom = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Geom, _Base);\n                function Geom() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Geom.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {\n                        /**\n                         * geometry type\n                         * @type {String}\n                         */\n                        type: null,\n                        /**\n                         * the data of geometry\n                         * @type {Array}\n                         */\n                        data: null,\n                        /**\n                         * the attrs of geo,etry\n                         * @type {Object}\n                         */\n                        attrs: {},\n                        scales: {},\n                        /**\n                         * group for storing the shapes\n                         * @type {Canvas}\n                         */\n                        container: null,\n                        /**\n                         * style options\n                         * @type {Object}\n                         */\n                        styleOptions: null,\n                        chart: null,\n                        shapeType: '',\n                        /**\n                         * wether to generate key points for each shape\n                         * @protected\n                         * @type {Boolean}\n                         */\n                        generatePoints: false,\n                        attrOptions: {},\n                        sortable: false,\n                        startOnZero: true,\n                        visible: true,\n                        connectNulls: false\n                    };\n                };\n                _proto.init = function init() {\n                    var self = this;\n                    self._initAttrs();\n                    var dataArray = self._processData();\n                    if (self.get('adjust')) {\n                        self._adjustData(dataArray);\n                    }\n                    self.set('dataArray', dataArray);\n                };\n                _proto._getGroupScales = function _getGroupScales() {\n                    var self = this;\n                    var scales = [];\n                    Util.each(GROUP_ATTRS, function (attrName) {\n                        var attr = self.getAttr(attrName);\n                        if (attr) {\n                            var attrScales = attr.scales;\n                            Util.each(attrScales, function (scale) {\n                                if (scale && scale.isCategory && scales.indexOf(scale) === -1) {\n                                    scales.push(scale);\n                                }\n                            });\n                        }\n                    });\n                    return scales;\n                };\n                _proto._groupData = function _groupData(data) {\n                    var self = this;\n                    var colDefs = self.get('colDefs');\n                    var groupScales = self._getGroupScales();\n                    if (groupScales.length) {\n                        var appendConditions = {};\n                        var names = [];\n                        Util.each(groupScales, function (scale) {\n                            var field = scale.field;\n                            names.push(field);\n                            if (colDefs && colDefs[field] && colDefs[field].values) {\n                                // users have defined\n                                appendConditions[scale.field] = colDefs[field].values;\n                            }\n                        });\n                        return Util.Array.group(data, names, appendConditions);\n                    }\n                    return [data];\n                };\n                _proto._setAttrOptions = function _setAttrOptions(attrName, attrCfg) {\n                    var options = this.get('attrOptions');\n                    options[attrName] = attrCfg;\n                };\n                _proto._createAttrOption = function _createAttrOption(attrName, field, cfg, defaultValues) {\n                    var attrCfg = {};\n                    attrCfg.field = field;\n                    if (cfg) {\n                        if (Util.isFunction(cfg)) {\n                            attrCfg.callback = cfg;\n                        }\n                        else {\n                            attrCfg.values = cfg;\n                        }\n                    }\n                    else {\n                        attrCfg.values = defaultValues;\n                    }\n                    this._setAttrOptions(attrName, attrCfg);\n                };\n                _proto._initAttrs = function _initAttrs() {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    var attrOptions = self.get('attrOptions');\n                    var coord = self.get('coord');\n                    for (var type in attrOptions) {\n                        if (attrOptions.hasOwnProperty(type)) {\n                            var option = attrOptions[type];\n                            var className = Util.upperFirst(type);\n                            var fields = parseFields(option.field);\n                            if (type === 'position') {\n                                option.coord = coord;\n                            }\n                            var scales = [];\n                            for (var i = 0, len = fields.length; i < len; i++) {\n                                var field = fields[i];\n                                var scale = self._createScale(field);\n                                scales.push(scale);\n                            }\n                            if (type === 'position') {\n                                var yScale = scales[1];\n                                if (coord.type === 'polar' && coord.transposed && self.hasAdjust('stack')) {\n                                    if (yScale.values.length) {\n                                        yScale.change({\n                                            nice: false,\n                                            min: 0,\n                                            max: Math.max.apply(null, yScale.values)\n                                        });\n                                    }\n                                }\n                            }\n                            option.scales = scales;\n                            var attr = new Attr[className](option);\n                            attrs[type] = attr;\n                        }\n                    }\n                };\n                _proto._createScale = function _createScale(field) {\n                    var scales = this.get('scales');\n                    var scale = scales[field];\n                    if (!scale) {\n                        scale = this.get('chart').createScale(field);\n                        scales[field] = scale;\n                    }\n                    return scale;\n                };\n                _proto._processData = function _processData() {\n                    var self = this;\n                    var data = this.get('data');\n                    var dataArray = [];\n                    var groupedArray = this._groupData(data);\n                    for (var i = 0, len = groupedArray.length; i < len; i++) {\n                        var subData = groupedArray[i];\n                        var tempData = self._saveOrigin(subData);\n                        if (this.hasAdjust('dodge')) {\n                            self._numberic(tempData);\n                        }\n                        dataArray.push(tempData);\n                    }\n                    return dataArray;\n                };\n                _proto._saveOrigin = function _saveOrigin(data) {\n                    var rst = [];\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var origin = data[i];\n                        var obj = {};\n                        for (var k in origin) {\n                            obj[k] = origin[k];\n                        }\n                        obj[FIELD_ORIGIN] = origin;\n                        rst.push(obj);\n                    }\n                    return rst;\n                };\n                _proto._numberic = function _numberic(data) {\n                    var positionAttr = this.getAttr('position');\n                    var scales = positionAttr.scales;\n                    for (var j = 0, len = data.length; j < len; j++) {\n                        var obj = data[j];\n                        var count = Math.min(2, scales.length);\n                        for (var i = 0; i < count; i++) {\n                            var scale = scales[i];\n                            if (scale.isCategory) {\n                                var field = scale.field;\n                                obj[field] = scale.translate(obj[field]);\n                            }\n                        }\n                    }\n                };\n                _proto._adjustData = function _adjustData(dataArray) {\n                    var self = this;\n                    var adjust = self.get('adjust');\n                    if (adjust) {\n                        var adjustType = Util.upperFirst(adjust.type);\n                        if (!Adjust[adjustType]) {\n                            throw new Error('not support such adjust : ' + adjust);\n                        }\n                        var xScale = self.getXScale();\n                        var yScale = self.getYScale();\n                        var cfg = Util.mix({\n                            xField: xScale.field,\n                            yField: yScale.field\n                        }, adjust);\n                        var adjustObject = new Adjust[adjustType](cfg);\n                        adjustObject.processAdjust(dataArray);\n                        if (adjustType === 'Stack') {\n                            self._updateStackRange(yScale.field, yScale, dataArray);\n                        }\n                    }\n                };\n                _proto._updateStackRange = function _updateStackRange(field, scale, dataArray) {\n                    var mergeArray = Util.Array.merge(dataArray);\n                    var min = scale.min;\n                    var max = scale.max;\n                    for (var i = 0, len = mergeArray.length; i < len; i++) {\n                        var obj = mergeArray[i];\n                        var tmpMin = Math.min.apply(null, obj[field]);\n                        var tmpMax = Math.max.apply(null, obj[field]);\n                        if (tmpMin < min) {\n                            min = tmpMin;\n                        }\n                        if (tmpMax > max) {\n                            max = tmpMax;\n                        }\n                    }\n                    if (min < scale.min || max > scale.max) {\n                        scale.change({\n                            min: min,\n                            max: max\n                        });\n                    }\n                };\n                _proto._sort = function _sort(mappedArray) {\n                    var self = this;\n                    var xScale = self.getXScale();\n                    var field = xScale.field, type = xScale.type;\n                    if (type !== 'identity' && xScale.values.length > 1) {\n                        Util.each(mappedArray, function (itemArr) {\n                            itemArr.sort(function (obj1, obj2) {\n                                if (type === 'timeCat') {\n                                    return xScale._toTimeStamp(obj1[FIELD_ORIGIN][field]) - xScale._toTimeStamp(obj2[FIELD_ORIGIN][field]);\n                                }\n                                return xScale.translate(obj1[FIELD_ORIGIN][field]) - xScale.translate(obj2[FIELD_ORIGIN][field]);\n                            });\n                        });\n                    }\n                    self.set('hasSorted', true);\n                    self.set('dataArray', mappedArray);\n                };\n                _proto.paint = function paint() {\n                    var self = this;\n                    var dataArray = self.get('dataArray');\n                    var mappedArray = [];\n                    var shapeFactory = self.getShapeFactory();\n                    shapeFactory.setCoord(self.get('coord'));\n                    self._beforeMapping(dataArray);\n                    for (var i = 0, len = dataArray.length; i < len; i++) {\n                        var data = dataArray[i];\n                        if (data.length) {\n                            data = self._mapping(data);\n                            mappedArray.push(data);\n                            self.draw(data, shapeFactory);\n                        }\n                    }\n                    self.set('dataArray', mappedArray);\n                };\n                _proto.getShapeFactory = function getShapeFactory() {\n                    var shapeFactory = this.get('shapeFactory');\n                    if (!shapeFactory) {\n                        var shapeType = this.get('shapeType');\n                        shapeFactory = GeometryShape.getShapeFactory(shapeType);\n                        this.set('shapeFactory', shapeFactory);\n                    }\n                    return shapeFactory;\n                };\n                _proto._mapping = function _mapping(data) {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    var yField = self.getYScale().field;\n                    var mappedData = [];\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var record = data[i];\n                        var newRecord = {};\n                        newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];\n                        newRecord.points = record.points; // 避免\n                        newRecord[FIELD_ORIGIN_Y] = record[yField];\n                        for (var k in attrs) {\n                            if (attrs.hasOwnProperty(k)) {\n                                var attr = attrs[k];\n                                var names = attr.names;\n                                var values = self._getAttrValues(attr, record);\n                                if (names.length > 1) {\n                                    for (var j = 0, _len = values.length; j < _len; j++) {\n                                        var val = values[j];\n                                        var name = names[j];\n                                        newRecord[name] = Util.isArray(val) && val.length === 1 ? val[0] : val;\n                                    }\n                                }\n                                else {\n                                    newRecord[names[0]] = values.length === 1 ? values[0] : values;\n                                }\n                            }\n                        }\n                        mappedData.push(newRecord);\n                    }\n                    return mappedData;\n                };\n                _proto._getAttrValues = function _getAttrValues(attr, record) {\n                    var scales = attr.scales;\n                    var params = [];\n                    for (var i = 0, len = scales.length; i < len; i++) {\n                        var scale = scales[i];\n                        var field = scale.field;\n                        if (scale.type === 'identity') {\n                            params.push(scale.value);\n                        }\n                        else {\n                            params.push(record[field]);\n                        }\n                    }\n                    var values = attr.mapping.apply(attr, params);\n                    return values;\n                };\n                _proto.getAttrValue = function getAttrValue(attrName, record) {\n                    var attr = this.getAttr(attrName);\n                    var rst = null;\n                    if (attr) {\n                        var values = this._getAttrValues(attr, record);\n                        rst = values[0];\n                    }\n                    return rst;\n                };\n                _proto._beforeMapping = function _beforeMapping(dataArray) {\n                    var self = this;\n                    if (self.get('sortable')) {\n                        self._sort(dataArray);\n                    }\n                    if (self.get('generatePoints')) {\n                        Util.each(dataArray, function (data) {\n                            self._generatePoints(data);\n                        });\n                    }\n                };\n                _proto.isInCircle = function isInCircle() {\n                    var coord = this.get('coord');\n                    return coord && coord.isPolar;\n                };\n                _proto.getCallbackCfg = function getCallbackCfg(fields, cfg, origin) {\n                    if (!fields) {\n                        return cfg;\n                    }\n                    var tmpCfg = {};\n                    var params = fields.map(function (field) {\n                        return origin[field];\n                    });\n                    Util.each(cfg, function (v, k) {\n                        if (Util.isFunction(v)) {\n                            tmpCfg[k] = v.apply(null, params);\n                        }\n                        else {\n                            tmpCfg[k] = v;\n                        }\n                    });\n                    return tmpCfg;\n                };\n                _proto.getDrawCfg = function getDrawCfg(obj) {\n                    var self = this;\n                    var isInCircle = self.isInCircle();\n                    var cfg = {\n                        origin: obj,\n                        x: obj.x,\n                        y: obj.y,\n                        color: obj.color,\n                        size: obj.size,\n                        shape: obj.shape,\n                        isInCircle: isInCircle,\n                        opacity: obj.opacity\n                    };\n                    var styleOptions = self.get('styleOptions');\n                    if (styleOptions && styleOptions.style) {\n                        cfg.style = self.getCallbackCfg(styleOptions.fields, styleOptions.style, obj[FIELD_ORIGIN]);\n                    }\n                    if (self.get('generatePoints')) {\n                        cfg.points = obj.points;\n                    }\n                    if (isInCircle) {\n                        cfg.center = self.get('coord').center;\n                    }\n                    return cfg;\n                };\n                _proto.draw = function draw(data, shapeFactory) {\n                    var self = this;\n                    var container = self.get('container');\n                    var yScale = self.getYScale();\n                    Util.each(data, function (obj, index) {\n                        if (yScale && Util.isNil(obj._origin[yScale.field])) {\n                            return;\n                        }\n                        obj.index = index;\n                        var cfg = self.getDrawCfg(obj);\n                        var shape = obj.shape;\n                        self.drawShape(shape, obj, cfg, container, shapeFactory);\n                    });\n                };\n                _proto.drawShape = function drawShape(shape, shapeData, cfg, container, shapeFactory) {\n                    var gShape = shapeFactory.drawShape(shape, cfg, container);\n                    if (gShape) {\n                        Util.each([].concat(gShape), function (s) {\n                            s.set('origin', shapeData);\n                        });\n                    }\n                };\n                _proto._generatePoints = function _generatePoints(data) {\n                    var self = this;\n                    var shapeFactory = self.getShapeFactory();\n                    var shapeAttr = self.getAttr('shape');\n                    for (var i = 0, len = data.length; i < len; i++) {\n                        var obj = data[i];\n                        var cfg = self.createShapePointsCfg(obj);\n                        var shape = shapeAttr ? self._getAttrValues(shapeAttr, obj) : null;\n                        var points = shapeFactory.getShapePoints(shape, cfg);\n                        obj.points = points;\n                    }\n                };\n                _proto.createShapePointsCfg = function createShapePointsCfg(obj) {\n                    var xScale = this.getXScale();\n                    var yScale = this.getYScale();\n                    var x = this._normalizeValues(obj[xScale.field], xScale);\n                    var y;\n                    if (yScale) {\n                        y = this._normalizeValues(obj[yScale.field], yScale);\n                    }\n                    else {\n                        y = obj.y ? obj.y : 0.1;\n                    }\n                    return {\n                        x: x,\n                        y: y,\n                        y0: yScale ? yScale.scale(this.getYMinValue()) : undefined\n                    };\n                };\n                _proto.getYMinValue = function getYMinValue() {\n                    var yScale = this.getYScale();\n                    var min = yScale.min, max = yScale.max;\n                    var value;\n                    if (this.get('startOnZero')) {\n                        if (max <= 0 && min <= 0) {\n                            value = max;\n                        }\n                        else {\n                            value = min >= 0 ? min : 0;\n                        }\n                    }\n                    else {\n                        value = min;\n                    }\n                    return value;\n                };\n                _proto._normalizeValues = function _normalizeValues(values, scale) {\n                    var rst = [];\n                    if (Util.isArray(values)) {\n                        for (var i = 0, len = values.length; i < len; i++) {\n                            var v = values[i];\n                            rst.push(scale.scale(v));\n                        }\n                    }\n                    else {\n                        rst = scale.scale(values);\n                    }\n                    return rst;\n                };\n                _proto.getAttr = function getAttr(name) {\n                    return this.get('attrs')[name];\n                };\n                _proto.getXScale = function getXScale() {\n                    return this.getAttr('position').scales[0];\n                };\n                _proto.getYScale = function getYScale() {\n                    return this.getAttr('position').scales[1];\n                };\n                _proto.hasAdjust = function hasAdjust(adjust) {\n                    return this.get('adjust') && this.get('adjust').type === adjust;\n                };\n                _proto._getSnap = function _getSnap(scale, item, arr) {\n                    var i = 0;\n                    var values;\n                    var yField = this.getYScale().field; // 叠加的维度\n                    if (this.hasAdjust('stack') && scale.field === yField) {\n                        values = [];\n                        arr.forEach(function (obj) {\n                            values.push(obj[FIELD_ORIGIN_Y]);\n                        });\n                        for (var len = values.length; i < len; i++) {\n                            if (values[0][0] > item) {\n                                break;\n                            }\n                            if (values[values.length - 1][1] <= item) {\n                                i = values.length - 1;\n                                break;\n                            }\n                            if (values[i][0] <= item && values[i][1] > item) {\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        values = scale.values;\n                        values.sort(function (a, b) {\n                            return a - b;\n                        });\n                        for (var _len2 = values.length; i < _len2; i++) {\n                            if ((values[0] + values[1]) / 2 > item) {\n                                break;\n                            }\n                            if ((values[i - 1] + values[i]) / 2 <= item && (values[i + 1] + values[i]) / 2 > item) {\n                                break;\n                            }\n                            if ((values[values.length - 2] + values[values.length - 1]) / 2 <= item) {\n                                i = values.length - 1;\n                                break;\n                            }\n                        }\n                    }\n                    var result = values[i];\n                    return result;\n                };\n                _proto.getSnapRecords = function getSnapRecords(point) {\n                    var self = this;\n                    var coord = self.get('coord');\n                    var xScale = self.getXScale();\n                    var yScale = self.getYScale();\n                    var xfield = xScale.field;\n                    var dataArray = self.get('dataArray');\n                    if (!this.get('hasSorted')) {\n                        this._sort(dataArray);\n                    }\n                    var rst = [];\n                    var invertPoint = coord.invertPoint(point);\n                    var invertPointX = invertPoint.x;\n                    if (self.isInCircle() && !coord.transposed && invertPointX > (1 + xScale.rangeMax()) / 2) {\n                        invertPointX = xScale.rangeMin();\n                    }\n                    var xValue = xScale.invert(invertPointX);\n                    if (!xScale.isCategory) {\n                        xValue = self._getSnap(xScale, xValue);\n                    }\n                    var tmp = [];\n                    dataArray.forEach(function (data) {\n                        data.forEach(function (obj) {\n                            var originValue = Util.isNil(obj[FIELD_ORIGIN]) ? obj[xfield] : obj[FIELD_ORIGIN][xfield];\n                            if (self._isEqual(originValue, xValue, xScale)) {\n                                tmp.push(obj);\n                            }\n                        });\n                    }); // special for pie chart\n                    if (this.hasAdjust('stack') && coord.isPolar && coord.transposed && xScale.values.length === 1) {\n                        if (invertPointX >= 0 && invertPointX <= 1) {\n                            var yValue = yScale.invert(invertPoint.y);\n                            yValue = self._getSnap(yScale, yValue, tmp);\n                            tmp.forEach(function (obj) {\n                                if (Util.isArray(yValue) ? obj[FIELD_ORIGIN_Y].toString() === yValue.toString() : obj[FIELD_ORIGIN_Y] === yValue) {\n                                    rst.push(obj);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        rst = tmp;\n                    }\n                    return rst;\n                };\n                _proto._isEqual = function _isEqual(originValue, value, scale) {\n                    if (scale.type === 'timeCat') {\n                        return scale._toTimeStamp(originValue) === value;\n                    }\n                    return value === originValue;\n                };\n                _proto.position = function position(field) {\n                    this._setAttrOptions('position', {\n                        field: field\n                    });\n                    return this;\n                };\n                _proto.color = function color(field, values) {\n                    this._createAttrOption('color', field, values, Global.colors);\n                    return this;\n                };\n                _proto.size = function size(field, values) {\n                    this._createAttrOption('size', field, values, Global.sizes);\n                    return this;\n                };\n                _proto.shape = function shape(field, values) {\n                    var type = this.get('type');\n                    var shapes = Global.shapes[type] || [];\n                    this._createAttrOption('shape', field, values, shapes);\n                    return this;\n                };\n                _proto.style = function style(field, cfg) {\n                    var styleOptions = this.get('styleOptions');\n                    if (!styleOptions) {\n                        styleOptions = {};\n                        this.set('styleOptions', styleOptions);\n                    }\n                    if (Util.isObject(field)) {\n                        cfg = field;\n                        field = null;\n                    }\n                    var fields;\n                    if (field) {\n                        fields = parseFields(field);\n                    }\n                    styleOptions.fields = fields;\n                    styleOptions.style = cfg;\n                    return this;\n                };\n                _proto.adjust = function adjust(type) {\n                    if (Util.isString(type)) {\n                        type = {\n                            type: type\n                        };\n                    }\n                    this.set('adjust', type);\n                    return this;\n                };\n                _proto.animate = function animate(cfg) {\n                    this.set('animateCfg', cfg);\n                    return this;\n                };\n                _proto.reset = function reset() {\n                    this.set('attrOptions', {});\n                    this.set('adjust', null);\n                    this.clearInner();\n                };\n                _proto.clearInner = function clearInner() {\n                    var container = this.get('container');\n                    if (container) {\n                        container.clear();\n                        container.setMatrix([1, 0, 0, 1, 0, 0]);\n                    }\n                    container && container.clear();\n                    this.set('attrs', {});\n                    this.set('groupScales', null);\n                    this.set('xDistance', null);\n                    this.set('_width', null);\n                };\n                _proto.clear = function clear() {\n                    this.clearInner();\n                    this.set('scales', {});\n                };\n                _proto.destroy = function destroy() {\n                    this.clear();\n                    _Base.prototype.destroy.call(this);\n                };\n                _proto._display = function _display(visible) {\n                    this.set('visible', visible);\n                    var container = this.get('container');\n                    var canvas = container.get('canvas');\n                    container.set('visible', visible);\n                    canvas.draw();\n                };\n                _proto.show = function show() {\n                    this._display(true);\n                };\n                _proto.hide = function hide() {\n                    this._display(false);\n                };\n                return Geom;\n            }(Base);\n            module.exports = Geom;\n            /***/ \n        }),\n        /* 7 */\n        /***/ (function (module, exports) {\n            var toString = {}.toString;\n            var isType = function isType(value, type) {\n                return toString.call(value) === '[object ' + type + ']';\n            };\n            module.exports = isType;\n            /***/ \n        }),\n        /* 8 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Global = __webpack_require__(1);\n            var Shape = {};\n            var ShapeBase = {\n                _coord: null,\n                /**\n                 * draw the shape\n                 * @param {Object} cfg options\n                 * @param {Object} container container to store the shapes\n                 */\n                draw: function draw(cfg, container) {\n                    if (this.drawShape) {\n                        this.drawShape(cfg, container);\n                    }\n                },\n                /**\n                 * set the coordinate instance\n                 * @param {Coord} coord coordinate instance\n                 */\n                setCoord: function setCoord(coord) {\n                    this._coord = coord;\n                },\n                /**\n                 * convert the normalized value to the canvas position\n                 * @param  {point} point the point to convert\n                 * @return {point} point return the result\n                 */\n                parsePoint: function parsePoint(point) {\n                    var coord = this._coord;\n                    if (coord.isPolar) {\n                        if (point.x === 1)\n                            point.x = 0.9999999;\n                        if (point.y === 1)\n                            point.y = 0.9999999;\n                    }\n                    return coord.convertPoint(point);\n                },\n                /**\n                 * convert the normalized value to the canvas position\n                 * @param  {points} points the array that store the points\n                 * @return {points} points return the result\n                 */\n                parsePoints: function parsePoints(points) {\n                    if (!points)\n                        return false;\n                    var self = this;\n                    var rst = [];\n                    points.forEach(function (point) {\n                        rst.push(self.parsePoint(point));\n                    });\n                    return rst;\n                }\n            };\n            var ShapeFactoryBase = {\n                defaultShapeType: null,\n                setCoord: function setCoord(coord) {\n                    this._coord = coord;\n                },\n                getShape: function getShape(type) {\n                    var self = this;\n                    if (Util.isArray(type)) {\n                        type = type[0];\n                    }\n                    var shape = self[type] || self[self.defaultShapeType];\n                    shape._coord = self._coord;\n                    return shape;\n                },\n                getShapePoints: function getShapePoints(type, cfg) {\n                    var shape = this.getShape(type);\n                    var fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;\n                    var points = fn(cfg);\n                    return points;\n                },\n                getDefaultPoints: function getDefaultPoints() {\n                    return [];\n                },\n                drawShape: function drawShape(type, cfg, container) {\n                    var shape = this.getShape(type);\n                    if (!cfg.color) {\n                        cfg.color = Global.colors[0];\n                    }\n                    return shape.draw(cfg, container);\n                }\n            };\n            Shape.registerFactory = function (factoryName, cfg) {\n                var className = Util.upperFirst(factoryName);\n                var geomObj = Util.mix({}, ShapeFactoryBase, cfg);\n                Shape[className] = geomObj;\n                geomObj.name = factoryName;\n                return geomObj;\n            };\n            Shape.registerShape = function (factoryName, shapeType, cfg) {\n                var className = Util.upperFirst(factoryName);\n                var factory = Shape[className];\n                var shapeObj = Util.mix({}, ShapeBase, cfg);\n                factory[shapeType] = shapeObj;\n                return shapeObj;\n            };\n            Shape.registShape = Shape.registerShape;\n            Shape.getShapeFactory = function (factoryName) {\n                var self = this;\n                factoryName = factoryName || 'point';\n                var className = Util.upperFirst(factoryName);\n                return self[className];\n            };\n            module.exports = Shape;\n            /***/ \n        }),\n        /* 9 */\n        /***/ (function (module, exports) {\n            // isFinite,\n            var isNil = function isNil(value) {\n                /**\n                 * isNil(null) => true\n                 * isNil() => true\n                 */\n                return value === null || value === undefined;\n            };\n            module.exports = isNil;\n            /***/ \n        }),\n        /* 10 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Vector2 = __webpack_require__(3);\n            var start = Vector2.create();\n            var end = Vector2.create();\n            var extremity = Vector2.create();\n            function getCubicBezierXYatT(startPt, controlPt1, controlPt2, endPt, T) {\n                var x = CubicN(T, startPt.x, controlPt1.x, controlPt2.x, endPt.x);\n                var y = CubicN(T, startPt.y, controlPt1.y, controlPt2.y, endPt.y);\n                return {\n                    x: x,\n                    y: y\n                };\n            } // cubic helper formula at T distance\n            function CubicN(T, a, b, c, d) {\n                var t2 = T * T;\n                var t3 = t2 * T;\n                return a + (-a * 3 + T * (3 * a - a * T)) * T + (3 * b + T * (-6 * b + b * 3 * T)) * T + (c * 3 - c * 3 * T) * t2 + d * t3;\n            }\n            function cubicBezierBounds(c) {\n                var minX = Infinity;\n                var maxX = -Infinity;\n                var minY = Infinity;\n                var maxY = -Infinity;\n                var s = {\n                    x: c[0],\n                    y: c[1]\n                };\n                var c1 = {\n                    x: c[2],\n                    y: c[3]\n                };\n                var c2 = {\n                    x: c[4],\n                    y: c[5]\n                };\n                var e = {\n                    x: c[6],\n                    y: c[7]\n                };\n                for (var t = 0; t < 100; t++) {\n                    var pt = getCubicBezierXYatT(s, c1, c2, e, t / 100);\n                    if (pt.x < minX) {\n                        minX = pt.x;\n                    }\n                    if (pt.x > maxX) {\n                        maxX = pt.x;\n                    }\n                    if (pt.y < minY) {\n                        minY = pt.y;\n                    }\n                    if (pt.y > maxY) {\n                        maxY = pt.y;\n                    }\n                }\n                return {\n                    minX: minX,\n                    minY: minY,\n                    maxX: maxX,\n                    maxY: maxY\n                };\n            }\n            module.exports = {\n                getBBoxFromPoints: function getBBoxFromPoints(points, lineWidth) {\n                    if (points.length === 0) {\n                        return;\n                    }\n                    var p = points[0];\n                    var left = p.x;\n                    var right = p.x;\n                    var top = p.y;\n                    var bottom = p.y;\n                    var len = points.length;\n                    for (var i = 1; i < len; i++) {\n                        p = points[i];\n                        left = Math.min(left, p.x);\n                        right = Math.max(right, p.x);\n                        top = Math.min(top, p.y);\n                        bottom = Math.max(bottom, p.y);\n                    }\n                    lineWidth = lineWidth / 2 || 0;\n                    return {\n                        minX: left - lineWidth,\n                        minY: top - lineWidth,\n                        maxX: right + lineWidth,\n                        maxY: bottom + lineWidth\n                    };\n                },\n                getBBoxFromLine: function getBBoxFromLine(x0, y0, x1, y1, lineWidth) {\n                    lineWidth = lineWidth / 2 || 0;\n                    return {\n                        minX: Math.min(x0, x1) - lineWidth,\n                        minY: Math.min(y0, y1) - lineWidth,\n                        maxX: Math.max(x0, x1) + lineWidth,\n                        maxY: Math.max(y0, y1) + lineWidth\n                    };\n                },\n                getBBoxFromArc: function getBBoxFromArc(x, y, r, startAngle, endAngle, anticlockwise) {\n                    var diff = Math.abs(startAngle - endAngle);\n                    if (diff % (Math.PI * 2) < 1e-4 && diff > 1e-4) {\n                        // Is a circle\n                        return {\n                            minX: x - r,\n                            minY: y - r,\n                            maxX: x + r,\n                            maxY: y + r\n                        };\n                    }\n                    start[0] = Math.cos(startAngle) * r + x;\n                    start[1] = Math.sin(startAngle) * r + y;\n                    end[0] = Math.cos(endAngle) * r + x;\n                    end[1] = Math.sin(endAngle) * r + y;\n                    var min = [0, 0];\n                    var max = [0, 0];\n                    Vector2.min(min, start, end);\n                    Vector2.max(max, start, end); // Thresh to [0, Math.PI * 2]\n                    startAngle = startAngle % (Math.PI * 2);\n                    if (startAngle < 0) {\n                        startAngle = startAngle + Math.PI * 2;\n                    }\n                    endAngle = endAngle % (Math.PI * 2);\n                    if (endAngle < 0) {\n                        endAngle = endAngle + Math.PI * 2;\n                    }\n                    if (startAngle > endAngle && !anticlockwise) {\n                        endAngle += Math.PI * 2;\n                    }\n                    else if (startAngle < endAngle && anticlockwise) {\n                        startAngle += Math.PI * 2;\n                    }\n                    if (anticlockwise) {\n                        var tmp = endAngle;\n                        endAngle = startAngle;\n                        startAngle = tmp;\n                    }\n                    for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n                        if (angle > startAngle) {\n                            extremity[0] = Math.cos(angle) * r + x;\n                            extremity[1] = Math.sin(angle) * r + y;\n                            Vector2.min(min, extremity, min);\n                            Vector2.max(max, extremity, max);\n                        }\n                    }\n                    return {\n                        minX: min[0],\n                        minY: min[1],\n                        maxX: max[0],\n                        maxY: max[1]\n                    };\n                },\n                getBBoxFromBezierGroup: function getBBoxFromBezierGroup(points, lineWidth) {\n                    var minX = Infinity;\n                    var maxX = -Infinity;\n                    var minY = Infinity;\n                    var maxY = -Infinity;\n                    for (var i = 0, len = points.length; i < len; i++) {\n                        var bbox = cubicBezierBounds(points[i]);\n                        if (bbox.minX < minX) {\n                            minX = bbox.minX;\n                        }\n                        if (bbox.maxX > maxX) {\n                            maxX = bbox.maxX;\n                        }\n                        if (bbox.minY < minY) {\n                            minY = bbox.minY;\n                        }\n                        if (bbox.maxY > maxY) {\n                            maxY = bbox.maxY;\n                        }\n                    }\n                    lineWidth = lineWidth / 2 || 0;\n                    return {\n                        minX: minX - lineWidth,\n                        minY: minY - lineWidth,\n                        maxX: maxX + lineWidth,\n                        maxY: maxY + lineWidth\n                    };\n                }\n            };\n            /***/ \n        }),\n        /* 11 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var KEYWORDS_PERCENT = {\n                min: 0,\n                median: 0.5,\n                max: 1\n            };\n            var GuideBase = \n            /*#__PURE__*/\n            function () {\n                var _proto = GuideBase.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() { };\n                function GuideBase(cfg) {\n                    this._initDefaultCfg();\n                    Util.deepMix(this, cfg);\n                }\n                _proto._getNormalizedValue = function _getNormalizedValue(val, scale) {\n                    var rst;\n                    if (Util.isNil(KEYWORDS_PERCENT[val])) {\n                        rst = scale.scale(val);\n                    }\n                    else {\n                        rst = KEYWORDS_PERCENT[val];\n                    }\n                    return rst;\n                };\n                _proto.parsePercentPoint = function parsePercentPoint(coord, position) {\n                    var xPercent = parseFloat(position[0]) / 100;\n                    var yPercent = parseFloat(position[1]) / 100;\n                    var start = coord.start;\n                    var end = coord.end;\n                    var width = Math.abs(start.x - end.x);\n                    var height = Math.abs(start.y - end.y);\n                    var x = width * xPercent + Math.min(start.x, end.x);\n                    var y = height * yPercent + Math.min(start.y, end.y);\n                    return {\n                        x: x,\n                        y: y\n                    };\n                };\n                _proto.parsePoint = function parsePoint(coord, position) {\n                    var self = this;\n                    var xScale = self.xScale;\n                    var yScales = self.yScales;\n                    if (Util.isFunction(position)) {\n                        position = position(xScale, yScales); // position 必须是对象\n                    } // 如果数据格式是 ['50%', '50%'] 的格式\n                    if (Util.isString(position[0]) && position[0].indexOf('%') !== -1) {\n                        return this.parsePercentPoint(coord, position);\n                    }\n                    var x = self._getNormalizedValue(position[0], xScale);\n                    var y = self._getNormalizedValue(position[1], yScales[0]);\n                    var point = coord.convertPoint({\n                        x: x,\n                        y: y\n                    });\n                    if (self.limitInPlot) {\n                        // limit in chart plotRange\n                        if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {\n                            return point;\n                        }\n                        return null;\n                    }\n                    return point;\n                };\n                _proto.render = function render() { };\n                _proto.repaint = function repaint() {\n                    this.remove();\n                    var coord = this.coord, container = this.container, canvas = this.canvas;\n                    if (container && !container.isDestroyed()) {\n                        this.render(coord, container);\n                        canvas.draw();\n                    }\n                };\n                _proto.remove = function remove() {\n                    var element = this.element;\n                    element && element.remove(true);\n                };\n                _proto.changeVisible = function changeVisible(visible) {\n                    var self = this;\n                    self.visible = visible;\n                    var element = self.element;\n                    if (!element)\n                        return;\n                    if (element.set) {\n                        element.set('visible', visible);\n                    }\n                    else {\n                        element.style.display = visible ? '' : 'none';\n                    }\n                };\n                return GuideBase;\n            }();\n            module.exports = GuideBase;\n            /***/ \n        }),\n        /* 12 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var mix = __webpack_require__(22);\n            var each = __webpack_require__(4);\n            var isObject = __webpack_require__(25);\n            var isNil = __webpack_require__(9);\n            var Scale = \n            /*#__PURE__*/\n            function () {\n                var _proto = Scale.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'base';\n                    /**\n                     * 格式化函数,输出文本或者tick时的格式化函数\n                     * @type {Function}\n                     */\n                    this.formatter = null;\n                    /**\n                     * 输出的值域\n                     * @type {Array}\n                     */\n                    this.range = [0, 1];\n                    /**\n                     * 度量的标记\n                     * @type {Array}\n                     */\n                    this.ticks = null;\n                    /**\n                     * 参与度量计算的值，可选项\n                     * @type {Array}\n                     */\n                    this.values = [];\n                };\n                function Scale(cfg) {\n                    this._initDefaultCfg();\n                    mix(this, cfg);\n                    this.init();\n                }\n                /**\n                 * 度量初始化\n                 * @protected\n                 */\n                _proto.init = function init() { };\n                _proto.getTicks = function getTicks() {\n                    var self = this;\n                    var ticks = self.ticks;\n                    var rst = [];\n                    each(ticks, function (tick) {\n                        var obj;\n                        if (isObject(tick)) {\n                            obj = tick;\n                        }\n                        else {\n                            obj = {\n                                text: self.getText(tick),\n                                tickValue: tick,\n                                value: self.scale(tick)\n                            };\n                        }\n                        rst.push(obj);\n                    });\n                    return rst;\n                };\n                _proto.getText = function getText(value, key) {\n                    var formatter = this.formatter;\n                    value = formatter ? formatter(value, key) : value;\n                    if (isNil(value) || !value.toString) {\n                        value = '';\n                    }\n                    return value.toString();\n                };\n                _proto.rangeMin = function rangeMin() {\n                    return this.range[0];\n                };\n                _proto.rangeMax = function rangeMax() {\n                    var range = this.range;\n                    return range[range.length - 1];\n                };\n                _proto.invert = function invert(value) {\n                    return value;\n                };\n                _proto.translate = function translate(value) {\n                    return value;\n                };\n                _proto.scale = function scale(value) {\n                    return value;\n                };\n                _proto.clone = function clone() {\n                    var self = this;\n                    var constr = self.constructor;\n                    var cfg = {};\n                    each(self, function (v, k) {\n                        cfg[k] = self[k];\n                    });\n                    return new constr(cfg);\n                };\n                _proto.change = function change(info) {\n                    this.ticks = null;\n                    mix(this, info);\n                    this.init();\n                    return this;\n                };\n                return Scale;\n            }();\n            module.exports = Scale;\n            /***/ \n        }),\n        /* 13 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(16);\n            var isArray = Array.isArray ? Array.isArray : function (value) {\n                return isType(value, 'Array');\n            };\n            module.exports = isArray;\n            /***/ \n        }),\n        /* 14 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview the Attribute base class\n             */\n            var isString = __webpack_require__(18);\n            var isArray = __webpack_require__(13);\n            var isNil = __webpack_require__(9);\n            var mix = __webpack_require__(22);\n            var each = __webpack_require__(4);\n            function toScaleString(scale, value) {\n                if (isString(value)) {\n                    return value;\n                }\n                return scale.invert(scale.scale(value));\n            }\n            /**\n             * 所有视觉通道属性的基类\n             * @class Attr\n             */\n            var AttributeBase = \n            /*#__PURE__*/\n            function () {\n                function AttributeBase(cfg) {\n                    var _this = this;\n                    /**\n                     * 属性的类型\n                     * @type {String}\n                     */\n                    this.type = 'base';\n                    /**\n                     * 属性的名称\n                     * @type {String}\n                     */\n                    this.name = null;\n                    /**\n                     * 回调函数\n                     * @type {Function}\n                     */\n                    this.method = null;\n                    /**\n                     * 备选的值数组\n                     * @type {Array}\n                     */\n                    this.values = [];\n                    /**\n                     * 属性内部的度量\n                     * @type {Array}\n                     */\n                    this.scales = [];\n                    /**\n                     * 是否通过线性取值, 如果未指定，则根据数值的类型判定\n                     * @type {Boolean}\n                     */\n                    this.linear = null;\n                    /**\n                     * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n                     */\n                    var mixedCallback = null;\n                    var defaultCallback = this.callback;\n                    if (cfg.callback) {\n                        var userCallback = cfg.callback;\n                        mixedCallback = function mixedCallback() {\n                            for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n                                params[_key] = arguments[_key];\n                            }\n                            var ret = userCallback.apply(void 0, params);\n                            if (isNil(ret)) {\n                                ret = defaultCallback.apply(_this, params);\n                            }\n                            return ret;\n                        };\n                    }\n                    mix(this, cfg);\n                    if (mixedCallback) {\n                        mix(this, {\n                            callback: mixedCallback\n                        });\n                    }\n                } // 获取属性值，将值映射到视觉通道\n                var _proto = AttributeBase.prototype;\n                _proto._getAttrValue = function _getAttrValue(scale, value) {\n                    var values = this.values;\n                    if (scale.isCategory && !this.linear) {\n                        var index = scale.translate(value);\n                        return values[index % values.length];\n                    }\n                    var percent = scale.scale(value);\n                    return this.getLinearValue(percent);\n                };\n                /**\n                 * 如果进行线性映射，返回对应的映射值\n                 * @protected\n                 * @param  {Number} percent 百分比\n                 * @return {*}  颜色值、形状、大小等\n                 */\n                _proto.getLinearValue = function getLinearValue(percent) {\n                    var values = this.values;\n                    var steps = values.length - 1;\n                    var step = Math.floor(steps * percent);\n                    var leftPercent = steps * percent - step;\n                    var start = values[step];\n                    var end = step === steps ? start : values[step + 1];\n                    var rstValue = start + (end - start) * leftPercent;\n                    return rstValue;\n                };\n                /**\n                 * 默认的回调函数\n                 * @param {*} value 回调函数的值\n                 * @type {Function}\n                 * @return {Array} 返回映射后的值\n                 */\n                _proto.callback = function callback(value) {\n                    var self = this;\n                    var scale = self.scales[0];\n                    var rstValue = null;\n                    if (scale.type === 'identity') {\n                        rstValue = scale.value;\n                    }\n                    else {\n                        rstValue = self._getAttrValue(scale, value);\n                    }\n                    return rstValue;\n                };\n                /**\n                 * 根据度量获取属性名\n                 * @return {Array} dims of this Attribute\n                 */\n                _proto.getNames = function getNames() {\n                    var scales = this.scales;\n                    var names = this.names;\n                    var length = Math.min(scales.length, names.length);\n                    var rst = [];\n                    for (var i = 0; i < length; i++) {\n                        rst.push(names[i]);\n                    }\n                    return rst;\n                };\n                /**\n                 * 根据度量获取维度名\n                 * @return {Array} dims of this Attribute\n                 */\n                _proto.getFields = function getFields() {\n                    var scales = this.scales;\n                    var rst = [];\n                    each(scales, function (scale) {\n                        rst.push(scale.field);\n                    });\n                    return rst;\n                };\n                /**\n                 * 根据名称获取度量\n                 * @param  {String} name the name of scale\n                 * @return {Scale} scale\n                 */\n                _proto.getScale = function getScale(name) {\n                    var scales = this.scales;\n                    var names = this.names;\n                    var index = names.indexOf(name);\n                    return scales[index];\n                };\n                /**\n                 * 映射数据\n                 * @param {*} param1...paramn 多个数值\n                 * @return {Array} 映射的值组成的数组\n                 */\n                _proto.mapping = function mapping() {\n                    var scales = this.scales;\n                    var callback = this.callback;\n                    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                        params[_key2] = arguments[_key2];\n                    }\n                    var values = params;\n                    if (callback) {\n                        for (var i = 0, len = params.length; i < len; i++) {\n                            params[i] = this._toOriginParam(params[i], scales[i]);\n                        }\n                        values = callback.apply(this, params);\n                    }\n                    values = [].concat(values);\n                    return values;\n                }; // 原始的参数\n                _proto._toOriginParam = function _toOriginParam(param, scale) {\n                    var rst = param;\n                    if (!scale.isLinear) {\n                        if (isArray(param)) {\n                            rst = [];\n                            for (var i = 0, len = param.length; i < len; i++) {\n                                rst.push(toScaleString(scale, param[i]));\n                            }\n                        }\n                        else {\n                            rst = toScaleString(scale, param);\n                        }\n                    }\n                    return rst;\n                };\n                return AttributeBase;\n            }();\n            module.exports = AttributeBase;\n            /***/ \n        }),\n        /* 15 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _assertThisInitialized(self) { if (self === void 0) {\n                throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            } return self; }\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Base = __webpack_require__(34);\n            var Plot = __webpack_require__(61);\n            var Util = __webpack_require__(0);\n            var Coord = __webpack_require__(62);\n            var Geom = __webpack_require__(6);\n            var ScaleController = __webpack_require__(70);\n            var AxisController = __webpack_require__(76);\n            var Global = __webpack_require__(1);\n            var _require = __webpack_require__(5), Canvas = _require.Canvas;\n            var Helper = __webpack_require__(28);\n            function isFullCircle(coord) {\n                var startAngle = coord.startAngle;\n                var endAngle = coord.endAngle;\n                if (!Util.isNil(startAngle) && !Util.isNil(endAngle) && endAngle - startAngle < Math.PI * 2) {\n                    return false;\n                }\n                return true;\n            }\n            function compare(a, b) {\n                return a - b;\n            }\n            function _isScaleExist(scales, compareScale) {\n                var flag = false;\n                Util.each(scales, function (scale) {\n                    var scaleValues = [].concat(scale.values);\n                    var compareScaleValues = [].concat(compareScale.values);\n                    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort(compare).toString() === compareScaleValues.sort(compare).toString()) {\n                        flag = true;\n                        return;\n                    }\n                });\n                return flag;\n            }\n            var Chart = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Chart, _Base);\n                Chart.initPlugins = function initPlugins() {\n                    return {\n                        _plugins: [],\n                        _cacheId: 0,\n                        register: function register(plugins) {\n                            var p = this._plugins;\n                            [].concat(plugins).forEach(function (plugin) {\n                                if (p.indexOf(plugin) === -1) {\n                                    p.push(plugin);\n                                }\n                            });\n                            this._cacheId++;\n                        },\n                        unregister: function unregister(plugins) {\n                            var p = this._plugins;\n                            [].concat(plugins).forEach(function (plugin) {\n                                var idx = p.indexOf(plugin);\n                                if (idx !== -1) {\n                                    p.splice(idx, 1);\n                                }\n                            });\n                            this._cacheId++;\n                        },\n                        clear: function clear() {\n                            this._plugins = [];\n                            this._cacheId++;\n                        },\n                        count: function count() {\n                            return this._plugins.length;\n                        },\n                        getAll: function getAll() {\n                            return this._plugins;\n                        },\n                        notify: function notify(chart, hook, args) {\n                            var descriptors = this.descriptors(chart);\n                            var ilen = descriptors.length;\n                            var i;\n                            var descriptor;\n                            var plugin;\n                            var params;\n                            var method;\n                            for (i = 0; i < ilen; ++i) {\n                                descriptor = descriptors[i];\n                                plugin = descriptor.plugin;\n                                method = plugin[hook];\n                                if (typeof method === 'function') {\n                                    params = [chart].concat(args || []);\n                                    if (method.apply(plugin, params) === false) {\n                                        return false;\n                                    }\n                                }\n                            }\n                            return true;\n                        },\n                        descriptors: function descriptors(chart) {\n                            var cache = chart._plugins || (chart._plugins = {});\n                            if (cache.id === this._cacheId) {\n                                return cache.descriptors;\n                            }\n                            var plugins = [];\n                            var descriptors = [];\n                            this._plugins.concat(chart && chart.get('plugins') || []).forEach(function (plugin) {\n                                var idx = plugins.indexOf(plugin);\n                                if (idx !== -1) {\n                                    return;\n                                }\n                                plugins.push(plugin);\n                                descriptors.push({\n                                    plugin: plugin\n                                });\n                            });\n                            cache.descriptors = descriptors;\n                            cache.id = this._cacheId;\n                            return descriptors;\n                        }\n                    };\n                };\n                var _proto = Chart.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {\n                        /**\n                         * the id of canvas\n                         * @type {String}\n                         */\n                        id: null,\n                        /**\n                         * padding\n                         * @type {Array|Number}\n                         */\n                        padding: Global.padding,\n                        /**\n                         * data\n                         * @type {Array}\n                         */\n                        data: null,\n                        /**\n                         * scales of chart\n                         * @type {Object}\n                         */\n                        scales: {},\n                        /**\n                         * @private\n                         * geometry instances\n                         * @type {Array}\n                         */\n                        geoms: null,\n                        /**\n                         * scale configuration\n                         * @type {Object}\n                         */\n                        colDefs: null,\n                        pixelRatio: Global.pixelRatio,\n                        /**\n                         * filter options\n                         * @type {Object}\n                         */\n                        filters: null,\n                        appendPadding: Global.appendPadding\n                    };\n                };\n                _proto._syncYScales = function _syncYScales() {\n                    var geoms = this.get('geoms');\n                    var syncScales = [];\n                    var min = [];\n                    var max = [];\n                    Util.each(geoms, function (geom) {\n                        var yScale = geom.getYScale();\n                        if (yScale.isLinear) {\n                            syncScales.push(yScale);\n                            min.push(yScale.min);\n                            max.push(yScale.max);\n                        }\n                    });\n                    min = Math.min.apply(null, min);\n                    max = Math.max.apply(null, max);\n                    Util.each(syncScales, function (scale) {\n                        scale.change({\n                            min: min\n                        });\n                        scale.change({\n                            max: max\n                        });\n                    });\n                };\n                _proto._getFieldsForLegend = function _getFieldsForLegend() {\n                    var fields = [];\n                    var geoms = this.get('geoms');\n                    Util.each(geoms, function (geom) {\n                        var attrOptions = geom.get('attrOptions');\n                        var attrCfg = attrOptions.color;\n                        if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {\n                            var arr = attrCfg.field.split('*');\n                            Util.each(arr, function (item) {\n                                if (fields.indexOf(item) === -1) {\n                                    fields.push(item);\n                                }\n                            });\n                        }\n                    });\n                    return fields;\n                };\n                _proto._createScale = function _createScale(field, data) {\n                    var scaleController = this.get('scaleController');\n                    return scaleController.createScale(field, data);\n                };\n                _proto._adjustScale = function _adjustScale() {\n                    var self = this;\n                    var coord = self.get('coord');\n                    var xScale = self.getXScale();\n                    var yScales = self.getYScales();\n                    var scales = [];\n                    xScale && scales.push(xScale);\n                    scales = scales.concat(yScales);\n                    var inFullCircle = coord.isPolar && isFullCircle(coord);\n                    var scaleController = self.get('scaleController');\n                    var colDefs = scaleController.defs;\n                    Util.each(scales, function (scale) {\n                        if ((scale.isCategory || scale.isIdentity) && scale.values && !(colDefs[scale.field] && colDefs[scale.field].range)) {\n                            var count = scale.values.length;\n                            var range;\n                            if (count === 1) {\n                                range = [0.5, 1];\n                            }\n                            else {\n                                var widthRatio = 1;\n                                var offset = 0;\n                                if (inFullCircle) {\n                                    if (!coord.transposed) {\n                                        range = [0, 1 - 1 / count];\n                                    }\n                                    else {\n                                        widthRatio = Global.widthRatio.multiplePie;\n                                        offset = 1 / count * widthRatio;\n                                        range = [offset / 2, 1 - offset / 2];\n                                    }\n                                }\n                                else {\n                                    offset = 1 / count * 1 / 2;\n                                    range = [offset, 1 - offset];\n                                }\n                            }\n                            scale.range = range;\n                        }\n                    });\n                    var geoms = this.get('geoms');\n                    for (var i = 0; i < geoms.length; i++) {\n                        var geom = geoms[i];\n                        if (geom.get('type') === 'interval') {\n                            var yScale = geom.getYScale();\n                            var field = yScale.field, min = yScale.min, max = yScale.max, type = yScale.type;\n                            if (!(colDefs[field] && colDefs[field].min) && type !== 'time') {\n                                if (min > 0) {\n                                    yScale.change({\n                                        min: 0\n                                    });\n                                }\n                                else if (max <= 0) {\n                                    yScale.change({\n                                        max: 0\n                                    });\n                                }\n                            }\n                        }\n                    }\n                };\n                _proto._removeGeoms = function _removeGeoms() {\n                    var geoms = this.get('geoms');\n                    while (geoms.length > 0) {\n                        var geom = geoms.shift();\n                        geom.destroy();\n                    }\n                };\n                _proto._clearGeoms = function _clearGeoms() {\n                    var geoms = this.get('geoms');\n                    for (var i = 0, length = geoms.length; i < length; i++) {\n                        var geom = geoms[i];\n                        geom.clear();\n                    }\n                };\n                _proto._clearInner = function _clearInner() {\n                    this.set('scales', {});\n                    this.set('legendItems', null);\n                    this._clearGeoms();\n                    Chart.plugins.notify(this, 'clearInner');\n                    this.get('axisController') && this.get('axisController').clear();\n                };\n                _proto._execFilter = function _execFilter(data) {\n                    var filters = this.get('filters');\n                    if (filters) {\n                        data = data.filter(function (obj) {\n                            var rst = true;\n                            Util.each(filters, function (fn, k) {\n                                if (fn) {\n                                    rst = fn(obj[k], obj);\n                                    if (!rst) {\n                                        return false;\n                                    }\n                                }\n                            });\n                            return rst;\n                        });\n                    }\n                    return data;\n                };\n                _proto._initGeoms = function _initGeoms(geoms) {\n                    var coord = this.get('coord');\n                    var data = this.get('filteredData');\n                    var colDefs = this.get('colDefs');\n                    for (var i = 0, length = geoms.length; i < length; i++) {\n                        var geom = geoms[i];\n                        geom.set('data', data);\n                        geom.set('coord', coord);\n                        geom.set('colDefs', colDefs);\n                        geom.init();\n                    }\n                };\n                _proto._initCoord = function _initCoord() {\n                    var plot = this.get('plotRange');\n                    var coordCfg = Util.mix({\n                        type: 'cartesian'\n                    }, this.get('coordCfg'), {\n                        plot: plot\n                    });\n                    var type = coordCfg.type;\n                    var C = Coord[Util.upperFirst(type)];\n                    var coord = new C(coordCfg);\n                    this.set('coord', coord);\n                };\n                _proto._initLayout = function _initLayout() {\n                    var padding = this.get('_padding');\n                    if (!padding) {\n                        padding = this.get('margin') || this.get('padding');\n                        padding = Util.parsePadding(padding);\n                    }\n                    var top = padding[0] === 'auto' ? 0 : padding[0];\n                    var right = padding[1] === 'auto' ? 0 : padding[1];\n                    var bottom = padding[2] === 'auto' ? 0 : padding[2];\n                    var left = padding[3] === 'auto' ? 0 : padding[3];\n                    var width = this.get('width');\n                    var height = this.get('height');\n                    var plot = new Plot({\n                        start: {\n                            x: left,\n                            y: top\n                        },\n                        end: {\n                            x: width - right,\n                            y: height - bottom\n                        }\n                    });\n                    this.set('plotRange', plot);\n                    this.set('plot', plot);\n                };\n                _proto._initCanvas = function _initCanvas() {\n                    var self = this;\n                    try {\n                        var canvas = new Canvas({\n                            el: self.get('el') || self.get('id'),\n                            context: self.get('context'),\n                            pixelRatio: self.get('pixelRatio'),\n                            width: self.get('width'),\n                            height: self.get('height'),\n                            fontFamily: Global.fontFamily\n                        });\n                        self.set('canvas', canvas);\n                        self.set('width', canvas.get('width'));\n                        self.set('height', canvas.get('height'));\n                    }\n                    catch (error) {\n                        throw error;\n                    }\n                    Chart.plugins.notify(self, 'afterCanvasInit');\n                    self._initLayout();\n                };\n                _proto._initLayers = function _initLayers() {\n                    var canvas = this.get('canvas');\n                    this.set('backPlot', canvas.addGroup());\n                    this.set('middlePlot', canvas.addGroup({\n                        zIndex: 10\n                    }));\n                    this.set('frontPlot', canvas.addGroup({\n                        zIndex: 20\n                    }));\n                };\n                _proto._init = function _init() {\n                    var self = this;\n                    self._initCanvas();\n                    self._initLayers();\n                    self.set('geoms', []);\n                    self.set('scaleController', new ScaleController());\n                    self.set('axisController', new AxisController({\n                        frontPlot: self.get('frontPlot').addGroup({\n                            className: 'axisContainer'\n                        }),\n                        backPlot: self.get('backPlot').addGroup({\n                            className: 'axisContainer'\n                        }),\n                        chart: self\n                    }));\n                    Chart.plugins.notify(self, 'init');\n                };\n                function Chart(cfg) {\n                    var _this;\n                    _this = _Base.call(this, cfg) || this;\n                    var self = _assertThisInitialized(_this);\n                    Util.each(Geom, function (geomConstructor, className) {\n                        var methodName = Util.lowerFirst(className);\n                        self[methodName] = function (cfg) {\n                            var geom = new geomConstructor(cfg);\n                            self.addGeom(geom);\n                            return geom;\n                        };\n                    });\n                    self._init();\n                    return _this;\n                }\n                /**\n                 * set data and some scale configuration\n                 * @chainable\n                 * @param  {Array} data the dataset to visualize\n                 * @param  {Object} colDefs the configuration for scales\n                 * @return {Chart} return the chart instance\n                 */\n                _proto.source = function source(data, colDefs) {\n                    this.set('data', data);\n                    if (colDefs) {\n                        this.scale(colDefs);\n                    }\n                    return this;\n                };\n                _proto.scale = function scale(field, cfg) {\n                    var colDefs = this.get('colDefs') || {};\n                    if (Util.isObject(field)) {\n                        Util.mix(colDefs, field);\n                    }\n                    else {\n                        colDefs[field] = cfg;\n                    }\n                    this.set('colDefs', colDefs);\n                    var scaleController = this.get('scaleController');\n                    scaleController.defs = colDefs;\n                    return this;\n                };\n                _proto.axis = function axis(field, cfg) {\n                    var axisController = this.get('axisController');\n                    if (!field) {\n                        axisController.axisCfg = null;\n                    }\n                    else {\n                        axisController.axisCfg = axisController.axisCfg || {};\n                        axisController.axisCfg[field] = cfg;\n                    }\n                    return this;\n                };\n                _proto.coord = function coord(type, cfg) {\n                    var coordCfg;\n                    if (Util.isObject(type)) {\n                        coordCfg = type;\n                    }\n                    else {\n                        coordCfg = cfg || {};\n                        coordCfg.type = type || 'cartesian';\n                    }\n                    this.set('coordCfg', coordCfg);\n                    return this;\n                };\n                _proto.filter = function filter(field, condition) {\n                    var filters = this.get('filters') || {};\n                    filters[field] = condition;\n                    this.set('filters', filters);\n                };\n                _proto.render = function render() {\n                    var canvas = this.get('canvas');\n                    var geoms = this.get('geoms');\n                    var data = this.get('data') || [];\n                    var filteredData = this._execFilter(data); // filter data\n                    this.set('filteredData', filteredData);\n                    this._initCoord(); // initialization coordinate instance\n                    Chart.plugins.notify(this, 'beforeGeomInit');\n                    this._initGeoms(geoms); // init all geometry instances\n                    this.get('syncY') && this._syncYScales();\n                    this._adjustScale(); // do some adjust for data\n                    Chart.plugins.notify(this, 'beforeGeomDraw');\n                    this._renderAxis();\n                    var middlePlot = this.get('middlePlot');\n                    if (this.get('limitInPlot') && !middlePlot.attr('clip')) {\n                        var coord = this.get('coord');\n                        var clip = Helper.getClip(coord);\n                        clip.set('canvas', middlePlot.get('canvas'));\n                        middlePlot.attr('clip', clip);\n                    }\n                    for (var i = 0, length = geoms.length; i < length; i++) {\n                        var geom = geoms[i];\n                        geom.paint();\n                    }\n                    Chart.plugins.notify(this, 'afterGeomDraw');\n                    canvas.sort();\n                    this.get('frontPlot').sort();\n                    Chart.plugins.notify(this, 'beforeCanvasDraw');\n                    canvas.draw();\n                    return this;\n                };\n                _proto.clear = function clear() {\n                    Chart.plugins.notify(this, 'clear');\n                    this._removeGeoms();\n                    this._clearInner();\n                    this.set('filters', null);\n                    this.set('isUpdate', false);\n                    this.set('_padding', null);\n                    var canvas = this.get('canvas');\n                    canvas.draw();\n                    return this;\n                };\n                _proto.repaint = function repaint() {\n                    this.set('isUpdate', true);\n                    Chart.plugins.notify(this, 'repaint');\n                    this._clearInner();\n                    this.render();\n                };\n                _proto.changeData = function changeData(data) {\n                    this.set('data', data);\n                    Chart.plugins.notify(this, 'changeData');\n                    this.set('_padding', null);\n                    this.repaint();\n                };\n                _proto.changeSize = function changeSize(width, height) {\n                    if (width) {\n                        this.set('width', width);\n                    }\n                    else {\n                        width = this.get('width');\n                    }\n                    if (height) {\n                        this.set('height', height);\n                    }\n                    else {\n                        height = this.get('height');\n                    }\n                    var canvas = this.get('canvas');\n                    canvas.changeSize(width, height);\n                    this._initLayout();\n                    this.repaint();\n                    return this;\n                };\n                _proto.destroy = function destroy() {\n                    this.clear();\n                    var canvas = this.get('canvas');\n                    canvas.destroy();\n                    Chart.plugins.notify(this, 'afterCanvasDestroyed');\n                    if (this._interactions) {\n                        Util.each(this._interactions, function (interaction) {\n                            interaction.destroy();\n                        });\n                    }\n                    _Base.prototype.destroy.call(this);\n                };\n                _proto.getPosition = function getPosition(record) {\n                    var self = this;\n                    var coord = self.get('coord');\n                    var xScale = self.getXScale();\n                    var yScale = self.getYScales()[0];\n                    var xField = xScale.field;\n                    var x = xScale.scale(record[xField]);\n                    var yField = yScale.field;\n                    var y = yScale.scale(record[yField]);\n                    return coord.convertPoint({\n                        x: x,\n                        y: y\n                    });\n                };\n                _proto.getRecord = function getRecord(point) {\n                    var self = this;\n                    var coord = self.get('coord');\n                    var xScale = self.getXScale();\n                    var yScale = self.getYScales()[0];\n                    var invertPoint = coord.invertPoint(point);\n                    var record = {};\n                    record[xScale.field] = xScale.invert(invertPoint.x);\n                    record[yScale.field] = yScale.invert(invertPoint.y);\n                    return record;\n                };\n                _proto.getSnapRecords = function getSnapRecords(point) {\n                    var geom = this.get('geoms')[0];\n                    var data = [];\n                    if (geom) {\n                        // need to judge\n                        data = geom.getSnapRecords(point);\n                    }\n                    return data;\n                };\n                _proto.createScale = function createScale(field) {\n                    var data = this.get('data');\n                    var filteredData = this.get('filteredData');\n                    if (filteredData.length) {\n                        var legendFields = this._getFieldsForLegend();\n                        if (legendFields.indexOf(field) === -1) {\n                            data = filteredData;\n                        }\n                    }\n                    var scales = this.get('scales');\n                    if (!scales[field]) {\n                        scales[field] = this._createScale(field, data);\n                    }\n                    return scales[field];\n                };\n                _proto.addGeom = function addGeom(geom) {\n                    var geoms = this.get('geoms');\n                    var middlePlot = this.get('middlePlot');\n                    geoms.push(geom);\n                    geom.set('chart', this);\n                    geom.set('container', middlePlot.addGroup());\n                };\n                _proto.getXScale = function getXScale() {\n                    var self = this;\n                    var geoms = self.get('geoms');\n                    var xScale = geoms[0].getXScale();\n                    return xScale;\n                };\n                _proto.getYScales = function getYScales() {\n                    var geoms = this.get('geoms');\n                    var rst = [];\n                    Util.each(geoms, function (geom) {\n                        var yScale = geom.getYScale();\n                        if (rst.indexOf(yScale) === -1) {\n                            rst.push(yScale);\n                        }\n                    });\n                    return rst;\n                };\n                _proto.getLegendItems = function getLegendItems() {\n                    if (this.get('legendItems')) {\n                        return this.get('legendItems');\n                    }\n                    var legendItems = {};\n                    var scales = [];\n                    var geoms = this.get('geoms');\n                    Util.each(geoms, function (geom) {\n                        var colorAttr = geom.getAttr('color');\n                        if (colorAttr) {\n                            var scale = colorAttr.getScale('color');\n                            if (scale.type !== 'identity' && !_isScaleExist(scales, scale)) {\n                                scales.push(scale);\n                                var field = scale.field;\n                                var ticks = scale.getTicks();\n                                var items = [];\n                                Util.each(ticks, function (tick) {\n                                    var text = tick.text;\n                                    var name = text;\n                                    var scaleValue = tick.value;\n                                    var value = scale.invert(scaleValue);\n                                    var color = colorAttr.mapping(value).join('') || Global.defaultColor;\n                                    var marker = {\n                                        fill: color,\n                                        radius: 3,\n                                        symbol: 'circle',\n                                        stroke: '#fff'\n                                    };\n                                    items.push({\n                                        name: name,\n                                        // for display\n                                        dataValue: value,\n                                        // the origin value\n                                        checked: true,\n                                        marker: marker\n                                    });\n                                });\n                                legendItems[field] = items;\n                            }\n                        }\n                    });\n                    this.set('legendItems', legendItems);\n                    return legendItems;\n                } // register the plugins\n                ;\n                _proto.registerPlugins = function registerPlugins(plugins) {\n                    var self = this;\n                    var chartPlugins = self.get('plugins') || [];\n                    if (!Util.isArray(chartPlugins)) {\n                        chartPlugins = [chartPlugins];\n                    }\n                    [].concat(plugins).forEach(function (plugin) {\n                        if (chartPlugins.indexOf(plugin) === -1) {\n                            plugin.init && plugin.init(self); // init\n                            chartPlugins.push(plugin);\n                        }\n                    });\n                    Chart.plugins._cacheId++;\n                    self.set('plugins', chartPlugins);\n                };\n                _proto._renderAxis = function _renderAxis() {\n                    var axisController = this.get('axisController');\n                    var xScale = this.getXScale();\n                    var yScales = this.getYScales();\n                    var coord = this.get('coord');\n                    Chart.plugins.notify(this, 'beforeRenderAxis');\n                    axisController.createAxis(coord, xScale, yScales);\n                };\n                _proto._isAutoPadding = function _isAutoPadding() {\n                    if (this.get('_padding')) {\n                        return false;\n                    }\n                    var padding = this.get('padding');\n                    if (Util.isArray(padding)) {\n                        return padding.indexOf('auto') !== -1;\n                    }\n                    return padding === 'auto';\n                };\n                _proto._updateLayout = function _updateLayout(padding) {\n                    var width = this.get('width');\n                    var height = this.get('height');\n                    var start = {\n                        x: padding[3],\n                        y: padding[0]\n                    };\n                    var end = {\n                        x: width - padding[1],\n                        y: height - padding[2]\n                    };\n                    var plot = this.get('plot');\n                    var coord = this.get('coord');\n                    plot.reset(start, end);\n                    coord.reset(plot);\n                };\n                return Chart;\n            }(Base);\n            Chart.plugins = Chart.initPlugins();\n            module.exports = Chart;\n            /***/ \n        }),\n        /* 16 */\n        /***/ (function (module, exports) {\n            var toString = {}.toString;\n            var isType = function isType(value, type) {\n                return toString.call(value) === '[object ' + type + ']';\n            };\n            module.exports = isType;\n            /***/ \n        }),\n        /* 17 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * 判断是否数字\n             * @return {Boolean} 是否数字\n             */\n            var isType = __webpack_require__(16);\n            var isNumber = function isNumber(value) {\n                return isType(value, 'Number');\n            };\n            module.exports = isNumber;\n            /***/ \n        }),\n        /* 18 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(16);\n            var isString = function isString(str) {\n                return isType(str, 'String');\n            };\n            module.exports = isString;\n            /***/ \n        }),\n        /* 19 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview shape util\n             * @author dxq613@gmail.com\n             */\n            var Util = __webpack_require__(0);\n            var ShapeUtil = {\n                splitPoints: function splitPoints(obj) {\n                    var points = [];\n                    var x = obj.x;\n                    var y = obj.y;\n                    y = Util.isArray(y) ? y : [y];\n                    y.forEach(function (yItem, index) {\n                        var point = {\n                            x: Util.isArray(x) ? x[index] : x,\n                            y: yItem\n                        };\n                        points.push(point);\n                    });\n                    return points;\n                },\n                splitArray: function splitArray(data, yField, connectNulls) {\n                    if (!data.length)\n                        return [];\n                    var arr = [];\n                    var tmp = [];\n                    var yValue;\n                    Util.each(data, function (obj) {\n                        yValue = obj._origin ? obj._origin[yField] : obj[yField];\n                        if (connectNulls) {\n                            if (!Util.isNil(yValue)) {\n                                tmp.push(obj);\n                            }\n                        }\n                        else {\n                            if (Util.isArray(yValue) && Util.isNil(yValue[0]) || Util.isNil(yValue)) {\n                                if (tmp.length) {\n                                    arr.push(tmp);\n                                    tmp = [];\n                                }\n                            }\n                            else {\n                                tmp.push(obj);\n                            }\n                        }\n                    });\n                    if (tmp.length) {\n                        arr.push(tmp);\n                    }\n                    return arr;\n                }\n            };\n            module.exports = ShapeUtil;\n            /***/ \n        }),\n        /* 20 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(7);\n            var isArray = Array.isArray ? Array.isArray : function (value) {\n                return isType(value, 'Array');\n            };\n            module.exports = isArray;\n            /***/ \n        }),\n        /* 21 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Base = \n            /*#__PURE__*/\n            function () {\n                var _proto = Base.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() { };\n                function Base(cfg) {\n                    this._initDefaultCfg();\n                    Util.mix(this, cfg);\n                    var start;\n                    var end;\n                    if (this.plot) {\n                        start = this.plot.bl;\n                        end = this.plot.tr;\n                        this.start = start;\n                        this.end = end;\n                    }\n                    else {\n                        start = this.start;\n                        end = this.end;\n                    }\n                    this.init(start, end);\n                }\n                _proto.init = function init() { };\n                _proto.convertPoint = function convertPoint(point) {\n                    return point;\n                };\n                _proto.invertPoint = function invertPoint(point) {\n                    return point;\n                };\n                _proto.reset = function reset(plot) {\n                    this.plot = plot;\n                    var bl = plot.bl, tr = plot.tr;\n                    this.start = bl;\n                    this.end = tr;\n                    this.init(bl, tr);\n                };\n                return Base;\n            }();\n            module.exports = Base;\n            /***/ \n        }),\n        /* 22 */\n        /***/ (function (module, exports) {\n            function _mix(dist, obj) {\n                for (var key in obj) {\n                    if (obj.hasOwnProperty(key) && key !== 'constructor' && obj[key] !== undefined) {\n                        dist[key] = obj[key];\n                    }\n                }\n            }\n            var mix = function mix(dist, src1, src2, src3) {\n                if (src1)\n                    _mix(dist, src1);\n                if (src2)\n                    _mix(dist, src2);\n                if (src3)\n                    _mix(dist, src3);\n                return dist;\n            };\n            module.exports = mix;\n            /***/ \n        }),\n        /* 23 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var mix = __webpack_require__(22);\n            var Adjust = \n            /*#__PURE__*/\n            function () {\n                var _proto = Adjust.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整\n                };\n                function Adjust(cfg) {\n                    this._initDefaultCfg();\n                    mix(this, cfg);\n                }\n                /**\n                 * @override\n                 */\n                _proto.processAdjust = function processAdjust() { };\n                return Adjust;\n            }();\n            module.exports = Adjust;\n            /***/ \n        }),\n        /* 24 */\n        /***/ (function (module, exports) {\n            var Matrix = {\n                multiply: function multiply(m1, m2) {\n                    var m11 = m1[0] * m2[0] + m1[2] * m2[1];\n                    var m12 = m1[1] * m2[0] + m1[3] * m2[1];\n                    var m21 = m1[0] * m2[2] + m1[2] * m2[3];\n                    var m22 = m1[1] * m2[2] + m1[3] * m2[3];\n                    var dx = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n                    var dy = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n                    return [m11, m12, m21, m22, dx, dy];\n                },\n                scale: function scale(out, m, v) {\n                    out[0] = m[0] * v[0];\n                    out[1] = m[1] * v[0];\n                    out[2] = m[2] * v[1];\n                    out[3] = m[3] * v[1];\n                    out[4] = m[4];\n                    out[5] = m[5];\n                    return out;\n                },\n                rotate: function rotate(out, m, radian) {\n                    var c = Math.cos(radian);\n                    var s = Math.sin(radian);\n                    var m11 = m[0] * c + m[2] * s;\n                    var m12 = m[1] * c + m[3] * s;\n                    var m21 = m[0] * -s + m[2] * c;\n                    var m22 = m[1] * -s + m[3] * c;\n                    out[0] = m11;\n                    out[1] = m12;\n                    out[2] = m21;\n                    out[3] = m22;\n                    out[4] = m[4];\n                    out[5] = m[5];\n                    return out;\n                },\n                translate: function translate(out, m, v) {\n                    out[0] = m[0];\n                    out[1] = m[1];\n                    out[2] = m[2];\n                    out[3] = m[3];\n                    out[4] = m[4] + m[0] * v[0] + m[2] * v[1];\n                    out[5] = m[5] + m[1] * v[0] + m[3] * v[1];\n                    return out;\n                },\n                transform: function transform(m, actions) {\n                    var out = [].concat(m);\n                    for (var i = 0, len = actions.length; i < len; i++) {\n                        var action = actions[i];\n                        switch (action[0]) {\n                            case 't':\n                                Matrix.translate(out, out, [action[1], action[2]]);\n                                break;\n                            case 's':\n                                Matrix.scale(out, out, [action[1], action[2]]);\n                                break;\n                            case 'r':\n                                Matrix.rotate(out, out, action[1]);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    return out;\n                }\n            };\n            module.exports = Matrix;\n            /***/ \n        }),\n        /* 25 */\n        /***/ (function (module, exports) {\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n                return typeof obj;\n            } : function (obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var isObject = function isObject(value) {\n                /**\n                 * isObject({}) => true\n                 * isObject([1, 2, 3]) => true\n                 * isObject(Function) => true\n                 * isObject(null) => false\n                 */\n                var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n                return value !== null && type === 'object' || type === 'function';\n            };\n            module.exports = isObject;\n            /***/ \n        }),\n        /* 26 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Global = __webpack_require__(1);\n            var Vector2 = __webpack_require__(3);\n            var Abastract = \n            /*#__PURE__*/\n            function () {\n                var _proto = Abastract.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    /**\n                     * ticks\n                     * @type {Array}\n                     */\n                    this.ticks = [];\n                    /**\n                     * the configuration for tickLine\n                     * @type {Object}\n                     */\n                    this.tickLine = {};\n                    /**\n                     * the direction of ticks, 1 means clockwise\n                     * @type {Number}\n                     */\n                    this.offsetFactor = 1;\n                    /**\n                     * the top container\n                     * @type {container}\n                     */\n                    this.frontContainer = null;\n                    /**\n                     * the back container\n                     * @type {[type]}\n                     */\n                    this.backContainer = null;\n                    /**\n                     * points for draw grid line\n                     * @type {Array}\n                     */\n                    this.gridPoints = [];\n                };\n                function Abastract(cfg) {\n                    this._initDefaultCfg();\n                    Util.mix(this, cfg);\n                    this.draw();\n                }\n                _proto.draw = function draw() {\n                    var line = this.line, tickLine = this.tickLine, label = this.label, grid = this.grid;\n                    grid && this.drawGrid(grid); // draw the grid lines\n                    tickLine && this.drawTicks(tickLine); // draw the tickLine\n                    line && this.drawLine(line); // draw axis line\n                    label && this.drawLabels(); // draw ticks\n                };\n                _proto.drawTicks = function drawTicks(tickCfg) {\n                    var self = this;\n                    var ticks = self.ticks;\n                    var length = tickCfg.length;\n                    var container = self.getContainer(tickCfg.top);\n                    Util.each(ticks, function (tick) {\n                        var start = self.getOffsetPoint(tick.value);\n                        var end = self.getSidePoint(start, length);\n                        var shape = container.addShape('line', {\n                            className: 'axis-tick',\n                            attrs: Util.mix({\n                                x1: start.x,\n                                y1: start.y,\n                                x2: end.x,\n                                y2: end.y\n                            }, tickCfg)\n                        });\n                        shape._id = self._id + '-ticks';\n                    });\n                };\n                _proto.drawLabels = function drawLabels() {\n                    var self = this;\n                    var labelOffset = self.labelOffset;\n                    var labels = self.labels;\n                    Util.each(labels, function (labelShape) {\n                        var container = self.getContainer(labelShape.get('top'));\n                        var start = self.getOffsetPoint(labelShape.get('value'));\n                        var _self$getSidePoint = self.getSidePoint(start, labelOffset), x = _self$getSidePoint.x, y = _self$getSidePoint.y;\n                        labelShape.attr(Util.mix({\n                            x: x,\n                            y: y\n                        }, self.getTextAlignInfo(start, labelOffset), labelShape.get('textStyle')));\n                        labelShape._id = self._id + '-' + labelShape.attr('text');\n                        container.add(labelShape);\n                    });\n                };\n                _proto.drawLine = function drawLine() { };\n                _proto.drawGrid = function drawGrid(grid) {\n                    var self = this;\n                    var gridPoints = self.gridPoints, ticks = self.ticks;\n                    var gridCfg = grid;\n                    var count = gridPoints.length;\n                    Util.each(gridPoints, function (subPoints, index) {\n                        if (Util.isFunction(grid)) {\n                            var tick = ticks[index] || {};\n                            var executedGrid = grid(tick.text, index, count);\n                            gridCfg = executedGrid ? Util.mix({}, Global._defaultAxis.grid, executedGrid) : null;\n                        }\n                        if (gridCfg) {\n                            var type = gridCfg.type; // has two types: 'line' and 'arc'\n                            var points = subPoints.points;\n                            var container = self.getContainer(gridCfg.top);\n                            var shape;\n                            if (type === 'arc') {\n                                var center = self.center, startAngle = self.startAngle, endAngle = self.endAngle;\n                                var radius = Vector2.length([points[0].x - center.x, points[0].y - center.y]);\n                                shape = container.addShape('Arc', {\n                                    className: 'axis-grid',\n                                    attrs: Util.mix({\n                                        x: center.x,\n                                        y: center.y,\n                                        startAngle: startAngle,\n                                        endAngle: endAngle,\n                                        r: radius\n                                    }, gridCfg)\n                                });\n                            }\n                            else {\n                                shape = container.addShape('Polyline', {\n                                    className: 'axis-grid',\n                                    attrs: Util.mix({\n                                        points: points\n                                    }, gridCfg)\n                                });\n                            }\n                            shape._id = subPoints._id;\n                        }\n                    });\n                };\n                _proto.getOffsetPoint = function getOffsetPoint() { };\n                _proto.getAxisVector = function getAxisVector() { };\n                _proto.getOffsetVector = function getOffsetVector(point, offset) {\n                    var self = this;\n                    var axisVector = self.getAxisVector(point);\n                    var normal = Vector2.normalize([], axisVector);\n                    var factor = self.offsetFactor;\n                    var verticalVector = [normal[1] * -1 * factor, normal[0] * factor];\n                    return Vector2.scale([], verticalVector, offset);\n                };\n                _proto.getSidePoint = function getSidePoint(point, offset) {\n                    var self = this;\n                    var offsetVector = self.getOffsetVector(point, offset);\n                    return {\n                        x: point.x + offsetVector[0],\n                        y: point.y + offsetVector[1]\n                    };\n                };\n                _proto.getTextAlignInfo = function getTextAlignInfo(point, offset) {\n                    var self = this;\n                    var offsetVector = self.getOffsetVector(point, offset);\n                    var align;\n                    var baseLine;\n                    if (offsetVector[0] > 0) {\n                        align = 'left';\n                    }\n                    else if (offsetVector[0] < 0) {\n                        align = 'right';\n                    }\n                    else {\n                        align = 'center';\n                    }\n                    if (offsetVector[1] > 0) {\n                        baseLine = 'top';\n                    }\n                    else if (offsetVector[1] < 0) {\n                        baseLine = 'bottom';\n                    }\n                    else {\n                        baseLine = 'middle';\n                    }\n                    return {\n                        textAlign: align,\n                        textBaseline: baseLine\n                    };\n                };\n                _proto.getContainer = function getContainer(isTop) {\n                    var frontContainer = this.frontContainer, backContainer = this.backContainer;\n                    return isTop ? frontContainer : backContainer;\n                };\n                return Abastract;\n            }();\n            module.exports = Abastract;\n            /***/ \n        }),\n        /* 27 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var MatrixUtil = __webpack_require__(24);\n            var Vector2 = __webpack_require__(3);\n            var StyleUtil = __webpack_require__(80);\n            function isUnchanged(m) {\n                return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;\n            }\n            var ALIAS_ATTRS_MAP = {\n                stroke: 'strokeStyle',\n                fill: 'fillStyle',\n                opacity: 'globalAlpha'\n            };\n            var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash', 'shadow' // 兼容支付宝小程序\n            ];\n            var CLIP_SHAPES = ['circle', 'sector', 'polygon', 'rect', 'polyline'];\n            var Element = \n            /*#__PURE__*/\n            function () {\n                var _proto = Element.prototype;\n                _proto._initProperties = function _initProperties() {\n                    this._attrs = {\n                        zIndex: 0,\n                        visible: true,\n                        destroyed: false\n                    };\n                };\n                function Element(cfg) {\n                    this._initProperties();\n                    Util.mix(this._attrs, cfg);\n                    var attrs = this._attrs.attrs;\n                    if (attrs) {\n                        this.initAttrs(attrs);\n                    }\n                    this.initTransform();\n                }\n                _proto.get = function get(name) {\n                    return this._attrs[name];\n                };\n                _proto.set = function set(name, value) {\n                    this._attrs[name] = value;\n                };\n                _proto.isGroup = function isGroup() {\n                    return this.get('isGroup');\n                };\n                _proto.isShape = function isShape() {\n                    return this.get('isShape');\n                };\n                _proto.initAttrs = function initAttrs(attrs) {\n                    this.attr(Util.mix(this.getDefaultAttrs(), attrs));\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {};\n                };\n                _proto._setAttr = function _setAttr(name, value) {\n                    var attrs = this._attrs.attrs;\n                    if (name === 'clip') {\n                        value = this._setAttrClip(value);\n                    }\n                    else {\n                        var alias = ALIAS_ATTRS_MAP[name];\n                        if (alias) {\n                            attrs[alias] = value;\n                        }\n                    }\n                    attrs[name] = value;\n                };\n                _proto._getAttr = function _getAttr(name) {\n                    return this._attrs.attrs[name];\n                } // _afterAttrsSet() {}\n                ;\n                _proto._setAttrClip = function _setAttrClip(clip) {\n                    if (clip && CLIP_SHAPES.indexOf(clip._attrs.type) > -1) {\n                        if (clip.get('canvas') === null) {\n                            clip = Object.assign({}, clip);\n                        }\n                        clip.set('parent', this.get('parent'));\n                        clip.set('context', this.get('context'));\n                        return clip;\n                    }\n                    return null;\n                };\n                _proto.attr = function attr(name, value) {\n                    var self = this;\n                    if (self.get('destroyed'))\n                        return null;\n                    var argumentsLen = arguments.length;\n                    if (argumentsLen === 0) {\n                        return self._attrs.attrs;\n                    }\n                    if (Util.isObject(name)) {\n                        this._attrs.bbox = null;\n                        for (var k in name) {\n                            self._setAttr(k, name[k]);\n                        }\n                        if (self._afterAttrsSet) {\n                            self._afterAttrsSet();\n                        }\n                        return self;\n                    }\n                    if (argumentsLen === 2) {\n                        this._attrs.bbox = null;\n                        self._setAttr(name, value);\n                        if (self._afterAttrsSet) {\n                            self._afterAttrsSet();\n                        }\n                        return self;\n                    }\n                    return self._getAttr(name);\n                };\n                _proto.getParent = function getParent() {\n                    return this.get('parent');\n                };\n                _proto.draw = function draw(context) {\n                    if (this.get('destroyed')) {\n                        return;\n                    }\n                    if (this.get('visible')) {\n                        this.setContext(context);\n                        this.drawInner(context);\n                        this.restoreContext(context);\n                    }\n                };\n                _proto.setContext = function setContext(context) {\n                    var clip = this._attrs.attrs.clip;\n                    context.save();\n                    if (clip) {\n                        clip.resetTransform(context);\n                        clip.createPath(context);\n                        context.clip();\n                    }\n                    this.resetContext(context);\n                    this.resetTransform(context);\n                };\n                _proto.restoreContext = function restoreContext(context) {\n                    context.restore();\n                };\n                _proto.resetContext = function resetContext(context) {\n                    var elAttrs = this._attrs.attrs;\n                    if (!this._attrs.isGroup) {\n                        for (var k in elAttrs) {\n                            if (SHAPE_ATTRS.indexOf(k) > -1) {\n                                var v = elAttrs[k];\n                                if (k === 'fillStyle' || k === 'strokeStyle') {\n                                    v = StyleUtil.parseStyle(v, this, context);\n                                }\n                                if (k === 'lineDash' && context.setLineDash && Util.isArray(v)) {\n                                    context.setLineDash(v);\n                                }\n                                else {\n                                    context[k] = v;\n                                }\n                            }\n                        }\n                    }\n                };\n                _proto.hasFill = function hasFill() {\n                    return this.get('canFill') && this._attrs.attrs.fillStyle;\n                };\n                _proto.hasStroke = function hasStroke() {\n                    return this.get('canStroke') && this._attrs.attrs.strokeStyle;\n                };\n                _proto.drawInner = function drawInner() { };\n                _proto.show = function show() {\n                    this.set('visible', true);\n                    return this;\n                };\n                _proto.hide = function hide() {\n                    this.set('visible', false);\n                    return this;\n                };\n                _proto.isVisible = function isVisible() {\n                    return this.get('visible');\n                };\n                _proto._removeFromParent = function _removeFromParent() {\n                    var parent = this.get('parent');\n                    if (parent) {\n                        var children = parent.get('children');\n                        Util.Array.remove(children, this);\n                    }\n                    return this;\n                };\n                _proto.remove = function remove(destroy) {\n                    if (destroy) {\n                        this.destroy();\n                    }\n                    else {\n                        this._removeFromParent();\n                    }\n                };\n                _proto.destroy = function destroy() {\n                    var destroyed = this.get('destroyed');\n                    if (destroyed) {\n                        return null;\n                    }\n                    this._removeFromParent();\n                    this._attrs = {};\n                    this.set('destroyed', true);\n                };\n                _proto.getBBox = function getBBox() {\n                    return {\n                        minX: 0,\n                        maxX: 0,\n                        minY: 0,\n                        maxY: 0,\n                        width: 0,\n                        height: 0\n                    };\n                };\n                _proto.initTransform = function initTransform() {\n                    var attrs = this._attrs.attrs || {};\n                    if (!attrs.matrix) {\n                        attrs.matrix = [1, 0, 0, 1, 0, 0];\n                    }\n                    this._attrs.attrs = attrs;\n                };\n                _proto.getMatrix = function getMatrix() {\n                    return this._attrs.attrs.matrix;\n                };\n                _proto.setMatrix = function setMatrix(m) {\n                    this._attrs.attrs.matrix = [m[0], m[1], m[2], m[3], m[4], m[5]];\n                };\n                _proto.transform = function transform(actions) {\n                    var matrix = this._attrs.attrs.matrix;\n                    this._attrs.attrs.matrix = MatrixUtil.transform(matrix, actions);\n                    return this;\n                };\n                _proto.setTransform = function setTransform(actions) {\n                    this._attrs.attrs.matrix = [1, 0, 0, 1, 0, 0];\n                    return this.transform(actions);\n                };\n                _proto.translate = function translate(x, y) {\n                    var matrix = this._attrs.attrs.matrix;\n                    MatrixUtil.translate(matrix, matrix, [x, y]);\n                };\n                _proto.rotate = function rotate(rad) {\n                    var matrix = this._attrs.attrs.matrix;\n                    MatrixUtil.rotate(matrix, matrix, rad);\n                };\n                _proto.scale = function scale(sx, sy) {\n                    var matrix = this._attrs.attrs.matrix;\n                    MatrixUtil.scale(matrix, matrix, [sx, sy]);\n                };\n                _proto.moveTo = function moveTo(x, y) {\n                    var cx = this._attrs.x || 0;\n                    var cy = this._attrs.y || 0;\n                    this.translate(x - cx, y - cy);\n                    this.set('x', x);\n                    this.set('y', y);\n                };\n                _proto.apply = function apply(v) {\n                    var m = this._attrs.attrs.matrix;\n                    Vector2.transformMat2d(v, v, m);\n                    return this;\n                };\n                _proto.resetTransform = function resetTransform(context) {\n                    var mo = this._attrs.attrs.matrix;\n                    if (!isUnchanged(mo)) {\n                        context.transform(mo[0], mo[1], mo[2], mo[3], mo[4], mo[5]);\n                    }\n                };\n                _proto.isDestroyed = function isDestroyed() {\n                    return this.get('destroyed');\n                };\n                return Element;\n            }();\n            module.exports = Element;\n            /***/ \n        }),\n        /* 28 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var _require = __webpack_require__(5), Shape = _require.Shape;\n            module.exports = {\n                getClip: function getClip(coord) {\n                    var start = coord.start;\n                    var end = coord.end;\n                    var width = end.x - start.x;\n                    var height = Math.abs(end.y - start.y);\n                    var margin = 10;\n                    var clip;\n                    if (coord.isPolar) {\n                        var circleRadius = coord.circleRadius, center = coord.center, startAngle = coord.startAngle, endAngle = coord.endAngle;\n                        clip = new Shape.Sector({\n                            attrs: {\n                                x: center.x,\n                                y: center.y,\n                                r: circleRadius,\n                                r0: 0,\n                                startAngle: startAngle,\n                                endAngle: endAngle\n                            }\n                        });\n                    }\n                    else {\n                        clip = new Shape.Rect({\n                            attrs: {\n                                x: start.x,\n                                y: end.y - margin,\n                                width: width,\n                                height: height + 2 * margin\n                            }\n                        });\n                    }\n                    clip.isClip = true;\n                    return clip;\n                },\n                isPointInPlot: function isPointInPlot(point, plot) {\n                    var x = point.x, y = point.y;\n                    var tl = plot.tl, tr = plot.tr, br = plot.br;\n                    return x >= tl.x && x <= tr.x && y >= tl.y && y <= br.y;\n                }\n            };\n            /***/ \n        }),\n        /* 29 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isNil = __webpack_require__(30);\n            function toString(value) {\n                if (isNil(value))\n                    return '';\n                return value.toString();\n            }\n            module.exports = toString;\n            /***/ \n        }),\n        /* 30 */\n        /***/ (function (module, exports) {\n            // isFinite,\n            var isNil = function isNil(value) {\n                /**\n                 * isNil(null) => true\n                 * isNil() => true\n                 */\n                return value === null || value === undefined;\n            };\n            module.exports = isNil;\n            /***/ \n        }),\n        /* 31 */\n        /***/ (function (module, exports) {\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n                return typeof obj;\n            } : function (obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var isObject = function isObject(value) {\n                /**\n                 * isObject({}) => true\n                 * isObject([1, 2, 3]) => true\n                 * isObject(Function) => true\n                 * isObject(null) => false\n                 */\n                var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n                return value !== null && type === 'object' || type === 'function';\n            };\n            module.exports = isObject;\n            /***/ \n        }),\n        /* 32 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isObjectLike = __webpack_require__(55);\n            var isType = __webpack_require__(7);\n            var isPlainObject = function isPlainObject(value) {\n                /**\n                 * isObjectLike(new Foo) => false\n                 * isObjectLike([1, 2, 3]) => false\n                 * isObjectLike({ x: 0, y: 0 }) => true\n                 * isObjectLike(Object.create(null)) => true\n                 */\n                if (!isObjectLike(value) || !isType(value, 'Object')) {\n                    return false;\n                }\n                if (Object.getPrototypeOf(value) === null) {\n                    return true;\n                }\n                var proto = value;\n                while (Object.getPrototypeOf(proto) !== null) {\n                    proto = Object.getPrototypeOf(proto);\n                }\n                return Object.getPrototypeOf(value) === proto;\n            };\n            module.exports = isPlainObject;\n            /***/ \n        }),\n        /* 33 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isObject = __webpack_require__(31);\n            var isArray = __webpack_require__(20);\n            var each = function each(elements, func) {\n                if (!elements) {\n                    return;\n                }\n                var rst = void 0;\n                if (isArray(elements)) {\n                    for (var i = 0, len = elements.length; i < len; i++) {\n                        rst = func(elements[i], i);\n                        if (rst === false) {\n                            break;\n                        }\n                    }\n                }\n                else if (isObject(elements)) {\n                    for (var k in elements) {\n                        if (elements.hasOwnProperty(k)) {\n                            rst = func(elements[k], k);\n                            if (rst === false) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            };\n            module.exports = each;\n            /***/ \n        }),\n        /* 34 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview Base class of chart and geometry\n             * @author dxq613@gmail.com\n             */\n            var Util = __webpack_require__(0);\n            var Base = \n            /*#__PURE__*/\n            function () {\n                var _proto = Base.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {};\n                };\n                function Base(cfg) {\n                    var attrs = {};\n                    var defaultCfg = this.getDefaultCfg();\n                    this._attrs = attrs;\n                    Util.mix(attrs, defaultCfg, cfg);\n                }\n                _proto.get = function get(name) {\n                    return this._attrs[name];\n                };\n                _proto.set = function set(name, value) {\n                    this._attrs[name] = value;\n                };\n                _proto.destroy = function destroy() {\n                    this._attrs = {};\n                    this.destroyed = true;\n                };\n                return Base;\n            }();\n            module.exports = Base;\n            /***/ \n        }),\n        /* 35 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(2);\n            var SHAPE_MAP = {};\n            var INDEX = '_INDEX';\n            function getComparer(compare) {\n                return function (left, right) {\n                    var result = compare(left, right);\n                    return result === 0 ? left[INDEX] - right[INDEX] : result;\n                };\n            }\n            module.exports = {\n                getGroupClass: function getGroupClass() { },\n                getChildren: function getChildren() {\n                    return this.get('children');\n                },\n                addShape: function addShape(type, cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    var canvas = this.get('canvas');\n                    var shapeType = SHAPE_MAP[type];\n                    if (!shapeType) {\n                        shapeType = Util.upperFirst(type);\n                        SHAPE_MAP[type] = shapeType;\n                    }\n                    cfg.canvas = canvas;\n                    if (shapeType === 'Text' && canvas && canvas.get('fontFamily')) {\n                        cfg.attrs.fontFamily = cfg.attrs.fontFamily || canvas.get('fontFamily');\n                    }\n                    var shape = new Shape[shapeType](cfg);\n                    this.add(shape);\n                    return shape;\n                },\n                addGroup: function addGroup(cfg) {\n                    var canvas = this.get('canvas');\n                    var groupClass = this.getGroupClass();\n                    cfg = Util.mix({}, cfg);\n                    cfg.canvas = canvas;\n                    cfg.parent = this;\n                    var rst = new groupClass(cfg);\n                    this.add(rst);\n                    return rst;\n                },\n                contain: function contain(item) {\n                    var children = this.get('children');\n                    return children.indexOf(item) > -1;\n                },\n                sort: function sort() {\n                    var children = this.get('children');\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        child[INDEX] = i;\n                    }\n                    children.sort(getComparer(function (obj1, obj2) {\n                        return obj1.get('zIndex') - obj2.get('zIndex');\n                    }));\n                    return this;\n                },\n                clear: function clear() {\n                    var children = this.get('children');\n                    while (children.length !== 0) {\n                        children[children.length - 1].remove(true);\n                    }\n                    return this;\n                },\n                add: function add(items) {\n                    var self = this;\n                    var children = self.get('children');\n                    if (!Util.isArray(items)) {\n                        items = [items];\n                    }\n                    for (var i = 0, len = items.length; i < len; i++) {\n                        var item = items[i];\n                        var parent = item.get('parent');\n                        if (parent) {\n                            var descendants = parent.get('children');\n                            Util.Array.remove(descendants, item);\n                        }\n                        self._setEvn(item);\n                        children.push(item);\n                    }\n                    return self;\n                },\n                _setEvn: function _setEvn(item) {\n                    var self = this;\n                    item._attrs.parent = self;\n                    item._attrs.context = self._attrs.context;\n                    item._attrs.canvas = self._attrs.canvas;\n                    var clip = item._attrs.attrs.clip;\n                    if (clip) {\n                        clip.set('parent', self);\n                        clip.set('context', self.get('context'));\n                    }\n                    if (item._attrs.isGroup) {\n                        var children = item._attrs.children;\n                        for (var i = 0, len = children.length; i < len; i++) {\n                            item._setEvn(children[i]);\n                        }\n                    }\n                }\n            };\n            /***/ \n        }),\n        /* 36 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Element = __webpack_require__(27);\n            var Container = __webpack_require__(35);\n            var Vector2 = __webpack_require__(3);\n            var Group = \n            /*#__PURE__*/\n            function (_Element) {\n                _inheritsLoose(Group, _Element);\n                function Group() {\n                    return _Element.apply(this, arguments) || this;\n                }\n                var _proto = Group.prototype;\n                _proto._initProperties = function _initProperties() {\n                    this._attrs = {\n                        zIndex: 0,\n                        visible: true,\n                        destroyed: false,\n                        isGroup: true,\n                        children: []\n                    };\n                };\n                _proto.drawInner = function drawInner(context) {\n                    var children = this.get('children');\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        child.draw(context);\n                    }\n                    return this;\n                };\n                _proto.getBBox = function getBBox() {\n                    var self = this;\n                    var minX = Infinity;\n                    var maxX = -Infinity;\n                    var minY = Infinity;\n                    var maxY = -Infinity;\n                    var children = self.get('children');\n                    for (var i = 0, length = children.length; i < length; i++) {\n                        var child = children[i];\n                        if (child.get('visible')) {\n                            var box = child.getBBox();\n                            if (!box) {\n                                continue;\n                            }\n                            var leftTop = [box.minX, box.minY];\n                            var leftBottom = [box.minX, box.maxY];\n                            var rightTop = [box.maxX, box.minY];\n                            var rightBottom = [box.maxX, box.maxY];\n                            var matrix = child.attr('matrix');\n                            Vector2.transformMat2d(leftTop, leftTop, matrix);\n                            Vector2.transformMat2d(leftBottom, leftBottom, matrix);\n                            Vector2.transformMat2d(rightTop, rightTop, matrix);\n                            Vector2.transformMat2d(rightBottom, rightBottom, matrix);\n                            minX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], minX);\n                            maxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], maxX);\n                            minY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], minY);\n                            maxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], maxY);\n                        }\n                    }\n                    return {\n                        minX: minX,\n                        minY: minY,\n                        maxX: maxX,\n                        maxY: maxY,\n                        x: minX,\n                        y: minY,\n                        width: maxX - minX,\n                        height: maxY - minY\n                    };\n                };\n                _proto.destroy = function destroy() {\n                    if (this.get('destroyed')) {\n                        return;\n                    }\n                    this.clear();\n                    _Element.prototype.destroy.call(this);\n                };\n                return Group;\n            }(Element);\n            Util.mix(Group.prototype, Container, {\n                getGroupClass: function getGroupClass() {\n                    return Group;\n                }\n            });\n            module.exports = Group;\n            /***/ \n        }),\n        /* 37 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(8);\n            var ShapeUtil = __webpack_require__(19);\n            var Global = __webpack_require__(1); // register line geom\n            var Line = Shape.registerFactory('line', {\n                defaultShapeType: 'line'\n            });\n            function getStyle(cfg) {\n                var style = {\n                    strokeStyle: cfg.color\n                };\n                if (cfg.size >= 0) {\n                    style.lineWidth = cfg.size;\n                }\n                Util.mix(style, cfg.style);\n                return Util.mix({}, Global.shape.line, style);\n            }\n            function drawLines(cfg, container, style, smooth) {\n                var points = cfg.points;\n                if (points.length && Util.isArray(points[0].y)) {\n                    var topPoints = [];\n                    var bottomPoints = [];\n                    for (var i = 0, len = points.length; i < len; i++) {\n                        var point = points[i];\n                        var tmp = ShapeUtil.splitPoints(point);\n                        bottomPoints.push(tmp[0]);\n                        topPoints.push(tmp[1]);\n                    }\n                    if (cfg.isInCircle) {\n                        topPoints.push(topPoints[0]);\n                        bottomPoints.push(bottomPoints[0]);\n                    }\n                    if (cfg.isStack) {\n                        return container.addShape('Polyline', {\n                            className: 'line',\n                            attrs: Util.mix({\n                                points: topPoints,\n                                smooth: smooth\n                            }, style)\n                        });\n                    }\n                    var topShape = container.addShape('Polyline', {\n                        className: 'line',\n                        attrs: Util.mix({\n                            points: topPoints,\n                            smooth: smooth\n                        }, style)\n                    });\n                    var bottomShape = container.addShape('Polyline', {\n                        className: 'line',\n                        attrs: Util.mix({\n                            points: bottomPoints,\n                            smooth: smooth\n                        }, style)\n                    });\n                    return [topShape, bottomShape];\n                }\n                if (cfg.isInCircle) {\n                    points.push(points[0]);\n                }\n                return container.addShape('Polyline', {\n                    className: 'line',\n                    attrs: Util.mix({\n                        points: points,\n                        smooth: smooth\n                    }, style)\n                });\n            }\n            var SHAPES = ['line', 'smooth', 'dash'];\n            Util.each(SHAPES, function (shapeType) {\n                Shape.registerShape('line', shapeType, {\n                    draw: function draw(cfg, container) {\n                        var smooth = shapeType === 'smooth';\n                        var style = getStyle(cfg);\n                        if (shapeType === 'dash') {\n                            style.lineDash = Global.lineDash;\n                        }\n                        return drawLines(cfg, container, style, smooth);\n                    }\n                });\n            });\n            module.exports = Line;\n            /***/ \n        }),\n        /* 38 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var Base = __webpack_require__(12);\n            var catAuto = __webpack_require__(39);\n            var each = __webpack_require__(4);\n            var isNumber = __webpack_require__(17);\n            var isString = __webpack_require__(18);\n            var Category = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Category, _Base);\n                function Category() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Category.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Base.prototype._initDefaultCfg.call(this);\n                    this.type = 'cat';\n                    /**\n                     * 是否分类度量\n                     * @type {Boolean}\n                     */\n                    this.isCategory = true;\n                    this.isRounding = true; // 是否进行取整操作\n                };\n                _proto.init = function init() {\n                    var self = this;\n                    var values = self.values;\n                    var tickCount = self.tickCount;\n                    each(values, function (v, i) {\n                        values[i] = v.toString();\n                    });\n                    if (!self.ticks) {\n                        var ticks = values;\n                        if (tickCount) {\n                            var temp = catAuto({\n                                maxCount: tickCount,\n                                data: values,\n                                isRounding: self.isRounding\n                            });\n                            ticks = temp.ticks;\n                        }\n                        this.ticks = ticks;\n                    }\n                };\n                _proto.getText = function getText(value) {\n                    if (this.values.indexOf(value) === -1 && isNumber(value)) {\n                        value = this.values[Math.round(value)];\n                    }\n                    return _Base.prototype.getText.call(this, value);\n                };\n                _proto.translate = function translate(value) {\n                    var index = this.values.indexOf(value);\n                    if (index === -1 && isNumber(value)) {\n                        index = value;\n                    }\n                    else if (index === -1) {\n                        index = NaN;\n                    }\n                    return index;\n                };\n                _proto.scale = function scale(value) {\n                    var rangeMin = this.rangeMin();\n                    var rangeMax = this.rangeMax();\n                    var percent;\n                    if (isString(value) || this.values.indexOf(value) !== -1) {\n                        value = this.translate(value);\n                    }\n                    if (this.values.length > 1) {\n                        percent = value / (this.values.length - 1);\n                    }\n                    else {\n                        percent = value;\n                    }\n                    return rangeMin + percent * (rangeMax - rangeMin);\n                };\n                _proto.invert = function invert(value) {\n                    if (isString(value)) {\n                        // 如果已经是字符串\n                        return value;\n                    }\n                    var min = this.rangeMin();\n                    var max = this.rangeMax(); // 归一到 范围内\n                    if (value < min) {\n                        value = min;\n                    }\n                    if (value > max) {\n                        value = max;\n                    }\n                    var percent = (value - min) / (max - min);\n                    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;\n                    index = index || 0;\n                    return this.values[index];\n                };\n                return Category;\n            }(Base);\n            Base.Cat = Category;\n            module.exports = Category;\n            /***/ \n        }),\n        /* 39 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview 计算分类的的坐标点\n             * @author dxq613@gmail.com\n             */\n            var each = __webpack_require__(4);\n            var MAX_COUNT = 8;\n            var SUB_COUNT = 4; // 控制个数不能过小\n            function getSimpleArray(data) {\n                var arr = [];\n                each(data, function (sub) {\n                    arr = arr.concat(sub);\n                });\n                return arr;\n            }\n            function getGreatestFactor(count, number) {\n                var i;\n                for (i = number; i > 0; i--) {\n                    if (count % i === 0) {\n                        break;\n                    }\n                } // 如果是素数，没有可以整除的数字\n                if (i === 1) {\n                    for (i = number; i > 0; i--) {\n                        if ((count - 1) % i === 0) {\n                            break;\n                        }\n                    }\n                }\n                return i;\n            }\n            module.exports = function (info) {\n                var rst = {};\n                var ticks = [];\n                var isRounding = info.isRounding;\n                var categories = getSimpleArray(info.data);\n                var length = categories.length;\n                var maxCount = info.maxCount || MAX_COUNT;\n                var tickCount;\n                if (isRounding) {\n                    // 取整操作\n                    tickCount = getGreatestFactor(length - 1, maxCount - 1) + 1; // 如果计算出来只有两个坐标点，则直接使用传入的 maxCount\n                    if (tickCount === 2) {\n                        tickCount = maxCount;\n                    }\n                    else if (tickCount < maxCount - SUB_COUNT) {\n                        tickCount = maxCount - SUB_COUNT;\n                    }\n                }\n                else {\n                    tickCount = maxCount;\n                }\n                if (!isRounding && length <= tickCount + tickCount / 2) {\n                    ticks = [].concat(categories);\n                }\n                else {\n                    var step = parseInt(length / (tickCount - 1), 10);\n                    var groups = categories.map(function (e, i) {\n                        return i % step === 0 ? categories.slice(i, i + step) : null;\n                    }).filter(function (e) {\n                        return e;\n                    });\n                    for (var i = 1, groupLen = groups.length; i < groupLen && (isRounding ? i * step < length - step : i < tickCount - 1); i++) {\n                        ticks.push(groups[i][0]);\n                    }\n                    if (categories.length) {\n                        ticks.unshift(categories[0]);\n                        var last = categories[length - 1];\n                        if (ticks.indexOf(last) === -1) {\n                            ticks.push(last);\n                        }\n                    }\n                }\n                rst.categories = categories;\n                rst.ticks = ticks;\n                return rst;\n            };\n            /***/ \n        }),\n        /* 40 */\n        /***/ (function (module, exports) {\n            module.exports = {\n                requestAnimationFrame: typeof window === 'object' && window.requestAnimationFrame ? window.requestAnimationFrame : function (fn) {\n                    return setTimeout(fn, 16);\n                }\n            };\n            /***/ \n        }),\n        /* 41 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview convert the line to curve\n             * @author dxq613@gmail.com\n             */\n            var Vector2 = __webpack_require__(3);\n            function getPoint(v) {\n                return [v.x, v.y];\n            }\n            function smoothBezier(points, smooth, isLoop, constraint) {\n                var cps = [];\n                var prevPoint;\n                var nextPoint;\n                var hasConstraint = !!constraint;\n                var min;\n                var max;\n                var point;\n                var len;\n                var l;\n                var i;\n                if (hasConstraint) {\n                    min = [Infinity, Infinity];\n                    max = [-Infinity, -Infinity];\n                    for (i = 0, l = points.length; i < l; i++) {\n                        point = getPoint(points[i]);\n                        Vector2.min(min, min, point);\n                        Vector2.max(max, max, point);\n                    }\n                    Vector2.min(min, min, constraint[0]);\n                    Vector2.max(max, max, constraint[1]);\n                }\n                for (i = 0, len = points.length; i < len; i++) {\n                    point = getPoint(points[i]);\n                    if (isLoop) {\n                        prevPoint = getPoint(points[i ? i - 1 : len - 1]);\n                        nextPoint = getPoint(points[(i + 1) % len]);\n                    }\n                    else {\n                        if (i === 0 || i === len - 1) {\n                            cps.push([point[0], point[1]]);\n                            continue;\n                        }\n                        else {\n                            prevPoint = getPoint(points[i - 1]);\n                            nextPoint = getPoint(points[i + 1]);\n                        }\n                    }\n                    var v = Vector2.sub([], nextPoint, prevPoint);\n                    Vector2.scale(v, v, smooth);\n                    var d0 = Vector2.distance(point, prevPoint);\n                    var d1 = Vector2.distance(point, nextPoint);\n                    var sum = d0 + d1;\n                    if (sum !== 0) {\n                        d0 /= sum;\n                        d1 /= sum;\n                    }\n                    var v1 = Vector2.scale([], v, -d0);\n                    var v2 = Vector2.scale([], v, d1);\n                    var cp0 = Vector2.add([], point, v1);\n                    var cp1 = Vector2.add([], point, v2);\n                    if (hasConstraint) {\n                        Vector2.max(cp0, cp0, min);\n                        Vector2.min(cp0, cp0, max);\n                        Vector2.max(cp1, cp1, min);\n                        Vector2.min(cp1, cp1, max);\n                    }\n                    cps.push([cp0[0], cp0[1]]);\n                    cps.push([cp1[0], cp1[1]]);\n                }\n                if (isLoop) {\n                    cps.push(cps.shift());\n                }\n                return cps;\n            }\n            function catmullRom2bezier(pointList, z, constraint) {\n                var isLoop = !!z;\n                var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n                var len = pointList.length;\n                var d1 = [];\n                var cp1;\n                var cp2;\n                var p;\n                for (var i = 0; i < len - 1; i++) {\n                    cp1 = controlPointList[i * 2];\n                    cp2 = controlPointList[i * 2 + 1];\n                    p = pointList[i + 1];\n                    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);\n                }\n                if (isLoop) {\n                    cp1 = controlPointList[len];\n                    cp2 = controlPointList[len + 1];\n                    p = pointList[0];\n                    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);\n                }\n                return d1;\n            }\n            module.exports = {\n                smooth: catmullRom2bezier\n            };\n            /***/ \n        }),\n        /* 42 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Geom = __webpack_require__(6);\n            var ShapeUtil = __webpack_require__(19);\n            var Util = __webpack_require__(0);\n            __webpack_require__(37);\n            var Path = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Path, _Geom);\n                function Path() {\n                    return _Geom.apply(this, arguments) || this;\n                }\n                var _proto = Path.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'path';\n                    cfg.shapeType = 'line';\n                    return cfg;\n                };\n                _proto.getDrawCfg = function getDrawCfg(obj) {\n                    var cfg = _Geom.prototype.getDrawCfg.call(this, obj);\n                    cfg.isStack = this.hasAdjust('stack');\n                    return cfg;\n                };\n                _proto.draw = function draw(data, shapeFactory) {\n                    var self = this;\n                    var container = self.get('container');\n                    var yScale = self.getYScale();\n                    var connectNulls = self.get('connectNulls');\n                    var splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);\n                    var cfg = this.getDrawCfg(data[0]);\n                    cfg.origin = data;\n                    Util.each(splitArray, function (subData, splitedIndex) {\n                        cfg.splitedIndex = splitedIndex;\n                        cfg.points = subData;\n                        self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);\n                    });\n                };\n                return Path;\n            }(Geom);\n            Geom.Path = Path;\n            module.exports = Path;\n            /***/ \n        }),\n        /* 43 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview Utility for calculate the with ratui in x axis\n             * @author sima.zhang1990@gmail.com\n             * @author dxq613@gmail.com\n             */\n            var Global = __webpack_require__(1);\n            var Util = __webpack_require__(0);\n            var SizeMixin = {\n                getDefalutSize: function getDefalutSize() {\n                    var defaultSize = this.get('defaultSize');\n                    if (!defaultSize) {\n                        var coord = this.get('coord');\n                        var xScale = this.getXScale();\n                        var dataArray = this.get('dataArray');\n                        var values = Util.uniq(xScale.values);\n                        var count = values.length;\n                        var range = xScale.range;\n                        var normalizeSize = 1 / count;\n                        var widthRatio = 1;\n                        if (coord && coord.isPolar) {\n                            if (coord.transposed && count > 1) {\n                                widthRatio = Global.widthRatio.multiplePie;\n                            }\n                            else {\n                                widthRatio = Global.widthRatio.rose;\n                            }\n                        }\n                        else {\n                            if (xScale.isLinear) {\n                                normalizeSize *= range[1] - range[0];\n                            }\n                            widthRatio = Global.widthRatio.column;\n                        }\n                        normalizeSize *= widthRatio;\n                        if (this.hasAdjust('dodge')) {\n                            normalizeSize = normalizeSize / dataArray.length;\n                        }\n                        defaultSize = normalizeSize;\n                        this.set('defaultSize', defaultSize);\n                    }\n                    return defaultSize;\n                },\n                getDimWidth: function getDimWidth(dimName) {\n                    var coord = this.get('coord');\n                    var start = coord.convertPoint({\n                        x: 0,\n                        y: 0\n                    });\n                    var end = coord.convertPoint({\n                        x: dimName === 'x' ? 1 : 0,\n                        y: dimName === 'x' ? 0 : 1\n                    });\n                    var width = 0;\n                    if (start && end) {\n                        width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n                    }\n                    return width;\n                },\n                _getWidth: function _getWidth() {\n                    var width = this.get('_width');\n                    if (!width) {\n                        var coord = this.get('coord');\n                        if (coord && coord.isPolar && !coord.transposed) {\n                            width = (coord.endAngle - coord.startAngle) * coord.circleRadius;\n                        }\n                        else {\n                            width = this.getDimWidth('x');\n                        }\n                        this.set('_width', width);\n                    }\n                    return width;\n                },\n                _toNormalizedSize: function _toNormalizedSize(size) {\n                    var width = this._getWidth();\n                    return size / width;\n                },\n                _toCoordSize: function _toCoordSize(normalizeSize) {\n                    var width = this._getWidth();\n                    return width * normalizeSize;\n                },\n                getNormalizedSize: function getNormalizedSize(obj) {\n                    var size = this.getAttrValue('size', obj);\n                    if (Util.isNil(size)) {\n                        size = this.getDefalutSize();\n                    }\n                    else {\n                        size = this._toNormalizedSize(size);\n                    }\n                    return size;\n                },\n                getSize: function getSize(obj) {\n                    var size = this.getAttrValue('size', obj);\n                    if (Util.isNil(size)) {\n                        var normalizeSize = this.getDefalutSize();\n                        size = this._toCoordSize(normalizeSize);\n                    }\n                    return size;\n                }\n            };\n            module.exports = SizeMixin;\n            /***/ \n        }),\n        /* 44 */ ,\n        /* 45 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Core = {};\n            var Global = __webpack_require__(1);\n            Core.Global = Global;\n            Core.version = Global.version;\n            Core.Chart = __webpack_require__(15);\n            Core.Shape = __webpack_require__(8);\n            Core.G = __webpack_require__(5);\n            Core.Util = __webpack_require__(0); // Core.track = function(enable) {\n            //   Global.trackable = enable;\n            // };\n            // require('./track');\n            // 2018-12-27 关闭打点\n            Core.track = function () {\n                return null;\n            };\n            module.exports = Core;\n            /***/ \n        }),\n        /* 46 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview default theme\n             * @author dxq613@gail.com\n             */\n            var Util = __webpack_require__(0);\n            var color1 = '#E8E8E8'; // color of axis-line and axis-grid\n            var color2 = '#808080'; // color of axis label\n            var defaultAxis = {\n                label: {\n                    fill: color2,\n                    fontSize: 10\n                },\n                line: {\n                    stroke: color1,\n                    lineWidth: 1\n                },\n                grid: {\n                    type: 'line',\n                    stroke: color1,\n                    lineWidth: 1,\n                    lineDash: [2]\n                },\n                tickLine: null,\n                labelOffset: 7.5\n            };\n            var Theme = {\n                fontFamily: '\"Helvetica Neue\", \"San Francisco\", Helvetica, Tahoma, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", sans-serif',\n                defaultColor: '#1890FF',\n                pixelRatio: 1,\n                padding: 'auto',\n                appendPadding: 15,\n                colors: ['#1890FF', '#2FC25B', '#FACC14', '#223273', '#8543E0', '#13C2C2', '#3436C7', '#F04864'],\n                shapes: {\n                    line: ['line', 'dash'],\n                    point: ['circle', 'hollowCircle']\n                },\n                sizes: [4, 10],\n                axis: {\n                    common: defaultAxis,\n                    // common axis configuration\n                    bottom: Util.mix({}, defaultAxis, {\n                        grid: null\n                    }),\n                    left: Util.mix({}, defaultAxis, {\n                        line: null\n                    }),\n                    right: Util.mix({}, defaultAxis, {\n                        line: null\n                    }),\n                    circle: Util.mix({}, defaultAxis, {\n                        line: null\n                    }),\n                    radius: Util.mix({}, defaultAxis, {\n                        labelOffset: 4\n                    })\n                },\n                shape: {\n                    line: {\n                        lineWidth: 2,\n                        lineJoin: 'round',\n                        lineCap: 'round'\n                    },\n                    point: {\n                        lineWidth: 0,\n                        size: 3\n                    },\n                    area: {\n                        fillOpacity: 0.1\n                    }\n                },\n                _defaultAxis: defaultAxis\n            };\n            module.exports = Theme;\n            /***/ \n        }),\n        /* 47 */\n        /***/ (function (module, exports) {\n            var DomUtil;\n            /**\n             * Detects support for options object argument in addEventListener.\n             * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n             * @private\n             */\n            var supportsEventListenerOptions = function () {\n                var supports = false;\n                try {\n                    var options = Object.defineProperty({}, 'passive', {\n                        get: function get() {\n                            supports = true;\n                        }\n                    });\n                    window.addEventListener('e', null, options);\n                }\n                catch (e) { // continue regardless of error\n                }\n                return supports;\n            }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n            // https://github.com/chartjs/Chart.js/issues/4287\n            var eventListenerOptions = supportsEventListenerOptions ? {\n                passive: true\n            } : false;\n            function createEvent(type, chart, x, y, nativeEvent) {\n                return {\n                    type: type,\n                    chart: chart,\n                    native: nativeEvent || null,\n                    x: x !== undefined ? x : null,\n                    y: y !== undefined ? y : null\n                };\n            }\n            function fromNativeEvent(event, chart) {\n                var type = event.type;\n                var point = {};\n                var touches = event.targetTouches;\n                if (touches && touches.length > 0) {\n                    point.x = touches[0].clientX;\n                    point.y = touches[0].clientY;\n                }\n                else {\n                    point.x = event.clientX;\n                    point.y = event.clientY;\n                }\n                var canvas = chart.get('canvas');\n                var pos = DomUtil.getRelativePosition(point, canvas);\n                return createEvent(type, chart, pos.x, pos.y, event);\n            }\n            DomUtil = {\n                /* global wx, my, module */\n                isWx: typeof wx === 'object' && typeof wx.getSystemInfoSync === 'function',\n                // weixin miniprogram\n                isMy: typeof my === 'object' && typeof my.getSystemInfoSync === 'function',\n                // ant miniprogram\n                isNode: typeof module !== 'undefined' && typeof module.exports !== 'undefined',\n                // in node\n                isBrowser: typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.sessionStorage !== 'undefined',\n                // in browser\n                getPixelRatio: function getPixelRatio() {\n                    return window && window.devicePixelRatio || 1;\n                },\n                getStyle: function getStyle(el, property) {\n                    return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n                },\n                getWidth: function getWidth(el) {\n                    var width = this.getStyle(el, 'width');\n                    if (width === 'auto') {\n                        width = el.offsetWidth;\n                    }\n                    return parseFloat(width);\n                },\n                getHeight: function getHeight(el) {\n                    var height = this.getStyle(el, 'height');\n                    if (height === 'auto') {\n                        height = el.offsetHeight;\n                    }\n                    return parseFloat(height);\n                },\n                getDomById: function getDomById(id) {\n                    if (!id) {\n                        return null;\n                    }\n                    return document.getElementById(id);\n                },\n                getRelativePosition: function getRelativePosition(point, canvas) {\n                    var canvasDom = canvas.get('el');\n                    var _canvasDom$getBoundin = canvasDom.getBoundingClientRect(), top = _canvasDom$getBoundin.top, right = _canvasDom$getBoundin.right, bottom = _canvasDom$getBoundin.bottom, left = _canvasDom$getBoundin.left;\n                    var paddingLeft = parseFloat(this.getStyle(canvasDom, 'padding-left'));\n                    var paddingTop = parseFloat(this.getStyle(canvasDom, 'padding-top'));\n                    var paddingRight = parseFloat(this.getStyle(canvasDom, 'padding-right'));\n                    var paddingBottom = parseFloat(this.getStyle(canvasDom, 'padding-bottom'));\n                    var width = right - left - paddingLeft - paddingRight;\n                    var height = bottom - top - paddingTop - paddingBottom;\n                    var pixelRatio = canvas.get('pixelRatio');\n                    var mouseX = (point.x - left - paddingLeft) / width * canvasDom.width / pixelRatio;\n                    var mouseY = (point.y - top - paddingTop) / height * canvasDom.height / pixelRatio;\n                    return {\n                        x: mouseX,\n                        y: mouseY\n                    };\n                },\n                addEventListener: function addEventListener(source, type, listener) {\n                    DomUtil.isBrowser && source.addEventListener(type, listener, eventListenerOptions);\n                },\n                removeEventListener: function removeEventListener(source, type, listener) {\n                    DomUtil.isBrowser && source.removeEventListener(type, listener, eventListenerOptions);\n                },\n                createEvent: function createEvent(event, chart) {\n                    return fromNativeEvent(event, chart);\n                },\n                measureText: function measureText(text, font, ctx) {\n                    if (!ctx) {\n                        ctx = document.createElement('canvas').getContext('2d');\n                    }\n                    ctx.font = font || '12px sans-serif';\n                    return ctx.measureText(text);\n                }\n            };\n            module.exports = DomUtil;\n            /***/ \n        }),\n        /* 48 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var toString = __webpack_require__(29);\n            var upperFirst = function upperFirst(value) {\n                var str = toString(value);\n                return str.charAt(0).toUpperCase() + str.substring(1);\n            };\n            module.exports = upperFirst;\n            /***/ \n        }),\n        /* 49 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var toString = __webpack_require__(29);\n            var lowerFirst = function lowerFirst(value) {\n                var str = toString(value);\n                return str.charAt(0).toLowerCase() + str.substring(1);\n            };\n            module.exports = lowerFirst;\n            /***/ \n        }),\n        /* 50 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(7);\n            var isString = function isString(str) {\n                return isType(str, 'String');\n            };\n            module.exports = isString;\n            /***/ \n        }),\n        /* 51 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * 判断是否数字\n             * @return {Boolean} 是否数字\n             */\n            var isType = __webpack_require__(7);\n            var isNumber = function isNumber(value) {\n                return isType(value, 'Number');\n            };\n            module.exports = isNumber;\n            /***/ \n        }),\n        /* 52 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * 是否是布尔类型\n             *\n             * @param {Object} value 测试的值\n             * @return {Boolean}\n             */\n            var isType = __webpack_require__(7);\n            var isBoolean = function isBoolean(value) {\n                return isType(value, 'Boolean');\n            };\n            module.exports = isBoolean;\n            /***/ \n        }),\n        /* 53 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * 是否为函数\n             * @param  {*} fn 对象\n             * @return {Boolean}  是否函数\n             */\n            var isType = __webpack_require__(7);\n            var isFunction = function isFunction(value) {\n                return isType(value, 'Function');\n            };\n            module.exports = isFunction;\n            /***/ \n        }),\n        /* 54 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(7);\n            var isDate = function isDate(value) {\n                return isType(value, 'Date');\n            };\n            module.exports = isDate;\n            /***/ \n        }),\n        /* 55 */\n        /***/ (function (module, exports) {\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n                return typeof obj;\n            } : function (obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var isObjectLike = function isObjectLike(value) {\n                /**\n                 * isObjectLike({}) => true\n                 * isObjectLike([1, 2, 3]) => true\n                 * isObjectLike(Function) => false\n                 * isObjectLike(null) => false\n                 */\n                return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;\n            };\n            module.exports = isObjectLike;\n            /***/ \n        }),\n        /* 56 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isPlainObject = __webpack_require__(32);\n            var isArray = __webpack_require__(20);\n            var MAX_MIX_LEVEL = 5;\n            function _deepMix(dist, src, level, maxLevel) {\n                level = level || 0;\n                maxLevel = maxLevel || MAX_MIX_LEVEL;\n                for (var key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        var value = src[key];\n                        if (value !== null && isPlainObject(value)) {\n                            if (!isPlainObject(dist[key])) {\n                                dist[key] = {};\n                            }\n                            if (level < maxLevel) {\n                                _deepMix(dist[key], value, level + 1, maxLevel);\n                            }\n                            else {\n                                dist[key] = src[key];\n                            }\n                        }\n                        else if (isArray(value)) {\n                            dist[key] = [];\n                            dist[key] = dist[key].concat(value);\n                        }\n                        else if (value !== undefined) {\n                            dist[key] = value;\n                        }\n                    }\n                }\n            }\n            var deepMix = function deepMix() {\n                var args = new Array(arguments.length);\n                var length = args.length;\n                for (var i = 0; i < length; i++) {\n                    args[i] = arguments[i];\n                }\n                var rst = args[0];\n                for (var _i = 1; _i < length; _i++) {\n                    _deepMix(rst, args[_i]);\n                }\n                return rst;\n            };\n            module.exports = deepMix;\n            /***/ \n        }),\n        /* 57 */\n        /***/ (function (module, exports) {\n            function _mix(dist, obj) {\n                for (var key in obj) {\n                    if (obj.hasOwnProperty(key) && key !== 'constructor' && obj[key] !== undefined) {\n                        dist[key] = obj[key];\n                    }\n                }\n            }\n            var mix = function mix(dist, src1, src2, src3) {\n                if (src1)\n                    _mix(dist, src1);\n                if (src2)\n                    _mix(dist, src2);\n                if (src3)\n                    _mix(dist, src3);\n                return dist;\n            };\n            module.exports = mix;\n            /***/ \n        }),\n        /* 58 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var each = __webpack_require__(33);\n            var contains = __webpack_require__(59);\n            var uniq = function uniq(arr) {\n                var resultArr = [];\n                each(arr, function (item) {\n                    if (!contains(resultArr, item)) {\n                        resultArr.push(item);\n                    }\n                });\n                return resultArr;\n            };\n            module.exports = uniq;\n            /***/ \n        }),\n        /* 59 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isArrayLike = __webpack_require__(60);\n            var indexOf = Array.prototype.indexOf;\n            var contains = function contains(arr, value) {\n                if (!isArrayLike(arr)) {\n                    return false;\n                }\n                return indexOf.call(arr, value) > -1;\n            };\n            module.exports = contains;\n            /***/ \n        }),\n        /* 60 */\n        /***/ (function (module, exports) {\n            var isArrayLike = function isArrayLike(value) {\n                /**\n                 * isArrayLike([1, 2, 3]) => true\n                 * isArrayLike(document.body.children) => true\n                 * isArrayLike('abc') => true\n                 * isArrayLike(Function) => false\n                 */\n                return value !== null && typeof value !== 'function' && isFinite(value.length);\n            };\n            module.exports = isArrayLike;\n            /***/ \n        }),\n        /* 61 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Plot = \n            /*#__PURE__*/\n            function () {\n                function Plot(cfg) {\n                    Util.mix(this, cfg);\n                    this._init();\n                }\n                var _proto = Plot.prototype;\n                _proto._init = function _init() {\n                    var self = this;\n                    var start = self.start;\n                    var end = self.end;\n                    var xMin = Math.min(start.x, end.x);\n                    var xMax = Math.max(start.x, end.x);\n                    var yMin = Math.min(start.y, end.y);\n                    var yMax = Math.max(start.y, end.y);\n                    this.tl = {\n                        x: xMin,\n                        y: yMin\n                    };\n                    this.tr = {\n                        x: xMax,\n                        y: yMin\n                    };\n                    this.bl = {\n                        x: xMin,\n                        y: yMax\n                    };\n                    this.br = {\n                        x: xMax,\n                        y: yMax\n                    };\n                    this.width = xMax - xMin;\n                    this.height = yMax - yMin;\n                };\n                _proto.reset = function reset(start, end) {\n                    this.start = start;\n                    this.end = end;\n                    this._init();\n                };\n                _proto.isInRange = function isInRange(x, y) {\n                    if (Util.isObject(x)) {\n                        y = x.y;\n                        x = x.x;\n                    }\n                    var tl = this.tl;\n                    var br = this.br;\n                    return tl.x <= x && x <= br.x && tl.y <= y && y <= br.y;\n                };\n                return Plot;\n            }();\n            module.exports = Plot;\n            /***/ \n        }),\n        /* 62 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Coord = __webpack_require__(21);\n            __webpack_require__(63);\n            module.exports = Coord;\n            /***/ \n        }),\n        /* 63 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Base = __webpack_require__(21);\n            var Cartesian = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Cartesian, _Base);\n                function Cartesian() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Cartesian.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'cartesian';\n                    this.transposed = false;\n                    this.isRect = true;\n                };\n                _proto.init = function init(start, end) {\n                    this.x = {\n                        start: start.x,\n                        end: end.x\n                    };\n                    this.y = {\n                        start: start.y,\n                        end: end.y\n                    };\n                };\n                _proto.convertPoint = function convertPoint(point) {\n                    var self = this;\n                    var transposed = self.transposed;\n                    var xDim = transposed ? 'y' : 'x';\n                    var yDim = transposed ? 'x' : 'y';\n                    var x = self.x;\n                    var y = self.y;\n                    return {\n                        x: x.start + (x.end - x.start) * point[xDim],\n                        y: y.start + (y.end - y.start) * point[yDim]\n                    };\n                };\n                _proto.invertPoint = function invertPoint(point) {\n                    var self = this;\n                    var transposed = self.transposed;\n                    var xDim = transposed ? 'y' : 'x';\n                    var yDim = transposed ? 'x' : 'y';\n                    var x = self.x;\n                    var y = self.y;\n                    var rst = {};\n                    rst[xDim] = (point.x - x.start) / (x.end - x.start);\n                    rst[yDim] = (point.y - y.start) / (y.end - y.start);\n                    return rst;\n                };\n                return Cartesian;\n            }(Base);\n            Base.Cartesian = Cartesian;\n            Base.Rect = Cartesian;\n            module.exports = Cartesian;\n            /***/ \n        }),\n        /* 64 */\n        /***/ (function (module, exports, __webpack_require__) {\n            module.exports = {\n                Position: __webpack_require__(65),\n                Shape: __webpack_require__(66),\n                Size: __webpack_require__(67),\n                Color: __webpack_require__(68)\n            };\n            /***/ \n        }),\n        /* 65 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var isNil = __webpack_require__(9);\n            var isArray = __webpack_require__(13);\n            var each = __webpack_require__(4);\n            var Base = __webpack_require__(14);\n            var Position = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Position, _Base);\n                function Position(cfg) {\n                    var _this;\n                    _this = _Base.call(this, cfg) || this;\n                    _this.names = ['x', 'y'];\n                    _this.type = 'position';\n                    return _this;\n                }\n                var _proto = Position.prototype;\n                _proto.mapping = function mapping(x, y) {\n                    var scales = this.scales;\n                    var coord = this.coord;\n                    var scaleX = scales[0];\n                    var scaleY = scales[1];\n                    var rstX;\n                    var rstY;\n                    var obj;\n                    if (isNil(x) || isNil(y)) {\n                        return [];\n                    }\n                    if (isArray(y) && isArray(x)) {\n                        rstX = [];\n                        rstY = [];\n                        for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i++, j++) {\n                            obj = coord.convertPoint({\n                                x: scaleX.scale(x[i]),\n                                y: scaleY.scale(y[j])\n                            });\n                            rstX.push(obj.x);\n                            rstY.push(obj.y);\n                        }\n                    }\n                    else if (isArray(y)) {\n                        x = scaleX.scale(x);\n                        rstY = [];\n                        each(y, function (yVal) {\n                            yVal = scaleY.scale(yVal);\n                            obj = coord.convertPoint({\n                                x: x,\n                                y: yVal\n                            });\n                            if (rstX && rstX !== obj.x) {\n                                if (!isArray(rstX)) {\n                                    rstX = [rstX];\n                                }\n                                rstX.push(obj.x);\n                            }\n                            else {\n                                rstX = obj.x;\n                            }\n                            rstY.push(obj.y);\n                        });\n                    }\n                    else if (isArray(x)) {\n                        y = scaleY.scale(y);\n                        rstX = [];\n                        each(x, function (xVal) {\n                            xVal = scaleX.scale(xVal);\n                            obj = coord.convertPoint({\n                                x: xVal,\n                                y: y\n                            });\n                            if (rstY && rstY !== obj.y) {\n                                if (!isArray(rstY)) {\n                                    rstY = [rstY];\n                                }\n                                rstY.push(obj.y);\n                            }\n                            else {\n                                rstY = obj.y;\n                            }\n                            rstX.push(obj.x);\n                        });\n                    }\n                    else {\n                        x = scaleX.scale(x);\n                        y = scaleY.scale(y);\n                        var point = coord.convertPoint({\n                            x: x,\n                            y: y\n                        });\n                        rstX = point.x;\n                        rstY = point.y;\n                    }\n                    return [rstX, rstY];\n                };\n                return Position;\n            }(Base);\n            module.exports = Position;\n            /***/ \n        }),\n        /* 66 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var Base = __webpack_require__(14);\n            var Shape = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Shape, _Base);\n                function Shape(cfg) {\n                    var _this;\n                    _this = _Base.call(this, cfg) || this;\n                    _this.names = ['shape'];\n                    _this.type = 'shape';\n                    _this.gradient = null;\n                    return _this;\n                }\n                /**\n                 * @override\n                 */\n                var _proto = Shape.prototype;\n                _proto.getLinearValue = function getLinearValue(percent) {\n                    var values = this.values;\n                    var index = Math.round((values.length - 1) * percent);\n                    return values[index];\n                };\n                return Shape;\n            }(Base);\n            module.exports = Shape;\n            /***/ \n        }),\n        /* 67 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var Base = __webpack_require__(14);\n            var Size = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Size, _Base);\n                function Size(cfg) {\n                    var _this;\n                    _this = _Base.call(this, cfg) || this;\n                    _this.names = ['size'];\n                    _this.type = 'size';\n                    _this.gradient = null;\n                    return _this;\n                }\n                return Size;\n            }(Base);\n            module.exports = Size;\n            /***/ \n        }),\n        /* 68 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var ColorUtil = __webpack_require__(69);\n            var Base = __webpack_require__(14);\n            var Color = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Color, _Base);\n                function Color(cfg) {\n                    var _this;\n                    _this = _Base.call(this, cfg) || this;\n                    _this.names = ['color'];\n                    _this.type = 'color';\n                    _this.gradient = null;\n                    if (Util.isString(_this.values)) {\n                        _this.linear = true;\n                    }\n                    return _this;\n                }\n                /**\n                 * @override\n                 */\n                var _proto = Color.prototype;\n                _proto.getLinearValue = function getLinearValue(percent) {\n                    var gradient = this.gradient;\n                    if (!gradient) {\n                        var values = this.values;\n                        gradient = ColorUtil.gradient(values);\n                        this.gradient = gradient;\n                    }\n                    return gradient(percent);\n                };\n                return Color;\n            }(Base);\n            module.exports = Color;\n            /***/ \n        }),\n        /* 69 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0); // Get the interpolation between colors\n            function getValue(start, end, percent, index) {\n                var value = start[index] + (end[index] - start[index]) * percent;\n                return value;\n            } // convert to hex\n            function arr2hex(arr) {\n                return '#' + toRGBValue(arr[0]) + toRGBValue(arr[1]) + toRGBValue(arr[2]);\n            }\n            function toRGBValue(value) {\n                value = Math.round(value);\n                value = value.toString(16);\n                if (value.length === 1) {\n                    value = '0' + value;\n                }\n                return value;\n            }\n            function calColor(colors, percent) {\n                var steps = colors.length - 1;\n                var step = Math.floor(steps * percent);\n                var left = steps * percent - step;\n                var start = colors[step];\n                var end = step === steps ? start : colors[step + 1];\n                var rgb = arr2hex([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);\n                return rgb;\n            }\n            function hex2arr(str) {\n                var arr = [];\n                arr.push(parseInt(str.substr(1, 2), 16));\n                arr.push(parseInt(str.substr(3, 2), 16));\n                arr.push(parseInt(str.substr(5, 2), 16));\n                return arr;\n            }\n            var colorCache = {\n                black: '#000000',\n                blue: '#0000ff',\n                grey: '#808080',\n                green: '#008000',\n                orange: '#ffa500',\n                pink: '#ffc0cb',\n                purple: '#800080',\n                red: '#ff0000',\n                white: '#ffffff',\n                yellow: '#ffff00'\n            };\n            var ColorUtil = {\n                /**\n                 * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.\n                 * @param  {String} color color value\n                 * @return {String} Returns a hexadecimal string\n                 */\n                toHex: function toHex(color) {\n                    if (colorCache[color]) {\n                        return colorCache[color];\n                    }\n                    if (color[0] === '#') {\n                        if (color.length === 7) {\n                            return color;\n                        }\n                        var hex = color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b) {\n                            return '#' + r + r + g + g + b + b;\n                        }); // hex3 to hex6\n                        colorCache[color] = hex;\n                        return hex;\n                    } // rgb/rgba to hex\n                    var rst = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n                    rst.shift();\n                    rst = arr2hex(rst);\n                    colorCache[color] = rst;\n                    return rst;\n                },\n                hex2arr: hex2arr,\n                /**\n                 * handle the gradient color\n                 * @param  {Array} colors the colors\n                 * @return {String} return the color value\n                 */\n                gradient: function gradient(colors) {\n                    var points = [];\n                    if (Util.isString(colors)) {\n                        colors = colors.split('-');\n                    }\n                    Util.each(colors, function (color) {\n                        if (color.indexOf('#') === -1) {\n                            color = ColorUtil.toHex(color);\n                        }\n                        points.push(hex2arr(color));\n                    });\n                    return function (percent) {\n                        return calColor(points, percent);\n                    };\n                }\n            };\n            module.exports = ColorUtil;\n            /***/ \n        }),\n        /* 70 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Global = __webpack_require__(1);\n            var Scale = __webpack_require__(71);\n            var SCALE_TYPES_MAP = {\n                linear: 'Linear',\n                cat: 'Cat',\n                timeCat: 'TimeCat',\n                identity: 'Identity'\n            };\n            var ScaleController = \n            /*#__PURE__*/\n            function () {\n                function ScaleController(cfg) {\n                    // defs 列定义\n                    this.defs = {};\n                    Util.mix(this, cfg);\n                }\n                var _proto = ScaleController.prototype;\n                _proto._getDef = function _getDef(field) {\n                    var defs = this.defs;\n                    var def = null;\n                    if (Global.scales[field] || defs[field]) {\n                        def = Util.mix({}, Global.scales[field]);\n                        Util.each(defs[field], function (v, k) {\n                            if (Util.isNil(v)) {\n                                delete def[k];\n                            }\n                            else {\n                                def[k] = v;\n                            }\n                        });\n                    }\n                    return def;\n                };\n                _proto._getDefaultType = function _getDefaultType(field, data, def) {\n                    if (def && def.type) {\n                        return def.type;\n                    }\n                    var type = 'linear';\n                    var value = Util.Array.firstValue(data, field);\n                    if (Util.isArray(value)) {\n                        value = value[0];\n                    }\n                    if (Util.isString(value)) {\n                        type = 'cat';\n                    }\n                    return type;\n                };\n                _proto._getScaleCfg = function _getScaleCfg(type, field, data, def) {\n                    var values;\n                    if (def && def.values) {\n                        values = def.values;\n                    }\n                    else {\n                        values = Util.Array.values(data, field);\n                    }\n                    var cfg = {\n                        field: field,\n                        values: values\n                    };\n                    if (type !== 'cat' && type !== 'timeCat') {\n                        if (!def || !(def.min && def.max)) {\n                            var _Util$Array$getRange = Util.Array.getRange(values), min = _Util$Array$getRange.min, max = _Util$Array$getRange.max;\n                            cfg.min = min;\n                            cfg.max = max;\n                            cfg.nice = true;\n                        }\n                    }\n                    else {\n                        cfg.isRounding = false; // used for tickCount calculation\n                    }\n                    return cfg;\n                };\n                _proto.createScale = function createScale(field, data) {\n                    var self = this;\n                    var def = self._getDef(field);\n                    var scale;\n                    if (!data || !data.length) {\n                        if (def && def.type) {\n                            def.field = field;\n                            scale = new Scale[SCALE_TYPES_MAP[def.type]](def);\n                        }\n                        else {\n                            scale = new Scale.Identity({\n                                value: field,\n                                field: field.toString(),\n                                values: [field]\n                            });\n                        }\n                        return scale;\n                    }\n                    var firstObj = data[0];\n                    var firstValue = firstObj[field];\n                    if (firstValue === null) {\n                        firstValue = Util.Array.firstValue(data, field);\n                    }\n                    if (Util.isNumber(field) || Util.isNil(firstValue) && !def) {\n                        scale = new Scale.Identity({\n                            value: field,\n                            field: field.toString(),\n                            values: [field]\n                        });\n                    }\n                    else {\n                        var type = self._getDefaultType(field, data, def);\n                        var cfg = self._getScaleCfg(type, field, data, def);\n                        def && Util.mix(cfg, def);\n                        scale = new Scale[SCALE_TYPES_MAP[type]](cfg);\n                    }\n                    return scale;\n                };\n                return ScaleController;\n            }();\n            module.exports = ScaleController;\n            /***/ \n        }),\n        /* 71 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Scale = __webpack_require__(12);\n            __webpack_require__(72);\n            __webpack_require__(75);\n            __webpack_require__(38);\n            module.exports = Scale;\n            /***/ \n        }),\n        /* 72 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            /**\n             * @fileOverview The measurement of linear data scale function\n             * @author dxq613@gmail.com\n             */\n            var isNil = __webpack_require__(9);\n            var each = __webpack_require__(4);\n            var Base = __webpack_require__(12);\n            var numberAuto = __webpack_require__(73);\n            /**\n             * 线性度量\n             * @class Scale.Linear\n             */\n            var Linear = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Linear, _Base);\n                function Linear() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Linear.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Base.prototype._initDefaultCfg.call(this);\n                    var self = this;\n                    self.type = 'linear';\n                    self.isLinear = true;\n                    /**\n                     * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks\n                     * @type {Boolean}\n                     * @default false\n                     */\n                    self.nice = false;\n                    /**\n                     * min value of the scale\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.min = null;\n                    /**\n                     * min value limitted of the scale\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.minLimit = null;\n                    /**\n                     * max value of the scale\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.max = null;\n                    /**\n                     * max value limitted of the scale\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.maxLimit = null;\n                    /**\n                     * 自动生成标记时的个数\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.tickCount = null;\n                    /**\n                     * 坐标轴点之间的间距，指的是真实数据的差值\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.tickInterval = null;\n                    /**\n                     * 坐标轴点之间的最小间距，指的是真实数据的差值\n                     * @type {Number}\n                     * @default null\n                     */\n                    self.minTickInterval = null;\n                    /**\n                     * 用于计算坐标点时逼近的数组\n                     * @type {Array}\n                     */\n                    self.snapArray = null;\n                };\n                _proto.init = function init() {\n                    var self = this;\n                    if (!self.ticks) {\n                        self.min = self.translate(self.min);\n                        self.max = self.translate(self.max);\n                        self.initTicks();\n                    }\n                    else {\n                        var ticks = self.ticks;\n                        var firstValue = self.translate(ticks[0]);\n                        var lastValue = self.translate(ticks[ticks.length - 1]);\n                        if (isNil(self.min) || self.min > firstValue) {\n                            self.min = firstValue;\n                        }\n                        if (isNil(self.max) || self.max < lastValue) {\n                            self.max = lastValue;\n                        }\n                    }\n                };\n                _proto.calculateTicks = function calculateTicks() {\n                    var min = this.min, max = this.max, minLimit = this.minLimit, maxLimit = this.maxLimit, tickCount = this.tickCount, tickInterval = this.tickInterval, minTickInterval = this.minTickInterval, snapArray = this.snapArray;\n                    if (tickCount === 1) {\n                        throw new Error('linear scale\\'tickCount should not be 1');\n                    }\n                    if (max < min) {\n                        throw new Error(\"max: \" + max + \" should not be less than min: \" + min);\n                    }\n                    var tmp = numberAuto({\n                        min: min,\n                        max: max,\n                        minLimit: minLimit,\n                        maxLimit: maxLimit,\n                        minCount: tickCount,\n                        maxCount: tickCount,\n                        interval: tickInterval,\n                        minTickInterval: minTickInterval,\n                        snapArray: snapArray\n                    });\n                    return tmp.ticks;\n                } // 初始化ticks\n                ;\n                _proto.initTicks = function initTicks() {\n                    var self = this;\n                    var calTicks = self.calculateTicks();\n                    if (self.nice) {\n                        // 如果需要优化显示的tick\n                        self.ticks = calTicks;\n                        self.min = calTicks[0];\n                        self.max = calTicks[calTicks.length - 1];\n                    }\n                    else {\n                        var ticks = [];\n                        each(calTicks, function (tick) {\n                            if (tick >= self.min && tick <= self.max) {\n                                ticks.push(tick);\n                            }\n                        }); // 如果 ticks 为空，直接输入最小值、最大值\n                        if (!ticks.length) {\n                            ticks.push(self.min);\n                            ticks.push(self.max);\n                        }\n                        self.ticks = ticks;\n                    }\n                };\n                _proto.scale = function scale(value) {\n                    if (isNil(value)) {\n                        return NaN;\n                    }\n                    var max = this.max;\n                    var min = this.min;\n                    if (max === min) {\n                        return 0;\n                    }\n                    var percent = (value - min) / (max - min);\n                    var rangeMin = this.rangeMin();\n                    var rangeMax = this.rangeMax();\n                    return rangeMin + percent * (rangeMax - rangeMin);\n                };\n                _proto.invert = function invert(value) {\n                    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());\n                    return this.min + percent * (this.max - this.min);\n                };\n                return Linear;\n            }(Base);\n            Base.Linear = Linear;\n            module.exports = Linear;\n            /***/ \n        }),\n        /* 73 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview 自动计算数字坐标轴\n             * @author dxq613@gmail.com\n             */\n            var isNil = __webpack_require__(9);\n            var isNumber = __webpack_require__(17);\n            var AutoUtil = __webpack_require__(74);\n            var MIN_COUNT = 5;\n            var MAX_COUNT = 7;\n            var SNAP_COUNT_ARRAY = [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10];\n            var SNAP_ARRAY = [0, 1, 2, 4, 5, 10];\n            module.exports = function (info) {\n                var min = info.min;\n                var max = info.max;\n                var interval = info.interval;\n                var minTickInterval = info.minTickInterval;\n                var ticks = [];\n                var minCount = info.minCount || MIN_COUNT;\n                var maxCount = info.maxCount || MAX_COUNT;\n                var isFixedCount = minCount === maxCount; // 是否限定死了个数\n                var minLimit = isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值\n                var maxLimit = isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值\n                var avgCount = (minCount + maxCount) / 2;\n                var count = avgCount; // 用户传入的逼近数组\n                var snapArray = info.snapArray ? info.snapArray : isFixedCount ? SNAP_COUNT_ARRAY : SNAP_ARRAY; // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分\n                if (min === minLimit && max === maxLimit && isFixedCount) {\n                    interval = (max - min) / (count - 1);\n                }\n                if (isNil(min)) {\n                    min = 0;\n                }\n                if (isNil(max)) {\n                    max = 0;\n                }\n                if (max === min) {\n                    if (min === 0) {\n                        max = 1;\n                    }\n                    else {\n                        if (min > 0) {\n                            min = 0;\n                        }\n                        else {\n                            max = 0;\n                        }\n                    }\n                    if (max - min < 5 && !interval && max - min >= 1) {\n                        interval = 1;\n                    }\n                }\n                if (isNil(interval)) {\n                    // 计算间距\n                    var temp = (max - min) / (avgCount - 1);\n                    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');\n                    if (maxCount !== minCount) {\n                        count = parseInt((max - min) / interval, 10);\n                        if (count > maxCount) {\n                            count = maxCount;\n                        }\n                        if (count < minCount) {\n                            count = minCount;\n                        } // 不确定tick的个数时，使得tick偏小\n                        interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');\n                    }\n                } // interval should not be less than minTickInterval\n                if (isNumber(minTickInterval) && interval < minTickInterval) {\n                    interval = minTickInterval;\n                }\n                if (info.interval || maxCount !== minCount) {\n                    // 校正 max 和 min\n                    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近\n                    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近\n                    count = Math.round((max - min) / interval);\n                    min = AutoUtil.fixedBase(min, interval);\n                    max = AutoUtil.fixedBase(max, interval);\n                }\n                else {\n                    avgCount = parseInt(avgCount, 10); // 取整\n                    var avg = (max + min) / 2;\n                    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');\n                    var sideCount = Math.floor((avgCount - 2) / 2);\n                    var maxTick = avgTick + sideCount * interval;\n                    var minTick;\n                    if (avgCount % 2 === 0) {\n                        minTick = avgTick - sideCount * interval;\n                    }\n                    else {\n                        minTick = avgTick - (sideCount + 1) * interval;\n                    }\n                    while (maxTick < max) {\n                        // 保证计算出来的刻度最大值 maxTick 不小于数据最大值 max\n                        maxTick = AutoUtil.fixedBase(maxTick + interval, interval);\n                    }\n                    while (minTick > min) {\n                        // 保证计算出来的刻度最小值 minTick 不小于数据最大值 min\n                        minTick = AutoUtil.fixedBase(minTick - interval, interval); // 防止超常浮点数计算问题\n                    }\n                    max = maxTick;\n                    min = minTick;\n                }\n                max = Math.min(max, maxLimit);\n                min = Math.max(min, minLimit);\n                ticks.push(min);\n                for (var i = 1; i < count; i++) {\n                    var tickValue = AutoUtil.fixedBase(interval * i + min, interval);\n                    if (tickValue < max) {\n                        ticks.push(tickValue);\n                    }\n                }\n                if (ticks[ticks.length - 1] < max) {\n                    ticks.push(max);\n                }\n                return {\n                    min: min,\n                    max: max,\n                    interval: interval,\n                    count: count,\n                    ticks: ticks\n                };\n            };\n            /***/ \n        }),\n        /* 74 */\n        /***/ (function (module, exports) {\n            /**\n             * @fileOverview 计算方法\n             * @author dxq613@gmail.com\n             */\n            // 如果小数点后面超过 10 位浮点数时进行一下处理\n            var DECIMAL_LENGTH = 12; // 获取系数\n            function getFactor(v) {\n                var factor = 1;\n                if (v === Infinity || v === -Infinity) {\n                    throw new Error('Not support Infinity!');\n                }\n                if (v < 1) {\n                    var count = 0;\n                    while (v < 1) {\n                        factor = factor / 10;\n                        v = v * 10;\n                        count++;\n                    } // 浮点数计算出现问题\n                    if (factor.toString().length > DECIMAL_LENGTH) {\n                        factor = parseFloat(factor.toFixed(count));\n                    }\n                }\n                else {\n                    while (v > 10) {\n                        factor = factor * 10;\n                        v = v / 10;\n                    }\n                }\n                return factor;\n            } // 取小于当前值的\n            function arrayFloor(values, value) {\n                var length = values.length;\n                if (length === 0) {\n                    return NaN;\n                }\n                var pre = values[0];\n                if (value < values[0]) {\n                    return NaN;\n                }\n                if (value >= values[length - 1]) {\n                    return values[length - 1];\n                }\n                for (var i = 1; i < values.length; i++) {\n                    if (value < values[i]) {\n                        break;\n                    }\n                    pre = values[i];\n                }\n                return pre;\n            } // 大于当前值的第一个\n            function arrayCeiling(values, value) {\n                var length = values.length;\n                if (length === 0) {\n                    return NaN;\n                } // var pre = values[0];\n                var rst;\n                if (value > values[length - 1]) {\n                    return NaN;\n                }\n                if (value < values[0]) {\n                    return values[0];\n                }\n                for (var i = 1; i < values.length; i++) {\n                    if (value <= values[i]) {\n                        rst = values[i];\n                        break;\n                    }\n                }\n                return rst;\n            }\n            var Util = {\n                // 获取逼近的数值\n                snapFactorTo: function snapFactorTo(v, arr, snapType) {\n                    // 假设 v = -512,isFloor = true\n                    if (isNaN(v)) {\n                        return NaN;\n                    }\n                    var factor = 1; // 计算系数\n                    if (v !== 0) {\n                        if (v < 0) {\n                            factor = -1;\n                        }\n                        v = v * factor; // v = 512\n                        var tmpFactor = getFactor(v);\n                        factor = factor * tmpFactor; // factor = -100\n                        v = v / tmpFactor; // v = 5.12\n                    }\n                    if (snapType === 'floor') {\n                        v = Util.snapFloor(arr, v); // v = 5\n                    }\n                    else if (snapType === 'ceil') {\n                        v = Util.snapCeiling(arr, v); // v = 6\n                    }\n                    else {\n                        v = Util.snapTo(arr, v); // 四舍五入 5\n                    }\n                    var rst = parseFloat((v * factor).toPrecision(DECIMAL_LENGTH)); // 如果出现浮点数计算问题，需要处理一下\n                    // 如果出现浮点数计算问题，需要处理一下\n                    if (Math.abs(factor) < 1 && rst.toString().length > DECIMAL_LENGTH) {\n                        var decimalVal = parseInt(1 / factor);\n                        var symbol = factor > 0 ? 1 : -1;\n                        rst = v / decimalVal * symbol;\n                    }\n                    return rst;\n                },\n                // 获取逼近的倍数\n                snapMultiple: function snapMultiple(v, base, snapType) {\n                    var div;\n                    if (snapType === 'ceil') {\n                        div = Math.ceil(v / base);\n                    }\n                    else if (snapType === 'floor') {\n                        div = Math.floor(v / base);\n                    }\n                    else {\n                        div = Math.round(v / base);\n                    }\n                    return div * base;\n                },\n                /**\n                 * 获取逼近的值，用于对齐数据\n                 * @param  {Array} values   数据集合\n                 * @param  {Number} value   数值\n                 * @return {Number} 逼近的值\n                 */\n                snapTo: function snapTo(values, value) {\n                    // 这里假定values是升序排列\n                    var floorVal = arrayFloor(values, value);\n                    var ceilingVal = arrayCeiling(values, value);\n                    if (isNaN(floorVal) || isNaN(ceilingVal)) {\n                        if (values[0] >= value) {\n                            return values[0];\n                        }\n                        var last = values[values.length - 1];\n                        if (last <= value) {\n                            return last;\n                        }\n                    }\n                    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {\n                        return floorVal;\n                    }\n                    return ceilingVal;\n                },\n                /**\n                 * 获取逼近的最小值，用于对齐数据\n                 * @param  {Array} values   数据集合\n                 * @param  {Number} value   数值\n                 * @return {Number} 逼近的最小值\n                 */\n                snapFloor: function snapFloor(values, value) {\n                    // 这里假定values是升序排列\n                    return arrayFloor(values, value);\n                },\n                /**\n                 * 获取逼近的最大值，用于对齐数据\n                 * @param  {Array} values   数据集合\n                 * @param  {Number} value   数值\n                 * @return {Number} 逼近的最大值\n                 */\n                snapCeiling: function snapCeiling(values, value) {\n                    // 这里假定values是升序排列\n                    return arrayCeiling(values, value);\n                },\n                fixedBase: function fixedBase(v, base) {\n                    var str = base.toString();\n                    var index = str.indexOf('.');\n                    if (index === -1) {\n                        return Math.round(v);\n                    }\n                    var length = str.substr(index + 1).length;\n                    if (length > 20) {\n                        length = 20;\n                    }\n                    return parseFloat(v.toFixed(length));\n                }\n            };\n            module.exports = Util;\n            /***/ \n        }),\n        /* 75 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var Base = __webpack_require__(12);\n            var isNumber = __webpack_require__(17);\n            var Identity = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Identity, _Base);\n                function Identity() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Identity.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Base.prototype._initDefaultCfg.call(this);\n                    this.isIdentity = true;\n                    this.type = 'identity';\n                    /**\n                     * 常量值\n                     * @type {*}\n                     */\n                    this.value = null;\n                };\n                _proto.getText = function getText() {\n                    return this.value.toString();\n                };\n                _proto.scale = function scale(value) {\n                    if (this.value !== value && isNumber(value)) {\n                        return value;\n                    }\n                    return this.range[0];\n                };\n                _proto.invert = function invert() {\n                    return this.value;\n                };\n                return Identity;\n            }(Base);\n            Base.Identity = Identity;\n            module.exports = Identity;\n            /***/ \n        }),\n        /* 76 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Axis = __webpack_require__(77);\n            var Global = __webpack_require__(1);\n            var _require = __webpack_require__(5), Shape = _require.Shape;\n            function formatTicks(ticks) {\n                var tmp = ticks.slice(0);\n                if (tmp.length > 0) {\n                    var first = tmp[0];\n                    var last = tmp[tmp.length - 1];\n                    if (first.value !== 0) {\n                        tmp.unshift({\n                            value: 0\n                        });\n                    }\n                    if (last.value !== 1) {\n                        tmp.push({\n                            value: 1\n                        });\n                    }\n                }\n                return tmp;\n            }\n            var AxisController = \n            /*#__PURE__*/\n            function () {\n                function AxisController(cfg) {\n                    this.axisCfg = {};\n                    this.frontPlot = null;\n                    this.backPlot = null;\n                    this.axes = {}; // store the axes's options\n                    Util.mix(this, cfg);\n                }\n                var _proto = AxisController.prototype;\n                _proto._isHide = function _isHide(field) {\n                    var axisCfg = this.axisCfg;\n                    return !axisCfg || axisCfg[field] === false;\n                };\n                _proto._getLinePosition = function _getLinePosition(scale, dimType, index, transposed) {\n                    var position = '';\n                    var field = scale.field;\n                    var axisCfg = this.axisCfg;\n                    if (axisCfg[field] && axisCfg[field].position) {\n                        position = axisCfg[field].position;\n                    }\n                    else if (dimType === 'x') {\n                        position = transposed ? 'left' : 'bottom';\n                    }\n                    else if (dimType === 'y') {\n                        position = index ? 'right' : 'left';\n                        if (transposed) {\n                            position = 'bottom';\n                        }\n                    }\n                    return position;\n                };\n                _proto._getLineCfg = function _getLineCfg(coord, dimType, position) {\n                    var start;\n                    var end;\n                    var factor = 1; // Mark clockwise or counterclockwise\n                    if (dimType === 'x') {\n                        start = {\n                            x: 0,\n                            y: 0\n                        };\n                        end = {\n                            x: 1,\n                            y: 0\n                        };\n                    }\n                    else {\n                        if (position === 'right') {\n                            // there will be several y axes\n                            start = {\n                                x: 1,\n                                y: 0\n                            };\n                            end = {\n                                x: 1,\n                                y: 1\n                            };\n                        }\n                        else {\n                            start = {\n                                x: 0,\n                                y: 0\n                            };\n                            end = {\n                                x: 0,\n                                y: 1\n                            };\n                            factor = -1;\n                        }\n                    }\n                    if (coord.transposed) {\n                        factor *= -1;\n                    }\n                    return {\n                        offsetFactor: factor,\n                        start: coord.convertPoint(start),\n                        end: coord.convertPoint(end)\n                    };\n                };\n                _proto._getCircleCfg = function _getCircleCfg(coord) {\n                    return {\n                        startAngle: coord.startAngle,\n                        endAngle: coord.endAngle,\n                        center: coord.center,\n                        radius: coord.circleRadius\n                    };\n                };\n                _proto._getRadiusCfg = function _getRadiusCfg(coord) {\n                    var transposed = coord.transposed;\n                    var start;\n                    var end;\n                    if (transposed) {\n                        start = {\n                            x: 0,\n                            y: 0\n                        };\n                        end = {\n                            x: 1,\n                            y: 0\n                        };\n                    }\n                    else {\n                        start = {\n                            x: 0,\n                            y: 0\n                        };\n                        end = {\n                            x: 0,\n                            y: 1\n                        };\n                    }\n                    return {\n                        offsetFactor: -1,\n                        start: coord.convertPoint(start),\n                        end: coord.convertPoint(end)\n                    };\n                };\n                _proto._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType, defaultCfg) {\n                    var self = this;\n                    var axisCfg = this.axisCfg;\n                    var ticks = scale.getTicks();\n                    var cfg = Util.deepMix({\n                        ticks: ticks,\n                        frontContainer: this.frontPlot,\n                        backContainer: this.backPlot\n                    }, defaultCfg, axisCfg[scale.field]);\n                    var labels = [];\n                    var label = cfg.label;\n                    var count = ticks.length;\n                    var maxWidth = 0;\n                    var maxHeight = 0;\n                    var labelCfg = label;\n                    Util.each(ticks, function (tick, index) {\n                        if (Util.isFunction(label)) {\n                            var executedLabel = label(tick.text, index, count);\n                            labelCfg = executedLabel ? Util.mix({}, Global._defaultAxis.label, executedLabel) : null;\n                        }\n                        if (labelCfg) {\n                            var textStyle = {};\n                            if (labelCfg.textAlign) {\n                                textStyle.textAlign = labelCfg.textAlign;\n                            }\n                            if (labelCfg.textBaseline) {\n                                textStyle.textBaseline = labelCfg.textBaseline;\n                            }\n                            var axisLabel = new Shape.Text({\n                                className: 'axis-label',\n                                attrs: Util.mix({\n                                    x: 0,\n                                    y: 0,\n                                    text: tick.text,\n                                    fontFamily: self.chart.get('canvas').get('fontFamily')\n                                }, labelCfg),\n                                value: tick.value,\n                                textStyle: textStyle,\n                                top: labelCfg.top,\n                                context: self.chart.get('canvas').get('context')\n                            });\n                            labels.push(axisLabel);\n                            var _axisLabel$getBBox = axisLabel.getBBox(), width = _axisLabel$getBBox.width, height = _axisLabel$getBBox.height;\n                            maxWidth = Math.max(maxWidth, width);\n                            maxHeight = Math.max(maxHeight, height);\n                        }\n                    });\n                    cfg.labels = labels;\n                    cfg.maxWidth = maxWidth;\n                    cfg.maxHeight = maxHeight;\n                    return cfg;\n                };\n                _proto._createAxis = function _createAxis(coord, scale, verticalScale, dimType, index) {\n                    if (index === void 0) {\n                        index = '';\n                    }\n                    var self = this;\n                    var coordType = coord.type;\n                    var transposed = coord.transposed;\n                    var type;\n                    var key;\n                    var defaultCfg;\n                    if (coordType === 'cartesian' || coordType === 'rect') {\n                        var position = self._getLinePosition(scale, dimType, index, transposed);\n                        defaultCfg = Global.axis[position];\n                        defaultCfg.position = position;\n                        type = 'Line';\n                        key = position;\n                    }\n                    else {\n                        if (dimType === 'x' && !transposed || dimType === 'y' && transposed) {\n                            defaultCfg = Global.axis.circle;\n                            type = 'Circle';\n                            key = 'circle';\n                        }\n                        else {\n                            defaultCfg = Global.axis.radius;\n                            type = 'Line';\n                            key = 'radius';\n                        }\n                    }\n                    var cfg = self._getAxisCfg(coord, scale, verticalScale, dimType, defaultCfg);\n                    cfg.type = type;\n                    cfg.dimType = dimType;\n                    cfg.verticalScale = verticalScale;\n                    cfg.index = index;\n                    this.axes[key] = cfg;\n                };\n                _proto.createAxis = function createAxis(coord, xScale, yScales) {\n                    var self = this;\n                    if (xScale && !self._isHide(xScale.field)) {\n                        self._createAxis(coord, xScale, yScales[0], 'x');\n                    }\n                    Util.each(yScales, function (yScale, index) {\n                        if (!self._isHide(yScale.field)) {\n                            self._createAxis(coord, yScale, xScale, 'y', index);\n                        }\n                    });\n                    var axes = this.axes;\n                    var chart = self.chart;\n                    if (chart._isAutoPadding()) {\n                        var userPadding = Util.parsePadding(chart.get('padding'));\n                        var appendPadding = Util.parsePadding(chart.get('appendPadding'));\n                        var legendRange = chart.get('legendRange') || {\n                            top: 0,\n                            right: 0,\n                            bottom: 0,\n                            left: 0\n                        };\n                        var padding = [userPadding[0] === 'auto' ? legendRange.top + appendPadding[0] * 2 : userPadding[0], userPadding[1] === 'auto' ? legendRange.right + appendPadding[1] : userPadding[1], userPadding[2] === 'auto' ? legendRange.bottom + appendPadding[2] : userPadding[2], userPadding[3] === 'auto' ? legendRange.left + appendPadding[3] : userPadding[3]];\n                        if (coord.isPolar) {\n                            var circleAxis = axes.circle;\n                            if (circleAxis) {\n                                var maxHeight = circleAxis.maxHeight, maxWidth = circleAxis.maxWidth, labelOffset = circleAxis.labelOffset;\n                                padding[0] += maxHeight + labelOffset;\n                                padding[1] += maxWidth + labelOffset;\n                                padding[2] += maxHeight + labelOffset;\n                                padding[3] += maxWidth + labelOffset;\n                            }\n                        }\n                        else {\n                            if (axes.right && userPadding[1] === 'auto') {\n                                var _axes$right = axes.right, _maxWidth = _axes$right.maxWidth, _labelOffset = _axes$right.labelOffset;\n                                padding[1] += _maxWidth + _labelOffset;\n                            }\n                            if (axes.left && userPadding[3] === 'auto') {\n                                var _axes$left = axes.left, _maxWidth2 = _axes$left.maxWidth, _labelOffset2 = _axes$left.labelOffset;\n                                padding[3] += _maxWidth2 + _labelOffset2;\n                            }\n                            if (axes.bottom && userPadding[2] === 'auto') {\n                                var _axes$bottom = axes.bottom, _maxHeight = _axes$bottom.maxHeight, _labelOffset3 = _axes$bottom.labelOffset;\n                                padding[2] += _maxHeight + _labelOffset3;\n                            }\n                        }\n                        chart.set('_padding', padding);\n                        chart._updateLayout(padding);\n                    }\n                    Util.each(axes, function (axis) {\n                        var type = axis.type, grid = axis.grid, verticalScale = axis.verticalScale, ticks = axis.ticks, dimType = axis.dimType, position = axis.position, index = axis.index;\n                        var appendCfg;\n                        if (coord.isPolar) {\n                            if (type === 'Line') {\n                                appendCfg = self._getRadiusCfg(coord);\n                            }\n                            else if (type === 'Circle') {\n                                appendCfg = self._getCircleCfg(coord);\n                            }\n                        }\n                        else {\n                            appendCfg = self._getLineCfg(coord, dimType, position);\n                        }\n                        if (grid && verticalScale) {\n                            var gridPoints = [];\n                            var verticalTicks = formatTicks(verticalScale.getTicks());\n                            Util.each(ticks, function (tick) {\n                                var subPoints = [];\n                                Util.each(verticalTicks, function (verticalTick) {\n                                    var x = dimType === 'x' ? tick.value : verticalTick.value;\n                                    var y = dimType === 'x' ? verticalTick.value : tick.value;\n                                    if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {\n                                        var point = coord.convertPoint({\n                                            x: x,\n                                            y: y\n                                        });\n                                        subPoints.push(point);\n                                    }\n                                });\n                                gridPoints.push({\n                                    points: subPoints,\n                                    _id: 'axis-' + dimType + index + '-grid-' + tick.tickValue\n                                });\n                            });\n                            axis.gridPoints = gridPoints;\n                            if (coord.isPolar) {\n                                axis.center = coord.center;\n                                axis.startAngle = coord.startAngle;\n                                axis.endAngle = coord.endAngle;\n                            }\n                        }\n                        appendCfg._id = 'axis-' + dimType;\n                        if (!Util.isNil(index)) {\n                            appendCfg._id = 'axis-' + dimType + index;\n                        }\n                        new Axis[type](Util.mix(axis, appendCfg));\n                    });\n                };\n                _proto.clear = function clear() {\n                    this.axes = {};\n                    this.frontPlot.clear();\n                    this.backPlot.clear();\n                };\n                return AxisController;\n            }();\n            module.exports = AxisController;\n            /***/ \n        }),\n        /* 77 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Abstract = __webpack_require__(26);\n            __webpack_require__(78);\n            module.exports = Abstract;\n            /***/ \n        }),\n        /* 78 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Abstract = __webpack_require__(26);\n            var Line = \n            /*#__PURE__*/\n            function (_Abstract) {\n                _inheritsLoose(Line, _Abstract);\n                function Line() {\n                    return _Abstract.apply(this, arguments) || this;\n                }\n                var _proto = Line.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Abstract.prototype._initDefaultCfg.call(this);\n                    this.start = null;\n                    this.end = null;\n                };\n                _proto.getOffsetPoint = function getOffsetPoint(value) {\n                    var start = this.start, end = this.end;\n                    return {\n                        x: start.x + (end.x - start.x) * value,\n                        y: start.y + (end.y - start.y) * value\n                    };\n                };\n                _proto.getAxisVector = function getAxisVector() {\n                    var start = this.start, end = this.end;\n                    return [end.x - start.x, end.y - start.y];\n                };\n                _proto.drawLine = function drawLine(lineCfg) {\n                    var container = this.getContainer(lineCfg.top);\n                    var start = this.start, end = this.end;\n                    container.addShape('line', {\n                        className: 'axis-line',\n                        attrs: Util.mix({\n                            x1: start.x,\n                            y1: start.y,\n                            x2: end.x,\n                            y2: end.y\n                        }, lineCfg)\n                    });\n                };\n                return Line;\n            }(Abstract);\n            Abstract.Line = Line;\n            module.exports = Line;\n            /***/ \n        }),\n        /* 79 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Container = __webpack_require__(35);\n            var Group = __webpack_require__(36);\n            var _require = __webpack_require__(40), requestAnimationFrame = _require.requestAnimationFrame;\n            var Canvas = \n            /*#__PURE__*/\n            function () {\n                var _proto = Canvas.prototype;\n                _proto.get = function get(name) {\n                    return this._attrs[name];\n                };\n                _proto.set = function set(name, value) {\n                    this._attrs[name] = value;\n                };\n                function Canvas(cfg) {\n                    this._attrs = Util.mix({\n                        type: 'canvas',\n                        children: []\n                    }, cfg);\n                    this._initPixelRatio();\n                    this._initCanvas();\n                }\n                _proto._initPixelRatio = function _initPixelRatio() {\n                    var pixelRatio = this.get('pixelRatio');\n                    if (!pixelRatio) {\n                        this.set('pixelRatio', Util.getPixelRatio());\n                    }\n                };\n                _proto.beforeDraw = function beforeDraw() {\n                    var context = this._attrs.context;\n                    var el = this._attrs.el;\n                    !Util.isWx && !Util.isMy && context && context.clearRect(0, 0, el.width, el.height);\n                };\n                _proto._initCanvas = function _initCanvas() {\n                    var self = this;\n                    var el = self.get('el');\n                    var context = self.get('context');\n                    var canvas;\n                    if (context) {\n                        // CanvasRenderingContext2D\n                        canvas = context.canvas;\n                    }\n                    else if (Util.isString(el)) {\n                        // HTMLElement's id\n                        canvas = Util.getDomById(el);\n                    }\n                    else {\n                        // HTMLElement\n                        canvas = el;\n                    }\n                    if (!canvas) {\n                        throw new Error('Please specify the id or el of the chart!');\n                    }\n                    if (context && canvas && !canvas.getContext) {\n                        canvas.getContext = function () {\n                            return context;\n                        };\n                    }\n                    var width = self.get('width');\n                    if (!width) {\n                        width = Util.getWidth(canvas);\n                    }\n                    var height = self.get('height');\n                    if (!height) {\n                        height = Util.getHeight(canvas);\n                    }\n                    self.set('canvas', this);\n                    self.set('el', canvas);\n                    self.set('context', context || canvas.getContext('2d'));\n                    self.changeSize(width, height);\n                };\n                _proto.changeSize = function changeSize(width, height) {\n                    var pixelRatio = this.get('pixelRatio');\n                    var canvasDOM = this.get('el');\n                    if (Util.isBrowser) {\n                        canvasDOM.style.width = width + 'px';\n                        canvasDOM.style.height = height + 'px';\n                    }\n                    if (!Util.isWx && !Util.isMy) {\n                        canvasDOM.width = width * pixelRatio;\n                        canvasDOM.height = height * pixelRatio;\n                        if (pixelRatio !== 1) {\n                            var ctx = this.get('context');\n                            ctx.scale(pixelRatio, pixelRatio);\n                        }\n                    }\n                    this.set('width', width);\n                    this.set('height', height);\n                };\n                _proto.getWidth = function getWidth() {\n                    var pixelRatio = this.get('pixelRatio');\n                    var width = this.get('width');\n                    return width * pixelRatio;\n                };\n                _proto.getHeight = function getHeight() {\n                    var pixelRatio = this.get('pixelRatio');\n                    var height = this.get('height');\n                    return height * pixelRatio;\n                };\n                _proto.getPointByClient = function getPointByClient(clientX, clientY) {\n                    var el = this.get('el');\n                    var bbox = el.getBoundingClientRect();\n                    var width = bbox.right - bbox.left;\n                    var height = bbox.bottom - bbox.top;\n                    return {\n                        x: (clientX - bbox.left) * (el.width / width),\n                        y: (clientY - bbox.top) * (el.height / height)\n                    };\n                };\n                _proto._beginDraw = function _beginDraw() {\n                    this._attrs.toDraw = true;\n                };\n                _proto._endDraw = function _endDraw() {\n                    this._attrs.toDraw = false;\n                };\n                _proto.draw = function draw() {\n                    var self = this;\n                    function drawInner() {\n                        self.set('animateHandler', requestAnimationFrame(function () {\n                            self.set('animateHandler', undefined);\n                            if (self.get('toDraw')) {\n                                drawInner();\n                            }\n                        }));\n                        self.beforeDraw();\n                        try {\n                            var context = self._attrs.context;\n                            var children = self._attrs.children;\n                            for (var i = 0, len = children.length; i < len; i++) {\n                                var child = children[i];\n                                child.draw(context);\n                            }\n                            if (Util.isWx || Util.isMy) {\n                                context.draw();\n                            }\n                        }\n                        catch (ev) {\n                            console.warn('error in draw canvas, detail as:');\n                            console.warn(ev);\n                            self._endDraw();\n                        }\n                        self._endDraw();\n                    }\n                    if (self.get('destroyed')) {\n                        return;\n                    }\n                    if (self.get('animateHandler')) {\n                        this._beginDraw();\n                    }\n                    else {\n                        drawInner();\n                    }\n                };\n                _proto.destroy = function destroy() {\n                    if (this.get('destroyed')) {\n                        return;\n                    }\n                    this.clear();\n                    this._attrs = {};\n                    this.set('destroyed', true);\n                };\n                _proto.isDestroyed = function isDestroyed() {\n                    return this.get('destroyed');\n                };\n                return Canvas;\n            }();\n            Util.mix(Canvas.prototype, Container, {\n                getGroupClass: function getGroupClass() {\n                    return Group;\n                }\n            });\n            module.exports = Canvas;\n            /***/ \n        }),\n        /* 80 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            function _mod(n, m) {\n                return (n % m + m) % m;\n            }\n            function _addStop(steps, gradient) {\n                Util.each(steps, function (item) {\n                    item = item.split(':');\n                    gradient.addColorStop(Number(item[0]), item[1]);\n                });\n            } // the string format: 'l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff'\n            function _parseLineGradient(color, shape, context) {\n                var arr = color.split(' ');\n                var angle = arr[0].slice(2, arr[0].length - 1);\n                angle = _mod(parseFloat(angle) * Math.PI / 180, Math.PI * 2);\n                var steps = arr.slice(1);\n                var _shape$getBBox = shape.getBBox(), minX = _shape$getBBox.minX, minY = _shape$getBBox.minY, maxX = _shape$getBBox.maxX, maxY = _shape$getBBox.maxY;\n                var start;\n                var end;\n                if (angle >= 0 && angle < 0.5 * Math.PI) {\n                    start = {\n                        x: minX,\n                        y: minY\n                    };\n                    end = {\n                        x: maxX,\n                        y: maxY\n                    };\n                }\n                else if (0.5 * Math.PI <= angle && angle < Math.PI) {\n                    start = {\n                        x: maxX,\n                        y: minY\n                    };\n                    end = {\n                        x: minX,\n                        y: maxY\n                    };\n                }\n                else if (Math.PI <= angle && angle < 1.5 * Math.PI) {\n                    start = {\n                        x: maxX,\n                        y: maxY\n                    };\n                    end = {\n                        x: minX,\n                        y: minY\n                    };\n                }\n                else {\n                    start = {\n                        x: minX,\n                        y: maxY\n                    };\n                    end = {\n                        x: maxX,\n                        y: minY\n                    };\n                }\n                var tanTheta = Math.tan(angle);\n                var tanTheta2 = tanTheta * tanTheta;\n                var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;\n                var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;\n                var gradient = context.createLinearGradient(start.x, start.y, x, y);\n                _addStop(steps, gradient);\n                return gradient;\n            } // the string format: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff'\n            function _parseRadialGradient(color, shape, context) {\n                var arr = color.split(' ');\n                var circleCfg = arr[0].slice(2, arr[0].length - 1);\n                circleCfg = circleCfg.split(',');\n                var fx = parseFloat(circleCfg[0]);\n                var fy = parseFloat(circleCfg[1]);\n                var fr = parseFloat(circleCfg[2]);\n                var steps = arr.slice(1); // if radius is 0, no gradient, stroke with the last color\n                if (fr === 0) {\n                    var _color = steps[steps.length - 1];\n                    return _color.split(':')[1];\n                }\n                var _shape$getBBox2 = shape.getBBox(), width = _shape$getBBox2.width, height = _shape$getBBox2.height, minX = _shape$getBBox2.minX, minY = _shape$getBBox2.minY;\n                var r = Math.sqrt(width * width + height * height) / 2;\n                var gradient = context.createRadialGradient(minX + width * fx, minY + height * fy, fr * r, minX + width / 2, minY + height / 2, r);\n                _addStop(steps, gradient);\n                return gradient;\n            }\n            module.exports = {\n                parseStyle: function parseStyle(color, shape, context) {\n                    if (color[1] === '(') {\n                        try {\n                            var firstCode = color[0];\n                            if (firstCode === 'l') {\n                                return _parseLineGradient(color, shape, context);\n                            }\n                            else if (firstCode === 'r') {\n                                return _parseRadialGradient(color, shape, context);\n                            }\n                        }\n                        catch (ev) {\n                            console.error('error in parsing gradient string, please check if there are any extra whitespaces.');\n                            console.error(ev);\n                        }\n                    }\n                    return color;\n                }\n            };\n            /***/ \n        }),\n        /* 81 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(2);\n            var Rect = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Rect, _Shape);\n                function Rect() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Rect.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'rect';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                        radius: 0,\n                        lineWidth: 0\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height;\n                    context.beginPath();\n                    var radius = attrs.radius;\n                    if (!radius || !(width * height)) {\n                        context.rect(x, y, width, height);\n                    }\n                    else {\n                        radius = Util.parsePadding(radius);\n                        context.moveTo(x + radius[0], y);\n                        context.lineTo(x + width - radius[1], y);\n                        context.arc(x + width - radius[1], y + radius[1], radius[1], -Math.PI / 2, 0, false);\n                        context.lineTo(x + width, y + height - radius[2]);\n                        context.arc(x + width - radius[2], y + height - radius[2], radius[2], 0, Math.PI / 2, false);\n                        context.lineTo(x + radius[3], y + height);\n                        context.arc(x + radius[3], y + height - radius[3], radius[3], Math.PI / 2, Math.PI, false);\n                        context.lineTo(x, y + radius[0]);\n                        context.arc(x + radius[0], y + radius[0], radius[0], Math.PI, Math.PI * 3 / 2, false);\n                        context.closePath();\n                    }\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height;\n                    return {\n                        minX: x,\n                        minY: y,\n                        maxX: x + width,\n                        maxY: y + height\n                    };\n                };\n                return Rect;\n            }(Shape);\n            Shape.Rect = Rect;\n            module.exports = Rect;\n            /***/ \n        }),\n        /* 82 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var Circle = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Circle, _Shape);\n                function Circle() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Circle.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'circle';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        r: 0,\n                        lineWidth: 0\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, r = attrs.r;\n                    context.beginPath();\n                    context.arc(x, y, r, 0, Math.PI * 2, false);\n                    context.closePath();\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, r = attrs.r;\n                    return {\n                        minX: x - r,\n                        maxX: x + r,\n                        minY: y - r,\n                        maxY: y + r\n                    };\n                };\n                return Circle;\n            }(Shape);\n            Shape.Circle = Circle;\n            module.exports = Circle;\n            /***/ \n        }),\n        /* 83 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var bbox = __webpack_require__(10);\n            var Line = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Line, _Shape);\n                function Line() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Line.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'line';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x1: 0,\n                        y1: 0,\n                        x2: 0,\n                        y2: 0,\n                        lineWidth: 1\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var attrs = this.get('attrs');\n                    var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;\n                    context.beginPath();\n                    context.moveTo(x1, y1);\n                    context.lineTo(x2, y2);\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2, lineWidth = attrs.lineWidth;\n                    return bbox.getBBoxFromLine(x1, y1, x2, y2, lineWidth);\n                };\n                return Line;\n            }(Shape);\n            Shape.Line = Line;\n            module.exports = Line;\n            /***/ \n        }),\n        /* 84 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var bbox = __webpack_require__(10);\n            var Polygon = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Polygon, _Shape);\n                function Polygon() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Polygon.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'polygon';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        points: null,\n                        lineWidth: 0\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    var points = attrs.points;\n                    context.beginPath();\n                    for (var i = 0, len = points.length; i < len; i++) {\n                        var point = points[i];\n                        if (i === 0) {\n                            context.moveTo(point.x, point.y);\n                        }\n                        else {\n                            context.lineTo(point.x, point.y);\n                        }\n                    }\n                    context.closePath();\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var points = attrs.points;\n                    return bbox.getBBoxFromPoints(points);\n                };\n                return Polygon;\n            }(Shape);\n            Shape.Polygon = Polygon;\n            module.exports = Polygon;\n            /***/ \n        }),\n        /* 85 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var Smooth = __webpack_require__(41);\n            var bbox = __webpack_require__(10); // filter the point which x or y is NaN\n            function _filterPoints(points) {\n                var filteredPoints = [];\n                for (var i = 0, len = points.length; i < len; i++) {\n                    var point = points[i];\n                    if (!isNaN(point.x) && !isNaN(point.y)) {\n                        filteredPoints.push(point);\n                    }\n                }\n                return filteredPoints;\n            }\n            var Polyline = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Polyline, _Shape);\n                function Polyline() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Polyline.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'polyline';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        points: null,\n                        lineWidth: 1,\n                        smooth: false\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var self = this;\n                    var attrs = self.get('attrs');\n                    var points = attrs.points, smooth = attrs.smooth;\n                    var filteredPoints = _filterPoints(points);\n                    context.beginPath();\n                    if (filteredPoints.length) {\n                        context.moveTo(filteredPoints[0].x, filteredPoints[0].y);\n                        if (smooth) {\n                            var constaint = [[0, 0], [1, 1]];\n                            var sps = Smooth.smooth(filteredPoints, false, constaint);\n                            for (var i = 0, n = sps.length; i < n; i++) {\n                                var sp = sps[i];\n                                context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);\n                            }\n                        }\n                        else {\n                            var _i;\n                            var l;\n                            for (_i = 1, l = filteredPoints.length - 1; _i < l; _i++) {\n                                context.lineTo(filteredPoints[_i].x, filteredPoints[_i].y);\n                            }\n                            context.lineTo(filteredPoints[l].x, filteredPoints[l].y);\n                        }\n                    }\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var points = attrs.points, smooth = attrs.smooth, lineWidth = attrs.lineWidth;\n                    var filteredPoints = _filterPoints(points);\n                    if (smooth) {\n                        var newPoints = [];\n                        var constaint = [[0, 0], [1, 1]];\n                        var sps = Smooth.smooth(filteredPoints, false, constaint);\n                        for (var i = 0, n = sps.length; i < n; i++) {\n                            var sp = sps[i];\n                            if (i === 0) {\n                                newPoints.push([filteredPoints[0].x, filteredPoints[0].y, sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);\n                            }\n                            else {\n                                var lastPoint = sps[i - 1];\n                                newPoints.push([lastPoint[5], lastPoint[6], sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);\n                            }\n                        }\n                        return bbox.getBBoxFromBezierGroup(newPoints, lineWidth);\n                    }\n                    return bbox.getBBoxFromPoints(filteredPoints, lineWidth);\n                };\n                return Polyline;\n            }(Shape);\n            Shape.Polyline = Polyline;\n            module.exports = Polyline;\n            /***/ \n        }),\n        /* 86 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var bbox = __webpack_require__(10);\n            var Arc = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Arc, _Shape);\n                function Arc() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Arc.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canStroke = true;\n                    this._attrs.canFill = true;\n                    this._attrs.type = 'arc';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        r: 0,\n                        startAngle: 0,\n                        endAngle: Math.PI * 2,\n                        clockwise: false,\n                        lineWidth: 1\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, r = attrs.r, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;\n                    context.beginPath();\n                    if (startAngle !== endAngle) {\n                        context.arc(x, y, r, startAngle, endAngle, clockwise);\n                    }\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, r = attrs.r, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;\n                    return bbox.getBBoxFromArc(x, y, r, startAngle, endAngle, clockwise);\n                };\n                return Arc;\n            }(Shape);\n            Shape.Arc = Arc;\n            module.exports = Arc;\n            /***/ \n        }),\n        /* 87 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var bbox = __webpack_require__(10);\n            var Sector = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Sector, _Shape);\n                function Sector() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Sector.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'sector';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        lineWidth: 0,\n                        r: 0,\n                        r0: 0,\n                        startAngle: 0,\n                        endAngle: Math.PI * 2,\n                        clockwise: false\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, startAngle = attrs.startAngle, endAngle = attrs.endAngle, r = attrs.r, r0 = attrs.r0, clockwise = attrs.clockwise;\n                    context.beginPath();\n                    var unitX = Math.cos(startAngle);\n                    var unitY = Math.sin(startAngle);\n                    context.moveTo(unitX * r0 + x, unitY * r0 + y);\n                    context.lineTo(unitX * r + x, unitY * r + y); // 当扇形的角度非常小的时候，就不进行弧线的绘制；或者整个只有1个扇形时，会出现end<0的情况不绘制\n                    if (Math.abs(endAngle - startAngle) > 0.0001 || startAngle === 0 && endAngle < 0) {\n                        context.arc(x, y, r, startAngle, endAngle, clockwise);\n                        context.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);\n                        if (r0 !== 0) {\n                            context.arc(x, y, r0, endAngle, startAngle, !clockwise);\n                        }\n                    }\n                    context.closePath();\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, r = attrs.r, r0 = attrs.r0, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;\n                    var outerBBox = bbox.getBBoxFromArc(x, y, r, startAngle, endAngle, clockwise);\n                    var innerBBox = bbox.getBBoxFromArc(x, y, r0, startAngle, endAngle, clockwise);\n                    return {\n                        minX: Math.min(outerBBox.minX, innerBBox.minX),\n                        minY: Math.min(outerBBox.minY, innerBBox.minY),\n                        maxX: Math.max(outerBBox.maxX, innerBBox.maxX),\n                        maxY: Math.max(outerBBox.maxY, innerBBox.maxY)\n                    };\n                };\n                return Sector;\n            }(Shape);\n            Shape.Sector = Sector;\n            module.exports = Sector;\n            /***/ \n        }),\n        /* 88 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(2);\n            var textWidthCacheCounter = 0;\n            var textWidthCache = {};\n            var TEXT_CACHE_MAX = 5000;\n            var Text = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Text, _Shape);\n                function Text() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Text.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'text';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        lineWidth: 0,\n                        lineCount: 1,\n                        fontSize: 12,\n                        fontFamily: 'sans-serif',\n                        fontStyle: 'normal',\n                        fontWeight: 'normal',\n                        fontVariant: 'normal',\n                        textAlign: 'start',\n                        textBaseline: 'bottom',\n                        lineHeight: null,\n                        textArr: null\n                    };\n                };\n                _proto._getFontStyle = function _getFontStyle() {\n                    var attrs = this._attrs.attrs;\n                    var fontSize = attrs.fontSize, fontFamily = attrs.fontFamily, fontWeight = attrs.fontWeight, fontStyle = attrs.fontStyle, fontVariant = attrs.fontVariant;\n                    return fontStyle + \" \" + fontVariant + \" \" + fontWeight + \" \" + fontSize + \"px \" + fontFamily;\n                };\n                _proto._afterAttrsSet = function _afterAttrsSet() {\n                    var attrs = this._attrs.attrs;\n                    attrs.font = this._getFontStyle();\n                    if (attrs.text) {\n                        var text = attrs.text;\n                        var textArr = null;\n                        var lineCount = 1;\n                        if (Util.isString(text) && text.indexOf('\\n') !== -1) {\n                            textArr = text.split('\\n');\n                            lineCount = textArr.length;\n                        }\n                        attrs.lineCount = lineCount;\n                        attrs.textArr = textArr;\n                    }\n                    this.set('attrs', attrs);\n                };\n                _proto._getTextHeight = function _getTextHeight() {\n                    var attrs = this._attrs.attrs;\n                    if (attrs.height) {\n                        return attrs.height;\n                    }\n                    var lineCount = attrs.lineCount;\n                    var fontSize = attrs.fontSize * 1;\n                    if (lineCount > 1) {\n                        var spaceingY = this._getSpaceingY();\n                        return fontSize * lineCount + spaceingY * (lineCount - 1);\n                    }\n                    return fontSize;\n                };\n                _proto._getSpaceingY = function _getSpaceingY() {\n                    var attrs = this._attrs.attrs;\n                    var lineHeight = attrs.lineHeight;\n                    var fontSize = attrs.fontSize * 1;\n                    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n                };\n                _proto.drawInner = function drawInner(context) {\n                    var self = this;\n                    var attrs = self._attrs.attrs;\n                    var text = attrs.text;\n                    var x = attrs.x;\n                    var y = attrs.y;\n                    if (Util.isNil(text) || isNaN(x) || isNaN(y)) {\n                        // text will be 0\n                        return;\n                    }\n                    var textArr = attrs.textArr;\n                    var fontSize = attrs.fontSize * 1;\n                    var spaceingY = self._getSpaceingY();\n                    if (attrs.rotate) {\n                        // do rotation\n                        context.translate(x, y);\n                        context.rotate(attrs.rotate);\n                        x = 0;\n                        y = 0;\n                    }\n                    var textBaseline = attrs.textBaseline;\n                    var height;\n                    if (textArr) {\n                        height = self._getTextHeight();\n                    }\n                    var subY; // context.beginPath();\n                    if (self.hasFill()) {\n                        var fillOpacity = attrs.fillOpacity;\n                        if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n                            context.globalAlpha = fillOpacity;\n                        }\n                        if (textArr) {\n                            for (var i = 0, len = textArr.length; i < len; i++) {\n                                var subText = textArr[i];\n                                subY = y + i * (spaceingY + fontSize) - height + fontSize; // bottom;\n                                if (textBaseline === 'middle') {\n                                    subY += height - fontSize - (height - fontSize) / 2;\n                                }\n                                if (textBaseline === 'top') {\n                                    subY += height - fontSize;\n                                }\n                                context.fillText(subText, x, subY);\n                            }\n                        }\n                        else {\n                            context.fillText(text, x, y);\n                        }\n                    }\n                    if (self.hasStroke()) {\n                        if (textArr) {\n                            for (var _i = 0, _len = textArr.length; _i < _len; _i++) {\n                                var _subText = textArr[_i];\n                                subY = y + _i * (spaceingY + fontSize) - height + fontSize; // bottom;\n                                if (textBaseline === 'middle') {\n                                    subY += height - fontSize - (height - fontSize) / 2;\n                                }\n                                if (textBaseline === 'top') {\n                                    subY += height - fontSize;\n                                }\n                                context.strokeText(_subText, x, subY);\n                            }\n                        }\n                        else {\n                            context.strokeText(text, x, y);\n                        }\n                    }\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var self = this;\n                    var attrs = self._attrs.attrs;\n                    var x = attrs.x, y = attrs.y, textAlign = attrs.textAlign, textBaseline = attrs.textBaseline;\n                    var width = self._getTextWidth(); // attrs.width\n                    if (!width) {\n                        return {\n                            minX: x,\n                            minY: y,\n                            maxX: x,\n                            maxY: y\n                        };\n                    }\n                    var height = self._getTextHeight(); // attrs.height\n                    var point = {\n                        x: x,\n                        y: y - height\n                    }; // default textAlign: start, textBaseline: bottom\n                    if (textAlign) {\n                        if (textAlign === 'end' || textAlign === 'right') {\n                            point.x -= width;\n                        }\n                        else if (textAlign === 'center') {\n                            point.x -= width / 2;\n                        }\n                    }\n                    if (textBaseline) {\n                        if (textBaseline === 'top') {\n                            point.y += height;\n                        }\n                        else if (textBaseline === 'middle') {\n                            point.y += height / 2;\n                        }\n                    }\n                    return {\n                        minX: point.x,\n                        minY: point.y,\n                        maxX: point.x + width,\n                        maxY: point.y + height\n                    };\n                };\n                _proto._getTextWidth = function _getTextWidth() {\n                    var attrs = this._attrs.attrs;\n                    if (attrs.width) {\n                        return attrs.width;\n                    }\n                    var text = attrs.text;\n                    var context = this.get('context');\n                    if (Util.isNil(text))\n                        return undefined;\n                    var font = attrs.font;\n                    var textArr = attrs.textArr;\n                    var key = text + '' + font;\n                    if (textWidthCache[key]) {\n                        return textWidthCache[key];\n                    }\n                    var width = 0;\n                    if (textArr) {\n                        for (var i = 0, length = textArr.length; i < length; i++) {\n                            var subText = textArr[i];\n                            width = Math.max(width, Util.measureText(subText, font, context).width);\n                        }\n                    }\n                    else {\n                        width = Util.measureText(text, font, context).width;\n                    }\n                    if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n                        textWidthCacheCounter = 0;\n                        textWidthCache = {};\n                    }\n                    textWidthCacheCounter++;\n                    textWidthCache[key] = width;\n                    return width;\n                };\n                return Text;\n            }(Shape);\n            Shape.Text = Text;\n            module.exports = Text;\n            /***/ \n        }),\n        /* 89 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Shape = __webpack_require__(2);\n            var Custom = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Custom, _Shape);\n                function Custom() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Custom.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.createPath = null;\n                    this._attrs.type = 'custom';\n                };\n                _proto.createPath = function createPath(context) {\n                    var createPath = this.get('createPath');\n                    createPath && createPath.call(this, context);\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var calculateBox = this.get('calculateBox');\n                    return calculateBox && calculateBox.call(this);\n                };\n                return Custom;\n            }(Shape);\n            Shape.Custom = Custom;\n            module.exports = Custom;\n            /***/ \n        }),\n        /* 90 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Path = __webpack_require__(42);\n            var Geom = __webpack_require__(6);\n            __webpack_require__(37);\n            var Line = \n            /*#__PURE__*/\n            function (_Path) {\n                _inheritsLoose(Line, _Path);\n                function Line() {\n                    return _Path.apply(this, arguments) || this;\n                }\n                var _proto = Line.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Path.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'line';\n                    cfg.sortable = true;\n                    return cfg;\n                };\n                return Line;\n            }(Path);\n            Geom.Line = Line;\n            module.exports = Line;\n            /***/ \n        }),\n        /* 91 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _assertThisInitialized(self) { if (self === void 0) {\n                throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            } return self; }\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Geom = __webpack_require__(6);\n            var Util = __webpack_require__(0);\n            var SizeMixin = __webpack_require__(43);\n            __webpack_require__(92);\n            var Interval = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Interval, _Geom);\n                var _proto = Interval.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'interval';\n                    cfg.shapeType = 'interval';\n                    cfg.generatePoints = true;\n                    return cfg;\n                };\n                function Interval(cfg) {\n                    var _this;\n                    _this = _Geom.call(this, cfg) || this;\n                    Util.mix(_assertThisInitialized(_this), SizeMixin);\n                    return _this;\n                }\n                _proto.createShapePointsCfg = function createShapePointsCfg(obj) {\n                    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);\n                    cfg.size = this.getNormalizedSize(obj);\n                    return cfg;\n                };\n                _proto.clearInner = function clearInner() {\n                    _Geom.prototype.clearInner.call(this);\n                    this.set('defaultSize', null);\n                };\n                return Interval;\n            }(Geom);\n            Geom.Interval = Interval;\n            module.exports = Interval;\n            /***/ \n        }),\n        /* 92 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(8);\n            var Vector2 = __webpack_require__(3);\n            var Global = __webpack_require__(1);\n            function getRectPoints(cfg) {\n                var x = cfg.x, y = cfg.y, y0 = cfg.y0, size = cfg.size;\n                var ymin = y0;\n                var ymax = y;\n                if (Util.isArray(y)) {\n                    ymax = y[1];\n                    ymin = y[0];\n                }\n                var xmin;\n                var xmax;\n                if (Util.isArray(x)) {\n                    xmin = x[0];\n                    xmax = x[1];\n                }\n                else {\n                    xmin = x - size / 2;\n                    xmax = x + size / 2;\n                }\n                return [{\n                        x: xmin,\n                        y: ymin\n                    }, {\n                        x: xmin,\n                        y: ymax\n                    }, {\n                        x: xmax,\n                        y: ymax\n                    }, {\n                        x: xmax,\n                        y: ymin\n                    }];\n            }\n            function getRectRange(points) {\n                var xValues = [];\n                var yValues = [];\n                for (var i = 0, len = points.length; i < len; i++) {\n                    var point = points[i];\n                    xValues.push(point.x);\n                    yValues.push(point.y);\n                }\n                var xMin = Math.min.apply(null, xValues);\n                var yMin = Math.min.apply(null, yValues);\n                var xMax = Math.max.apply(null, xValues);\n                var yMax = Math.max.apply(null, yValues);\n                return {\n                    x: xMin,\n                    y: yMin,\n                    width: xMax - xMin,\n                    height: yMax - yMin\n                };\n            }\n            var Interval = Shape.registerFactory('interval', {\n                defaultShapeType: 'rect',\n                getDefaultPoints: function getDefaultPoints(cfg) {\n                    return getRectPoints(cfg);\n                }\n            });\n            Shape.registerShape('interval', 'rect', {\n                draw: function draw(cfg, container) {\n                    var points = this.parsePoints(cfg.points);\n                    var style = Util.mix({\n                        fill: cfg.color\n                    }, Global.shape.interval, cfg.style);\n                    if (cfg.isInCircle) {\n                        var newPoints = points.slice(0);\n                        if (this._coord.transposed) {\n                            newPoints = [points[0], points[3], points[2], points[1]];\n                        }\n                        var _cfg$center = cfg.center, x = _cfg$center.x, y = _cfg$center.y;\n                        var v = [1, 0];\n                        var v0 = [newPoints[0].x - x, newPoints[0].y - y];\n                        var v1 = [newPoints[1].x - x, newPoints[1].y - y];\n                        var v2 = [newPoints[2].x - x, newPoints[2].y - y];\n                        var startAngle = Vector2.angleTo(v, v1);\n                        var endAngle = Vector2.angleTo(v, v2);\n                        var r0 = Vector2.length(v0);\n                        var r = Vector2.length(v1);\n                        if (startAngle >= 1.5 * Math.PI) {\n                            startAngle = startAngle - 2 * Math.PI;\n                        }\n                        if (endAngle >= 1.5 * Math.PI) {\n                            endAngle = endAngle - 2 * Math.PI;\n                        }\n                        return container.addShape('Sector', {\n                            className: 'interval',\n                            attrs: Util.mix({\n                                x: x,\n                                y: y,\n                                r: r,\n                                r0: r0,\n                                startAngle: startAngle,\n                                endAngle: endAngle\n                            }, style)\n                        });\n                    }\n                    var rectCfg = getRectRange(points);\n                    return container.addShape('rect', {\n                        className: 'interval',\n                        attrs: Util.mix(rectCfg, style)\n                    });\n                }\n            });\n            module.exports = Interval;\n            /***/ \n        }),\n        /* 93 */\n        /***/ (function (module, exports, __webpack_require__) {\n            module.exports = {\n                Stack: __webpack_require__(94),\n                Dodge: __webpack_require__(96)\n            };\n            /***/ \n        }),\n        /* 94 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Stack = __webpack_require__(95);\n            module.exports = Stack;\n            /***/ \n        }),\n        /* 95 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var isArray = __webpack_require__(13);\n            var isNil = __webpack_require__(9);\n            var Adjust = __webpack_require__(23);\n            var Stack = \n            /*#__PURE__*/\n            function (_Adjust) {\n                _inheritsLoose(Stack, _Adjust);\n                function Stack() {\n                    return _Adjust.apply(this, arguments) || this;\n                }\n                var _proto = Stack.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.xField = null; // 调整对应的 x 方向对应的字段名称\n                    this.yField = null; // 调整对应的 y 方向对应的字段名称\n                };\n                _proto.processAdjust = function processAdjust(dataArray) {\n                    this.processStack(dataArray);\n                };\n                _proto.processStack = function processStack(dataArray) {\n                    var self = this;\n                    var xField = self.xField;\n                    var yField = self.yField;\n                    var count = dataArray.length;\n                    var stackCache = {\n                        positive: {},\n                        negative: {}\n                    }; // 层叠顺序翻转\n                    if (self.reverseOrder) {\n                        dataArray = dataArray.slice(0).reverse();\n                    }\n                    for (var i = 0; i < count; i++) {\n                        var data = dataArray[i];\n                        for (var j = 0, len = data.length; j < len; j++) {\n                            var item = data[j];\n                            var x = item[xField] || 0;\n                            var y = item[yField];\n                            var xkey = x.toString();\n                            y = isArray(y) ? y[1] : y;\n                            if (!isNil(y)) {\n                                var direction = y >= 0 ? 'positive' : 'negative';\n                                if (!stackCache[direction][xkey]) {\n                                    stackCache[direction][xkey] = 0;\n                                }\n                                item[yField] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];\n                                stackCache[direction][xkey] += y;\n                            }\n                        }\n                    }\n                };\n                return Stack;\n            }(Adjust);\n            Adjust.Stack = Stack;\n            module.exports = Stack;\n            /***/ \n        }),\n        /* 96 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Dodge = __webpack_require__(97);\n            module.exports = Dodge;\n            /***/ \n        }),\n        /* 97 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            var Adjust = __webpack_require__(23);\n            var each = __webpack_require__(4);\n            var MARGIN_RATIO = 1 / 2;\n            var DODGE_RATIO = 1 / 2;\n            var Dodge = \n            /*#__PURE__*/\n            function (_Adjust) {\n                _inheritsLoose(Dodge, _Adjust);\n                function Dodge() {\n                    return _Adjust.apply(this, arguments) || this;\n                }\n                var _proto = Dodge.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    /**\n                     * 调整过程中,2个数据的间距\n                     * @type {Number}\n                     */\n                    this.marginRatio = MARGIN_RATIO;\n                    /**\n                     * 调整占单位宽度的比例,例如：占2个分类间距的 1/2\n                     * @type {Number}\n                     */\n                    this.dodgeRatio = DODGE_RATIO;\n                    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整\n                };\n                _proto.getDodgeOffset = function getDodgeOffset(range, index, count) {\n                    var self = this;\n                    var pre = range.pre;\n                    var next = range.next;\n                    var tickLength = next - pre;\n                    var width = tickLength * self.dodgeRatio / count;\n                    var margin = self.marginRatio * width;\n                    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n                    return (pre + next) / 2 + offset;\n                };\n                _proto.processAdjust = function processAdjust(dataArray) {\n                    var self = this;\n                    var count = dataArray.length;\n                    var xField = self.xField;\n                    each(dataArray, function (data, index) {\n                        for (var i = 0, len = data.length; i < len; i++) {\n                            var obj = data[i];\n                            var value = obj[xField];\n                            var range = {\n                                pre: len === 1 ? value - 1 : value - 0.5,\n                                next: len === 1 ? value + 1 : value + 0.5\n                            };\n                            var dodgeValue = self.getDodgeOffset(range, index, count);\n                            obj[xField] = dodgeValue;\n                        }\n                    });\n                };\n                return Dodge;\n            }(Adjust);\n            Adjust.Dodge = Dodge;\n            module.exports = Dodge;\n            /***/ \n        }),\n        /* 98 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Base = __webpack_require__(21);\n            var Vector2 = __webpack_require__(3);\n            var Matrix = __webpack_require__(24);\n            var Polar = \n            /*#__PURE__*/\n            function (_Base) {\n                _inheritsLoose(Polar, _Base);\n                function Polar() {\n                    return _Base.apply(this, arguments) || this;\n                }\n                var _proto = Polar.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'polar';\n                    this.startAngle = -Math.PI / 2;\n                    this.endAngle = Math.PI * 3 / 2;\n                    this.inner = 0;\n                    this.innerRadius = 0; // alias\n                    this.isPolar = true;\n                    this.transposed = false;\n                    this.center = null;\n                    this.radius = null; // relative, 0 ~ 1\n                };\n                _proto.init = function init(start, end) {\n                    var self = this;\n                    var inner = self.inner || self.innerRadius;\n                    var width = Math.abs(end.x - start.x);\n                    var height = Math.abs(end.y - start.y);\n                    var maxRadius;\n                    var center;\n                    if (self.startAngle === -Math.PI && self.endAngle === 0) {\n                        maxRadius = Math.min(width / 2, height);\n                        center = {\n                            x: (start.x + end.x) / 2,\n                            y: start.y\n                        };\n                    }\n                    else {\n                        maxRadius = Math.min(width, height) / 2;\n                        center = {\n                            x: (start.x + end.x) / 2,\n                            y: (start.y + end.y) / 2\n                        };\n                    }\n                    var radius = self.radius;\n                    if (radius > 0 && radius <= 1) {\n                        maxRadius = maxRadius * radius;\n                    }\n                    this.x = {\n                        start: self.startAngle,\n                        end: self.endAngle\n                    };\n                    this.y = {\n                        start: maxRadius * inner,\n                        end: maxRadius\n                    };\n                    this.center = center;\n                    this.circleRadius = maxRadius; // the radius value in px\n                };\n                _proto.convertPoint = function convertPoint(point) {\n                    var self = this;\n                    var center = self.center;\n                    var transposed = self.transposed;\n                    var xDim = transposed ? 'y' : 'x';\n                    var yDim = transposed ? 'x' : 'y';\n                    var x = self.x;\n                    var y = self.y;\n                    var angle = x.start + (x.end - x.start) * point[xDim];\n                    var radius = y.start + (y.end - y.start) * point[yDim];\n                    return {\n                        x: center.x + Math.cos(angle) * radius,\n                        y: center.y + Math.sin(angle) * radius\n                    };\n                };\n                _proto.invertPoint = function invertPoint(point) {\n                    var self = this;\n                    var center = self.center, transposed = self.transposed, x = self.x, y = self.y;\n                    var xDim = transposed ? 'y' : 'x';\n                    var yDim = transposed ? 'x' : 'y';\n                    var m = [1, 0, 0, 1, 0, 0];\n                    Matrix.rotate(m, m, x.start);\n                    var startV = [1, 0];\n                    Vector2.transformMat2d(startV, startV, m);\n                    startV = [startV[0], startV[1]];\n                    var pointV = [point.x - center.x, point.y - center.y];\n                    if (Vector2.zero(pointV)) {\n                        return {\n                            x: 0,\n                            y: 0\n                        };\n                    }\n                    var theta = Vector2.angleTo(startV, pointV, x.end < x.start);\n                    if (Math.abs(theta - Math.PI * 2) < 0.001) {\n                        theta = 0;\n                    }\n                    var l = Vector2.length(pointV);\n                    var percentX = theta / (x.end - x.start);\n                    percentX = x.end - x.start > 0 ? percentX : -percentX;\n                    var percentY = (l - y.start) / (y.end - y.start);\n                    var rst = {};\n                    rst[xDim] = percentX;\n                    rst[yDim] = percentY;\n                    return rst;\n                };\n                return Polar;\n            }(Base);\n            Base.Polar = Polar;\n            module.exports = Polar;\n            /***/ \n        }),\n        /* 99 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * @fileOverview 提取公共代码到util方法\n             * @author dxq613@gmail.com\n             */\n            var isString = __webpack_require__(18);\n            var isDate = __webpack_require__(118);\n            module.exports = {\n                toTimeStamp: function toTimeStamp(value) {\n                    if (isString(value)) {\n                        if (value.indexOf('T') > 0) {\n                            value = new Date(value).getTime();\n                        }\n                        else {\n                            value = new Date(value.replace(/-/ig, '/')).getTime();\n                        }\n                    }\n                    if (isDate(value)) {\n                        value = value.getTime();\n                    }\n                    return value;\n                }\n            };\n            /***/ \n        }),\n        /* 100 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            /**\n             * marker shapes，used for tooltip and legend\n             */\n            var Util = __webpack_require__(0);\n            var _require = __webpack_require__(5), Shape = _require.Shape;\n            var SYMBOLS = {\n                circle: function circle(x, y, r, ctx) {\n                    ctx.arc(x, y, r, 0, Math.PI * 2, false);\n                },\n                square: function square(x, y, r, ctx) {\n                    ctx.moveTo(x - r, y - r);\n                    ctx.lineTo(x + r, y - r);\n                    ctx.lineTo(x + r, y + r);\n                    ctx.lineTo(x - r, y + r);\n                    ctx.closePath();\n                }\n            };\n            var Marker = \n            /*#__PURE__*/\n            function (_Shape) {\n                _inheritsLoose(Marker, _Shape);\n                function Marker() {\n                    return _Shape.apply(this, arguments) || this;\n                }\n                var _proto = Marker.prototype;\n                _proto._initProperties = function _initProperties() {\n                    _Shape.prototype._initProperties.call(this);\n                    this._attrs.canFill = true;\n                    this._attrs.canStroke = true;\n                    this._attrs.type = 'marker';\n                };\n                _proto.getDefaultAttrs = function getDefaultAttrs() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        lineWidth: 0\n                    };\n                };\n                _proto.createPath = function createPath(context) {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, radius = attrs.radius;\n                    var symbol = attrs.symbol || 'circle';\n                    var method;\n                    if (Util.isFunction(symbol)) {\n                        method = symbol;\n                    }\n                    else {\n                        method = SYMBOLS[symbol];\n                    }\n                    context.beginPath();\n                    method(x, y, radius, context, this);\n                };\n                _proto.calculateBox = function calculateBox() {\n                    var attrs = this.get('attrs');\n                    var x = attrs.x, y = attrs.y, radius = attrs.radius;\n                    return {\n                        minX: x - radius,\n                        minY: y - radius,\n                        maxX: x + radius,\n                        maxY: y + radius\n                    };\n                };\n                return Marker;\n            }(Shape);\n            module.exports = Marker;\n            /***/ \n        }),\n        /* 101 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var _require = __webpack_require__(5), Group = _require.Group;\n            var Marker = __webpack_require__(100);\n            var MARKER_RADIUS = 3;\n            var List = \n            /*#__PURE__*/\n            function () {\n                var _proto = List.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {\n                        showTitle: false,\n                        /**\n                         * title string\n                         * @type {?String}\n                         */\n                        title: null,\n                        /**\n                         * items array\n                         * @type {?Array}\n                         */\n                        items: null,\n                        /**\n                         * offset between title and items\n                         * @type {Number}\n                         */\n                        titleGap: 12,\n                        /**\n                         * offset between each item\n                         * @type {Number}\n                         */\n                        itemGap: 10,\n                        /**\n                         * the offset between each item in vertical direaction\n                         * @type {Number}\n                         */\n                        itemMarginBottom: 12,\n                        /**\n                         * the formatter for item text\n                         * @type {[type]}\n                         */\n                        itemFormatter: null,\n                        itemWidth: null,\n                        /**\n                         * offset between marker and text\n                         * @type {Number}\n                         */\n                        wordSpace: 6,\n                        x: 0,\n                        y: 0,\n                        layout: 'horizontal',\n                        /**\n                         * the join string of `name` and `value`\n                         * @type {String}\n                         */\n                        joinString: ': '\n                    };\n                };\n                function List(cfg) {\n                    Util.deepMix(this, this.getDefaultCfg(), cfg);\n                    this._init();\n                    this._renderTitle();\n                    this._renderItems();\n                }\n                _proto._init = function _init() {\n                    var container = new Group({\n                        zIndex: this.zIndex || 0\n                    });\n                    this.container = container;\n                    var wrapper = container.addGroup();\n                    this.wrapper = wrapper;\n                    var itemsGroup = wrapper.addGroup({\n                        className: 'itemsGroup'\n                    });\n                    this.itemsGroup = itemsGroup;\n                    if (this.parent) {\n                        this.parent.add(container);\n                    }\n                };\n                _proto._renderTitle = function _renderTitle(title) {\n                    title = title || this.title;\n                    var titleShape = this.titleShape;\n                    var titleHeight = 0;\n                    if (this.showTitle && title) {\n                        if (titleShape && !titleShape.get('destroyed')) {\n                            titleShape.attr('text', title);\n                        }\n                        else {\n                            var wrapper = this.wrapper, titleStyle = this.titleStyle;\n                            titleShape = wrapper.addShape('text', {\n                                className: 'title',\n                                attrs: Util.mix({\n                                    x: 0,\n                                    y: 0,\n                                    text: title\n                                }, titleStyle)\n                            });\n                            this.titleShape = titleShape;\n                        }\n                        titleHeight = titleShape.getBBox().height + this.titleGap;\n                    }\n                    this._titleHeight = titleHeight;\n                };\n                _proto._renderItems = function _renderItems(items) {\n                    var self = this;\n                    items = items || self.items;\n                    if (!items) {\n                        return;\n                    }\n                    if (self.reversed) {\n                        items.reverse();\n                    }\n                    Util.each(items, function (item, index) {\n                        self._addItem(item, index);\n                    });\n                    if (items.length > 1) {\n                        this._adjustItems();\n                    }\n                    this._renderBackground();\n                };\n                _proto._renderBackground = function _renderBackground() {\n                    var background = this.background;\n                    if (background) {\n                        var container = this.container;\n                        var wrapper = this.wrapper;\n                        var _wrapper$getBBox = wrapper.getBBox(), minX = _wrapper$getBBox.minX, minY = _wrapper$getBBox.minY, width = _wrapper$getBBox.width, height = _wrapper$getBBox.height;\n                        var padding = background.padding || [0, 0, 0, 0];\n                        padding = Util.parsePadding(padding);\n                        var attrs = Util.mix({\n                            x: minX - padding[3],\n                            y: minY - padding[0],\n                            width: width + padding[1] + padding[3],\n                            height: height + padding[0] + padding[2]\n                        }, background);\n                        var backShape = this.backShape;\n                        if (backShape) {\n                            backShape.attr(attrs);\n                        }\n                        else {\n                            backShape = container.addShape('Rect', {\n                                zIndex: -1,\n                                attrs: attrs\n                            });\n                        }\n                        this.backShape = backShape;\n                        container.sort();\n                    }\n                };\n                _proto._addItem = function _addItem(item) {\n                    var itemsGroup = this.itemsGroup;\n                    var itemGroup = itemsGroup.addGroup({\n                        name: item.name,\n                        value: item.value,\n                        dataValue: item.dataValue,\n                        checked: item.checked\n                    });\n                    var unCheckStyle = this.unCheckStyle, unCheckColor = this.unCheckColor, nameStyle = this.nameStyle, valueStyle = this.valueStyle, wordSpace = this.wordSpace;\n                    var marker = item.marker, value = item.value;\n                    var startX = 0;\n                    if (unCheckColor) {\n                        unCheckStyle.fill = unCheckColor;\n                    }\n                    if (marker) {\n                        var radius = marker.radius || MARKER_RADIUS;\n                        var markerAttrs = Util.mix({\n                            x: radius,\n                            y: this._titleHeight\n                        }, marker);\n                        if (item.checked === false) {\n                            Util.mix(markerAttrs, unCheckStyle);\n                        }\n                        var markerShape = new Marker({\n                            className: 'item-marker',\n                            attrs: markerAttrs\n                        });\n                        itemGroup.add(markerShape);\n                        startX += markerShape.getBBox().width + wordSpace;\n                    }\n                    var nameText;\n                    var name = item.name;\n                    if (name) {\n                        var joinString = this.joinString || '';\n                        name = value ? name + joinString : name;\n                        nameText = itemGroup.addShape('text', {\n                            className: 'name',\n                            attrs: Util.mix({\n                                x: startX,\n                                y: this._titleHeight,\n                                text: this._formatItemValue(name)\n                            }, nameStyle, item.checked === false ? unCheckStyle : null)\n                        });\n                    }\n                    if (value) {\n                        var valueX = startX;\n                        if (nameText) {\n                            valueX += nameText.getBBox().width;\n                        }\n                        itemGroup.addShape('text', {\n                            className: 'value',\n                            attrs: Util.mix({\n                                x: valueX,\n                                y: this._titleHeight,\n                                text: value\n                            }, valueStyle, item.checked === false ? unCheckStyle : null)\n                        });\n                    }\n                    return itemGroup;\n                };\n                _proto._formatItemValue = function _formatItemValue(value) {\n                    var formatter = this.itemFormatter;\n                    if (formatter) {\n                        value = formatter.call(this, value);\n                    }\n                    return value;\n                };\n                _proto._getMaxItemWidth = function _getMaxItemWidth() {\n                    var width;\n                    var itemWidth = this.itemWidth;\n                    if (Util.isNumber(itemWidth) || Util.isNil(itemWidth)) {\n                        return itemWidth;\n                    }\n                    if (itemWidth === 'auto') {\n                        var itemsGroup = this.itemsGroup;\n                        var children = itemsGroup.get('children');\n                        var count = children.length;\n                        var maxItemWidth = 0;\n                        for (var i = 0; i < count; i++) {\n                            var _children$i$getBBox = children[i].getBBox(), _width = _children$i$getBBox.width;\n                            maxItemWidth = Math.max(maxItemWidth, _width);\n                        }\n                        var maxLength = this.maxLength;\n                        var itemGap = this.itemGap;\n                        var twoAvgWidth = (maxLength - itemGap) / 2;\n                        var threeAvgWidth = (maxLength - itemGap * 2) / 3;\n                        if (count === 2) {\n                            width = Math.max(maxItemWidth, twoAvgWidth);\n                        }\n                        else {\n                            // 1. max <= 3Avg, 3Avg\n                            // 2. 3Avg < max && max < 2avg, 2avg\n                            // 3. max > 2avg, max, one column\n                            if (maxItemWidth <= threeAvgWidth) {\n                                width = threeAvgWidth;\n                            }\n                            else if (maxItemWidth <= twoAvgWidth) {\n                                width = twoAvgWidth;\n                            }\n                            else {\n                                width = maxItemWidth;\n                            }\n                        }\n                        return width;\n                    }\n                };\n                _proto._adjustHorizontal = function _adjustHorizontal() {\n                    var maxLength = this.maxLength, itemsGroup = this.itemsGroup;\n                    var children = itemsGroup.get('children');\n                    var itemGap = this.itemGap, itemMarginBottom = this.itemMarginBottom;\n                    var titleHeight = this._titleHeight;\n                    var row = 0;\n                    var rowWidth = 0;\n                    var width;\n                    var height;\n                    var itemWidth = this._getMaxItemWidth();\n                    var legendHitBoxes = [];\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        var box = child.getBBox();\n                        var childHeight = box.height;\n                        var childWidth = box.width;\n                        width = itemWidth || childWidth;\n                        height = childHeight + itemMarginBottom;\n                        if (width - (maxLength - rowWidth) > 0.0001) {\n                            row++;\n                            rowWidth = 0;\n                        }\n                        child.moveTo(rowWidth, row * height);\n                        legendHitBoxes.push({\n                            x: rowWidth,\n                            y: row * height + titleHeight - childHeight / 2,\n                            width: childWidth * 1.375,\n                            height: childHeight * 1.375\n                        });\n                        rowWidth += width + itemGap;\n                    }\n                    this.legendHitBoxes = legendHitBoxes;\n                    return;\n                };\n                _proto._adjustVertical = function _adjustVertical() {\n                    var maxLength = this.maxLength, itemsGroup = this.itemsGroup;\n                    var itemGap = this.itemGap, itemMarginBottom = this.itemMarginBottom, itemWidth = this.itemWidth;\n                    var titleHeight = this._titleHeight;\n                    var children = itemsGroup.get('children');\n                    var colHeight = 0;\n                    var width;\n                    var height;\n                    var maxItemWidth = 0;\n                    var totalWidth = 0;\n                    var legendHitBoxes = [];\n                    for (var i = 0, length = children.length; i < length; i++) {\n                        var child = children[i];\n                        var bbox = child.getBBox();\n                        width = bbox.width;\n                        height = bbox.height;\n                        if (Util.isNumber(itemWidth)) {\n                            maxItemWidth = itemWidth + itemGap;\n                        }\n                        else if (width > maxItemWidth) {\n                            maxItemWidth = width + itemGap;\n                        }\n                        if (maxLength - colHeight < height) {\n                            colHeight = 0;\n                            totalWidth += maxItemWidth;\n                            child.moveTo(totalWidth, 0);\n                            legendHitBoxes.push({\n                                x: totalWidth,\n                                y: titleHeight - height / 2,\n                                width: width * 1.375,\n                                height: height * 1.375\n                            });\n                        }\n                        else {\n                            child.moveTo(totalWidth, colHeight);\n                            legendHitBoxes.push({\n                                x: totalWidth,\n                                y: colHeight - height / 2 + titleHeight,\n                                width: width * 1.375,\n                                height: height * 1.375\n                            });\n                        }\n                        colHeight += height + itemMarginBottom;\n                    }\n                    this.legendHitBoxes = legendHitBoxes;\n                    return;\n                };\n                _proto._adjustItems = function _adjustItems() {\n                    var layout = this.layout;\n                    if (layout === 'horizontal') {\n                        this._adjustHorizontal();\n                    }\n                    else {\n                        this._adjustVertical();\n                    }\n                };\n                _proto.moveTo = function moveTo(x, y) {\n                    this.x = x;\n                    this.y = y;\n                    var container = this.container;\n                    container && container.moveTo(x, y);\n                    return this;\n                };\n                _proto.setItems = function setItems(items) {\n                    this.clearItems();\n                    this._renderItems(items);\n                };\n                _proto.setTitle = function setTitle(title) {\n                    this._renderTitle(title);\n                };\n                _proto.clearItems = function clearItems() {\n                    var itemsGroup = this.itemsGroup;\n                    itemsGroup.clear();\n                };\n                _proto.getWidth = function getWidth() {\n                    var container = this.container;\n                    var bbox = container.getBBox();\n                    return bbox.width;\n                };\n                _proto.getHeight = function getHeight() {\n                    var container = this.container;\n                    var bbox = container.getBBox();\n                    return bbox.height;\n                };\n                _proto.show = function show() {\n                    var container = this.container;\n                    container.show();\n                };\n                _proto.hide = function hide() {\n                    var container = this.container;\n                    container.hide();\n                };\n                _proto.clear = function clear() {\n                    var container = this.container;\n                    container.clear();\n                    container.remove(true);\n                };\n                return List;\n            }();\n            module.exports = List;\n            /***/ \n        }),\n        /* 102 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Animate configuration and register\n             * @author sima.zhang1990@gmail.com\n             */\n            var Util = __webpack_require__(0);\n            var defaultAnimationCfg = {\n                appear: {\n                    duration: 450,\n                    easing: 'quadraticOut'\n                },\n                // 'appear' animation options\n                update: {\n                    duration: 300,\n                    easing: 'quadraticOut'\n                },\n                // 'update' animation options\n                enter: {\n                    duration: 300,\n                    easing: 'quadraticOut'\n                },\n                // 'enter' animation options\n                leave: {\n                    duration: 350,\n                    easing: 'quadraticIn' // 'leave' animation options\n                }\n            };\n            var Animate = {\n                defaultCfg: {},\n                Action: {},\n                getAnimation: function getAnimation(geomType, coord, animationType) {\n                    var geomAnimateCfg = this.defaultCfg[geomType];\n                    if (geomAnimateCfg) {\n                        var animation = geomAnimateCfg[animationType];\n                        if (Util.isFunction(animation)) {\n                            return animation(coord);\n                        }\n                    }\n                    return false;\n                },\n                getAnimateCfg: function getAnimateCfg(geomType, animationType) {\n                    var defaultCfg = defaultAnimationCfg[animationType];\n                    var geomConfig = this.defaultCfg[geomType];\n                    if (geomConfig && geomConfig.cfg && geomConfig.cfg[animationType]) {\n                        return Util.deepMix({}, defaultCfg, geomConfig.cfg[animationType]);\n                    }\n                    return defaultCfg;\n                },\n                registerAnimation: function registerAnimation(animationName, animationFun) {\n                    if (!this.Action) {\n                        this.Action = {};\n                    }\n                    this.Action[animationName] = animationFun;\n                }\n            };\n            module.exports = Animate;\n            /***/ \n        }),\n        /* 103 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Utility\n             * @author sima.zhang1990@gmail.com\n             */\n            var _require = __webpack_require__(5), Matrix = _require.Matrix;\n            var Util = __webpack_require__(0);\n            var Helpers = {\n                getCoordInfo: function getCoordInfo(coord) {\n                    var start = coord.start;\n                    var end = coord.end;\n                    return {\n                        start: start,\n                        end: end,\n                        width: end.x - start.x,\n                        height: Math.abs(end.y - start.y)\n                    };\n                },\n                getScaledMatrix: function getScaledMatrix(shape, v, direct) {\n                    var scaledMatrix;\n                    shape.apply(v);\n                    var x = v[0];\n                    var y = v[1];\n                    if (direct === 'x') {\n                        shape.transform([['t', x, y], ['s', 0.01, 1], ['t', -x, -y]]);\n                        var matrix = shape.getMatrix();\n                        scaledMatrix = Matrix.transform(matrix, [['t', x, y], ['s', 100, 1], ['t', -x, -y]]);\n                    }\n                    else if (direct === 'y') {\n                        shape.transform([['t', x, y], ['s', 1, 0.01], ['t', -x, -y]]);\n                        var _matrix = shape.getMatrix();\n                        scaledMatrix = Matrix.transform(_matrix, [['t', x, y], ['s', 1, 100], ['t', -x, -y]]);\n                    }\n                    else if (direct === 'xy') {\n                        shape.transform([['t', x, y], ['s', 0.01, 0.01], ['t', -x, -y]]);\n                        var _matrix2 = shape.getMatrix();\n                        scaledMatrix = Matrix.transform(_matrix2, [['t', x, y], ['s', 100, 100], ['t', -x, -y]]);\n                    }\n                    return scaledMatrix;\n                },\n                getAnimateParam: function getAnimateParam(animateCfg, index, id) {\n                    var result = {};\n                    if (animateCfg.delay) {\n                        result.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;\n                    }\n                    result.easing = animateCfg.easing;\n                    result.duration = animateCfg.duration;\n                    result.delay = animateCfg.delay;\n                    return result;\n                },\n                doAnimation: function doAnimation(shape, endState, animateCfg, callback) {\n                    var id = shape._id;\n                    var index = shape.get('index');\n                    var _Helpers$getAnimatePa = Helpers.getAnimateParam(animateCfg, index, id), easing = _Helpers$getAnimatePa.easing, delay = _Helpers$getAnimatePa.delay, duration = _Helpers$getAnimatePa.duration;\n                    var anim = shape.animate().to({\n                        attrs: endState,\n                        duration: duration,\n                        delay: delay,\n                        easing: easing\n                    });\n                    if (callback) {\n                        anim.onEnd(function () {\n                            callback();\n                        });\n                    }\n                }\n            };\n            module.exports = Helpers;\n            /***/ \n        }),\n        /* 104 */ ,\n        /* 105 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Geom = __webpack_require__(6);\n            __webpack_require__(106);\n            __webpack_require__(42);\n            __webpack_require__(90);\n            __webpack_require__(108);\n            __webpack_require__(91);\n            __webpack_require__(110);\n            __webpack_require__(112);\n            module.exports = Geom;\n            /***/ \n        }),\n        /* 106 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Geom = __webpack_require__(6);\n            __webpack_require__(107);\n            var Point = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Point, _Geom);\n                function Point() {\n                    return _Geom.apply(this, arguments) || this;\n                }\n                var _proto = Point.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'point';\n                    cfg.shapeType = 'point';\n                    cfg.generatePoints = true;\n                    return cfg;\n                };\n                _proto.draw = function draw(data, shapeFactory) {\n                    var self = this;\n                    var container = self.get('container');\n                    Util.each(data, function (obj) {\n                        var shape = obj.shape;\n                        var cfg = self.getDrawCfg(obj);\n                        if (Util.isArray(obj.y)) {\n                            var hasStack = self.hasAdjust('stack');\n                            Util.each(obj.y, function (y, idx) {\n                                cfg.y = y;\n                                if (!hasStack || idx !== 0) {\n                                    self.drawShape(shape, obj, cfg, container, shapeFactory);\n                                }\n                            });\n                        }\n                        else if (!Util.isNil(obj.y)) {\n                            self.drawShape(shape, obj, cfg, container, shapeFactory);\n                        }\n                    });\n                };\n                return Point;\n            }(Geom);\n            Geom.Point = Point;\n            module.exports = Point;\n            /***/ \n        }),\n        /* 107 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Global = __webpack_require__(1);\n            var ShapeUtil = __webpack_require__(19);\n            var Shape = __webpack_require__(8);\n            var SHAPES = ['circle', 'hollowCircle', 'rect'];\n            var Point = Shape.registerFactory('point', {\n                defaultShapeType: 'circle',\n                getDefaultPoints: function getDefaultPoints(pointInfo) {\n                    return ShapeUtil.splitPoints(pointInfo);\n                }\n            });\n            function getPointsCfg(cfg) {\n                var style = {\n                    lineWidth: 0,\n                    stroke: cfg.color,\n                    fill: cfg.color\n                };\n                if (cfg.size) {\n                    style.size = cfg.size;\n                }\n                Util.mix(style, cfg.style);\n                return Util.mix({}, Global.shape.point, style);\n            }\n            function drawShape(cfg, container, shape) {\n                if (cfg.size === 0)\n                    return;\n                var pointCfg = getPointsCfg(cfg);\n                var size = pointCfg.r || pointCfg.size;\n                var x = cfg.x;\n                var y = !Util.isArray(cfg.y) ? [cfg.y] : cfg.y;\n                if (shape === 'hollowCircle') {\n                    pointCfg.lineWidth = 1;\n                    pointCfg.fill = null;\n                }\n                for (var i = 0, len = y.length; i < len; i++) {\n                    if (shape === 'rect') {\n                        return container.addShape('Rect', {\n                            className: 'point',\n                            attrs: Util.mix({\n                                x: x - size,\n                                y: y[i] - size,\n                                width: size * 2,\n                                height: size * 2\n                            }, pointCfg)\n                        });\n                    }\n                    return container.addShape('Circle', {\n                        className: 'point',\n                        attrs: Util.mix({\n                            x: x,\n                            y: y[i],\n                            r: size\n                        }, pointCfg)\n                    });\n                }\n            }\n            Util.each(SHAPES, function (shapeType) {\n                Shape.registerShape('point', shapeType, {\n                    draw: function draw(cfg, container) {\n                        return drawShape(cfg, container, shapeType);\n                    }\n                });\n            });\n            module.exports = Point;\n            /***/ \n        }),\n        /* 108 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            /**\n             * @fileOverview area geometry\n             * @author dxq613 @gmail.com\n             * @author sima.zhang1990@gmail.com\n             */\n            var Geom = __webpack_require__(6);\n            var ShapeUtil = __webpack_require__(19);\n            var Util = __webpack_require__(0);\n            __webpack_require__(109);\n            var Area = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Area, _Geom);\n                function Area() {\n                    return _Geom.apply(this, arguments) || this;\n                }\n                var _proto = Area.prototype;\n                /**\n                 * get the default configuration\n                 * @protected\n                 * @return {Object} return the result\n                 */\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'area';\n                    cfg.shapeType = 'area';\n                    cfg.generatePoints = true;\n                    cfg.sortable = true;\n                    return cfg;\n                };\n                _proto.draw = function draw(data, shapeFactory) {\n                    var self = this;\n                    var container = self.get('container');\n                    var cfg = this.getDrawCfg(data[0]);\n                    var yScale = self.getYScale();\n                    var connectNulls = self.get('connectNulls');\n                    var splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);\n                    cfg.origin = data;\n                    Util.each(splitArray, function (subData, splitedIndex) {\n                        cfg.splitedIndex = splitedIndex;\n                        var points = subData.map(function (obj) {\n                            return obj.points;\n                        });\n                        cfg.points = points;\n                        self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);\n                    });\n                };\n                return Area;\n            }(Geom);\n            Geom.Area = Area;\n            module.exports = Area;\n            /***/ \n        }),\n        /* 109 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Shape = __webpack_require__(8);\n            var Smooth = __webpack_require__(41);\n            var bbox = __webpack_require__(10);\n            var Global = __webpack_require__(1);\n            function equals(v1, v2) {\n                return Math.abs(v1 - v2) < 0.00001;\n            }\n            function notEmpty(value) {\n                return !isNaN(value) && !Util.isNil(value);\n            }\n            function filterPoints(points) {\n                var filteredPoints = []; // filter the point which x or y is NaN\n                for (var i = 0, len = points.length; i < len; i++) {\n                    var point = points[i];\n                    if (notEmpty(point.x) && notEmpty(point.y)) {\n                        filteredPoints.push(point);\n                    }\n                }\n                return filteredPoints;\n            }\n            function equalsCenter(points, center) {\n                var eqls = true;\n                Util.each(points, function (point) {\n                    if (!equals(point.x, center.x) || !equals(point.y, center.y)) {\n                        eqls = false;\n                        return false;\n                    }\n                });\n                return eqls;\n            }\n            function drawRectShape(topPoints, bottomPoints, container, style, isSmooth) {\n                var shape;\n                var points = topPoints.concat(bottomPoints);\n                if (isSmooth) {\n                    shape = container.addShape('Custom', {\n                        className: 'area',\n                        attrs: Util.mix({\n                            points: points\n                        }, style),\n                        createPath: function createPath(context) {\n                            var constaint = [[0, 0], [1, 1]];\n                            var points = filterPoints(this._attrs.attrs.points);\n                            var pointsLen = points.length;\n                            var topPoints = points.slice(0, pointsLen / 2);\n                            var bottomPoints = points.slice(pointsLen / 2, pointsLen);\n                            var topSps = Smooth.smooth(topPoints, false, constaint);\n                            context.beginPath();\n                            context.moveTo(topPoints[0].x, topPoints[0].y);\n                            for (var i = 0, n = topSps.length; i < n; i++) {\n                                var sp = topSps[i];\n                                context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);\n                            }\n                            if (bottomPoints.length) {\n                                var bottomSps = Smooth.smooth(bottomPoints, false, constaint);\n                                context.lineTo(bottomPoints[0].x, bottomPoints[0].y);\n                                for (var _i = 0, _n = bottomSps.length; _i < _n; _i++) {\n                                    var _sp = bottomSps[_i];\n                                    context.bezierCurveTo(_sp[1], _sp[2], _sp[3], _sp[4], _sp[5], _sp[6]);\n                                }\n                            }\n                            context.closePath();\n                        },\n                        calculateBox: function calculateBox() {\n                            var points = filterPoints(this._attrs.attrs.points);\n                            return bbox.getBBoxFromPoints(points);\n                        }\n                    });\n                }\n                else {\n                    shape = container.addShape('Polyline', {\n                        className: 'area',\n                        attrs: Util.mix({\n                            points: points\n                        }, style)\n                    });\n                }\n                return shape;\n            }\n            function drawShape(cfg, container, isSmooth) {\n                var self = this;\n                var points = cfg.points;\n                var topPoints = [];\n                var bottomPoints = [];\n                Util.each(points, function (point) {\n                    bottomPoints.push(point[0]);\n                    topPoints.push(point[1]);\n                });\n                var style = Util.mix({\n                    fillStyle: cfg.color\n                }, Global.shape.area, cfg.style);\n                bottomPoints.reverse();\n                topPoints = self.parsePoints(topPoints);\n                bottomPoints = self.parsePoints(bottomPoints);\n                if (cfg.isInCircle) {\n                    topPoints.push(topPoints[0]);\n                    bottomPoints.unshift(bottomPoints[bottomPoints.length - 1]);\n                    if (equalsCenter(bottomPoints, cfg.center)) {\n                        bottomPoints = [];\n                    }\n                }\n                return drawRectShape(topPoints, bottomPoints, container, style, isSmooth);\n            }\n            var Area = Shape.registerFactory('area', {\n                defaultShapeType: 'area',\n                getDefaultPoints: function getDefaultPoints(obj) {\n                    var x = obj.x;\n                    var y = obj.y;\n                    var y0 = obj.y0;\n                    y = Util.isArray(y) ? y : [y0, y];\n                    var points = [];\n                    points.push({\n                        x: x,\n                        y: y[0]\n                    }, {\n                        x: x,\n                        y: y[1]\n                    });\n                    return points;\n                }\n            });\n            var SHAPES = ['area', 'smooth'];\n            Util.each(SHAPES, function (shapeType) {\n                Shape.registerShape('area', shapeType, {\n                    draw: function draw(cfg, container) {\n                        var smooth = shapeType === 'smooth';\n                        return drawShape.call(this, cfg, container, smooth);\n                    }\n                });\n            });\n            module.exports = Area;\n            /***/ \n        }),\n        /* 110 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Geom = __webpack_require__(6);\n            var Util = __webpack_require__(0);\n            __webpack_require__(111);\n            var Polygon = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Polygon, _Geom);\n                function Polygon() {\n                    return _Geom.apply(this, arguments) || this;\n                }\n                var _proto = Polygon.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'polygon';\n                    cfg.shapeType = 'polygon';\n                    cfg.generatePoints = true;\n                    return cfg;\n                };\n                _proto.createShapePointsCfg = function createShapePointsCfg(obj) {\n                    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);\n                    var self = this;\n                    var x = cfg.x;\n                    var y = cfg.y;\n                    var temp;\n                    if (!(Util.isArray(x) && Util.isArray(y))) {\n                        var xScale = self.getXScale();\n                        var yScale = self.getYScale();\n                        var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;\n                        var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;\n                        var xOffset = 0.5 * 1 / xCount;\n                        var yOffset = 0.5 * 1 / yCount;\n                        if (xScale.isCategory && yScale.isCategory) {\n                            x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n                            y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n                        }\n                        else if (Util.isArray(x)) {\n                            temp = x;\n                            x = [temp[0], temp[0], temp[1], temp[1]];\n                            y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n                        }\n                        else if (Util.isArray(y)) {\n                            temp = y;\n                            y = [temp[0], temp[1], temp[1], temp[0]];\n                            x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n                        }\n                        cfg.x = x;\n                        cfg.y = y;\n                    }\n                    return cfg;\n                };\n                return Polygon;\n            }(Geom);\n            Geom.Polygon = Polygon;\n            module.exports = Polygon;\n            /***/ \n        }),\n        /* 111 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Shape = __webpack_require__(8);\n            var Util = __webpack_require__(0);\n            var Polygon = Shape.registerFactory('polygon', {\n                defaultShapeType: 'polygon',\n                getDefaultPoints: function getDefaultPoints(pointInfo) {\n                    var points = [];\n                    var x = pointInfo.x, y = pointInfo.y;\n                    for (var i = 0, len = x.length; i < len; i++) {\n                        points.push({\n                            x: x[i],\n                            y: y[i]\n                        });\n                    }\n                    return points;\n                }\n            });\n            Shape.registerShape('polygon', 'polygon', {\n                draw: function draw(cfg, container) {\n                    var points = this.parsePoints(cfg.points);\n                    var style = Util.mix({\n                        fill: cfg.color,\n                        points: points\n                    }, cfg.style);\n                    return container.addShape('Polygon', {\n                        className: 'polygon',\n                        attrs: style\n                    });\n                }\n            });\n            module.exports = Polygon;\n            /***/ \n        }),\n        /* 112 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _assertThisInitialized(self) { if (self === void 0) {\n                throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            } return self; }\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Geom = __webpack_require__(6);\n            var Util = __webpack_require__(0);\n            var SizeMixin = __webpack_require__(43);\n            __webpack_require__(113);\n            var Schema = \n            /*#__PURE__*/\n            function (_Geom) {\n                _inheritsLoose(Schema, _Geom);\n                var _proto = Schema.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    var cfg = _Geom.prototype.getDefaultCfg.call(this);\n                    cfg.type = 'schema';\n                    cfg.shapeType = 'schema';\n                    cfg.generatePoints = true;\n                    return cfg;\n                };\n                function Schema(cfg) {\n                    var _this;\n                    _this = _Geom.call(this, cfg) || this;\n                    Util.mix(_assertThisInitialized(_this), SizeMixin);\n                    return _this;\n                }\n                _proto.createShapePointsCfg = function createShapePointsCfg(obj) {\n                    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);\n                    cfg.size = this.getNormalizedSize(obj);\n                    return cfg;\n                };\n                _proto.clearInner = function clearInner() {\n                    _Geom.prototype.clearInner.call(this);\n                    this.set('defaultSize', null);\n                };\n                return Schema;\n            }(Geom);\n            Geom.Schema = Schema;\n            module.exports = Schema;\n            /***/ \n        }),\n        /* 113 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Shape = __webpack_require__(8);\n            var Util = __webpack_require__(0);\n            function _sortValue(value) {\n                var sorted = value.sort(function (a, b) {\n                    return a < b ? 1 : -1;\n                });\n                var length = sorted.length;\n                if (length < 4) {\n                    var min = sorted[length - 1];\n                    for (var i = 0; i < 4 - length; i++) {\n                        sorted.push(min);\n                    }\n                }\n                return sorted;\n            } // from left bottom corner, and clockwise\n            function getCandlePoints(x, y, width) {\n                var yValues = _sortValue(y);\n                var points = [{\n                        x: x,\n                        y: yValues[0]\n                    }, {\n                        x: x,\n                        y: yValues[1]\n                    }, {\n                        x: x - width / 2,\n                        y: yValues[2]\n                    }, {\n                        x: x - width / 2,\n                        y: yValues[1]\n                    }, {\n                        x: x + width / 2,\n                        y: yValues[1]\n                    }, {\n                        x: x + width / 2,\n                        y: yValues[2]\n                    }, {\n                        x: x,\n                        y: yValues[2]\n                    }, {\n                        x: x,\n                        y: yValues[3]\n                    }];\n                return points;\n            }\n            var Schema = Shape.registerFactory('schema', {});\n            Shape.registerShape('schema', 'candle', {\n                getPoints: function getPoints(cfg) {\n                    return getCandlePoints(cfg.x, cfg.y, cfg.size);\n                },\n                draw: function draw(cfg, container) {\n                    var points = this.parsePoints(cfg.points);\n                    var style = Util.mix({\n                        stroke: cfg.color,\n                        fill: cfg.color,\n                        lineWidth: 1\n                    }, cfg.style);\n                    return container.addShape('Custom', {\n                        className: 'schema',\n                        attrs: style,\n                        createPath: function createPath(ctx) {\n                            ctx.beginPath();\n                            ctx.moveTo(points[0].x, points[0].y);\n                            ctx.lineTo(points[1].x, points[1].y);\n                            ctx.moveTo(points[2].x, points[2].y);\n                            for (var i = 3; i < 6; i++) {\n                                ctx.lineTo(points[i].x, points[i].y);\n                            }\n                            ctx.closePath();\n                            ctx.moveTo(points[6].x, points[6].y);\n                            ctx.lineTo(points[7].x, points[7].y);\n                        }\n                    });\n                }\n            });\n            module.exports = Schema;\n            /***/ \n        }),\n        /* 114 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var Abstract = __webpack_require__(26);\n            var Circle = \n            /*#__PURE__*/\n            function (_Abstract) {\n                _inheritsLoose(Circle, _Abstract);\n                function Circle() {\n                    return _Abstract.apply(this, arguments) || this;\n                }\n                var _proto = Circle.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Abstract.prototype._initDefaultCfg.call(this);\n                    this.startAngle = -Math.PI / 2; // start angle，in radian\n                    this.endAngle = Math.PI * 3 / 2; // end angle, in radian\n                    this.radius = null; // radius\n                    this.center = null; // center\n                };\n                _proto.getOffsetPoint = function getOffsetPoint(value) {\n                    var startAngle = this.startAngle, endAngle = this.endAngle;\n                    var angle = startAngle + (endAngle - startAngle) * value;\n                    return this._getCirclePoint(angle);\n                };\n                _proto._getCirclePoint = function _getCirclePoint(angle, radius) {\n                    var self = this;\n                    var center = self.center;\n                    radius = radius || self.radius;\n                    return {\n                        x: center.x + Math.cos(angle) * radius,\n                        y: center.y + Math.sin(angle) * radius\n                    };\n                };\n                _proto.getTextAlignInfo = function getTextAlignInfo(point, offset) {\n                    var self = this;\n                    var offsetVector = self.getOffsetVector(point, offset);\n                    var align;\n                    var baseLine = 'middle';\n                    if (offsetVector[0] > 0) {\n                        align = 'left';\n                    }\n                    else if (offsetVector[0] < 0) {\n                        align = 'right';\n                    }\n                    else {\n                        align = 'center';\n                        if (offsetVector[1] > 0) {\n                            baseLine = 'top';\n                        }\n                        else if (offsetVector[1] < 0) {\n                            baseLine = 'bottom';\n                        }\n                    }\n                    return {\n                        textAlign: align,\n                        textBaseline: baseLine\n                    };\n                };\n                _proto.getAxisVector = function getAxisVector(point) {\n                    var center = this.center;\n                    var factor = this.offsetFactor;\n                    return [(point.y - center.y) * factor, (point.x - center.x) * -1 * factor];\n                };\n                _proto.drawLine = function drawLine(lineCfg) {\n                    var center = this.center, radius = this.radius, startAngle = this.startAngle, endAngle = this.endAngle;\n                    var container = this.getContainer(lineCfg.top);\n                    container.addShape('arc', {\n                        className: 'axis-line',\n                        attrs: Util.mix({\n                            x: center.x,\n                            y: center.y,\n                            r: radius,\n                            startAngle: startAngle,\n                            endAngle: endAngle\n                        }, lineCfg)\n                    });\n                };\n                return Circle;\n            }(Abstract);\n            Abstract.Circle = Circle;\n            module.exports = Circle;\n            /***/ \n        }),\n        /* 115 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var TimeCat = __webpack_require__(116);\n            module.exports = TimeCat;\n            /***/ \n        }),\n        /* 116 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) {\n                subClass.prototype = Object.create(superClass.prototype);\n                subClass.prototype.constructor = subClass;\n                subClass.__proto__ = superClass;\n            }\n            /**\n             * @fileOverview 时间数据作为分类类型\n             * @author dxq613@gmail.com\n             */\n            var Base = __webpack_require__(12);\n            var Category = __webpack_require__(38);\n            var fecha = __webpack_require__(117);\n            var catAuto = __webpack_require__(39);\n            var TimeUtil = __webpack_require__(99);\n            var each = __webpack_require__(4);\n            var isNumber = __webpack_require__(17);\n            var isObject = __webpack_require__(25);\n            var isString = __webpack_require__(18);\n            /**\n             * 度量的构造函数\n             * @class Scale.TimeCategory\n             */\n            var TimeCategory = \n            /*#__PURE__*/\n            function (_Category) {\n                _inheritsLoose(TimeCategory, _Category);\n                function TimeCategory() {\n                    return _Category.apply(this, arguments) || this;\n                }\n                var _proto = TimeCategory.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    _Category.prototype._initDefaultCfg.call(this);\n                    this.type = 'timeCat';\n                    /**\n                     * 是否需要排序，默认进行排序\n                     * @type {Boolean}\n                     */\n                    this.sortable = true;\n                    this.tickCount = 5;\n                    /**\n                     * 时间格式化\n                     * @type {String}\n                     */\n                    this.mask = 'YYYY-MM-DD';\n                };\n                _proto.init = function init() {\n                    var self = this;\n                    var values = this.values; // 针对时间分类类型，会将时间统一转换为时间戳\n                    each(values, function (v, i) {\n                        values[i] = self._toTimeStamp(v);\n                    });\n                    if (this.sortable) {\n                        // 允许排序\n                        values.sort(function (v1, v2) {\n                            return v1 - v2;\n                        });\n                    }\n                    if (!self.ticks) {\n                        self.ticks = this.calculateTicks();\n                    }\n                };\n                _proto.calculateTicks = function calculateTicks() {\n                    var self = this;\n                    var count = self.tickCount;\n                    var ticks;\n                    if (count) {\n                        var temp = catAuto({\n                            maxCount: count,\n                            data: self.values,\n                            isRounding: self.isRounding\n                        });\n                        ticks = temp.ticks;\n                    }\n                    else {\n                        ticks = self.values;\n                    }\n                    return ticks;\n                };\n                _proto.translate = function translate(value) {\n                    value = this._toTimeStamp(value);\n                    var index = this.values.indexOf(value);\n                    if (index === -1) {\n                        if (isNumber(value) && value < this.values.length) {\n                            index = value;\n                        }\n                        else {\n                            index = NaN;\n                        }\n                    }\n                    return index;\n                };\n                _proto.scale = function scale(value) {\n                    var rangeMin = this.rangeMin();\n                    var rangeMax = this.rangeMax();\n                    var index = this.translate(value);\n                    var percent;\n                    if (this.values.length === 1 || isNaN(index)) {\n                        // is index is NAN should not be set as 0\n                        percent = index;\n                    }\n                    else if (index > -1) {\n                        percent = index / (this.values.length - 1);\n                    }\n                    else {\n                        percent = 0;\n                    }\n                    return rangeMin + percent * (rangeMax - rangeMin);\n                };\n                _proto.getText = function getText(value) {\n                    var result = '';\n                    var index = this.translate(value);\n                    if (index > -1) {\n                        result = this.values[index];\n                    }\n                    else {\n                        result = value;\n                    }\n                    var formatter = this.formatter;\n                    result = parseInt(result, 10);\n                    result = formatter ? formatter(result) : fecha.format(result, this.mask);\n                    return result;\n                };\n                _proto.getTicks = function getTicks() {\n                    var self = this;\n                    var ticks = this.ticks;\n                    var rst = [];\n                    each(ticks, function (tick) {\n                        var obj;\n                        if (isObject(tick)) {\n                            obj = tick;\n                        }\n                        else {\n                            obj = {\n                                text: isString(tick) ? tick : self.getText(tick),\n                                value: self.scale(tick),\n                                tickValue: tick // 用于坐标轴上文本动画时确定前后帧的对应关系\n                            };\n                        }\n                        rst.push(obj);\n                    });\n                    return rst;\n                } // 将时间转换为时间戳\n                ;\n                _proto._toTimeStamp = function _toTimeStamp(value) {\n                    return TimeUtil.toTimeStamp(value);\n                };\n                return TimeCategory;\n            }(Category);\n            Base.TimeCat = TimeCategory;\n            module.exports = TimeCategory;\n            /***/ \n        }),\n        /* 117 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var __WEBPACK_AMD_DEFINE_RESULT__;\n            (function (main) {\n                'use strict';\n                /**\n                 * Parse or format dates\n                 * @class fecha\n                 */\n                var fecha = {};\n                var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\n                var twoDigits = /\\d\\d?/;\n                var threeDigits = /\\d{3}/;\n                var fourDigits = /\\d{4}/;\n                var word = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                var literal = /\\[([^]*?)\\]/gm;\n                var noop = function () { };\n                function shorten(arr, sLen) {\n                    var newArr = [];\n                    for (var i = 0, len = arr.length; i < len; i++) {\n                        newArr.push(arr[i].substr(0, sLen));\n                    }\n                    return newArr;\n                }\n                function monthUpdate(arrName) {\n                    return function (d, v, i18n) {\n                        var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());\n                        if (~index) {\n                            d.month = index;\n                        }\n                    };\n                }\n                function pad(val, len) {\n                    val = String(val);\n                    len = len || 2;\n                    while (val.length < len) {\n                        val = '0' + val;\n                    }\n                    return val;\n                }\n                var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n                var monthNamesShort = shorten(monthNames, 3);\n                var dayNamesShort = shorten(dayNames, 3);\n                fecha.i18n = {\n                    dayNamesShort: dayNamesShort,\n                    dayNames: dayNames,\n                    monthNamesShort: monthNamesShort,\n                    monthNames: monthNames,\n                    amPm: ['am', 'pm'],\n                    DoFn: function DoFn(D) {\n                        return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];\n                    }\n                };\n                var formatFlags = {\n                    D: function (dateObj) {\n                        return dateObj.getDate();\n                    },\n                    DD: function (dateObj) {\n                        return pad(dateObj.getDate());\n                    },\n                    Do: function (dateObj, i18n) {\n                        return i18n.DoFn(dateObj.getDate());\n                    },\n                    d: function (dateObj) {\n                        return dateObj.getDay();\n                    },\n                    dd: function (dateObj) {\n                        return pad(dateObj.getDay());\n                    },\n                    ddd: function (dateObj, i18n) {\n                        return i18n.dayNamesShort[dateObj.getDay()];\n                    },\n                    dddd: function (dateObj, i18n) {\n                        return i18n.dayNames[dateObj.getDay()];\n                    },\n                    M: function (dateObj) {\n                        return dateObj.getMonth() + 1;\n                    },\n                    MM: function (dateObj) {\n                        return pad(dateObj.getMonth() + 1);\n                    },\n                    MMM: function (dateObj, i18n) {\n                        return i18n.monthNamesShort[dateObj.getMonth()];\n                    },\n                    MMMM: function (dateObj, i18n) {\n                        return i18n.monthNames[dateObj.getMonth()];\n                    },\n                    YY: function (dateObj) {\n                        return String(dateObj.getFullYear()).substr(2);\n                    },\n                    YYYY: function (dateObj) {\n                        return pad(dateObj.getFullYear(), 4);\n                    },\n                    h: function (dateObj) {\n                        return dateObj.getHours() % 12 || 12;\n                    },\n                    hh: function (dateObj) {\n                        return pad(dateObj.getHours() % 12 || 12);\n                    },\n                    H: function (dateObj) {\n                        return dateObj.getHours();\n                    },\n                    HH: function (dateObj) {\n                        return pad(dateObj.getHours());\n                    },\n                    m: function (dateObj) {\n                        return dateObj.getMinutes();\n                    },\n                    mm: function (dateObj) {\n                        return pad(dateObj.getMinutes());\n                    },\n                    s: function (dateObj) {\n                        return dateObj.getSeconds();\n                    },\n                    ss: function (dateObj) {\n                        return pad(dateObj.getSeconds());\n                    },\n                    S: function (dateObj) {\n                        return Math.round(dateObj.getMilliseconds() / 100);\n                    },\n                    SS: function (dateObj) {\n                        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n                    },\n                    SSS: function (dateObj) {\n                        return pad(dateObj.getMilliseconds(), 3);\n                    },\n                    a: function (dateObj, i18n) {\n                        return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n                    },\n                    A: function (dateObj, i18n) {\n                        return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n                    },\n                    ZZ: function (dateObj) {\n                        var o = dateObj.getTimezoneOffset();\n                        return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);\n                    }\n                };\n                var parseFlags = {\n                    D: [twoDigits, function (d, v) {\n                            d.day = v;\n                        }],\n                    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {\n                            d.day = parseInt(v, 10);\n                        }],\n                    M: [twoDigits, function (d, v) {\n                            d.month = v - 1;\n                        }],\n                    YY: [twoDigits, function (d, v) {\n                            var da = new Date(), cent = +('' + da.getFullYear()).substr(0, 2);\n                            d.year = '' + (v > 68 ? cent - 1 : cent) + v;\n                        }],\n                    h: [twoDigits, function (d, v) {\n                            d.hour = v;\n                        }],\n                    m: [twoDigits, function (d, v) {\n                            d.minute = v;\n                        }],\n                    s: [twoDigits, function (d, v) {\n                            d.second = v;\n                        }],\n                    YYYY: [fourDigits, function (d, v) {\n                            d.year = v;\n                        }],\n                    S: [/\\d/, function (d, v) {\n                            d.millisecond = v * 100;\n                        }],\n                    SS: [/\\d{2}/, function (d, v) {\n                            d.millisecond = v * 10;\n                        }],\n                    SSS: [threeDigits, function (d, v) {\n                            d.millisecond = v;\n                        }],\n                    d: [twoDigits, noop],\n                    ddd: [word, noop],\n                    MMM: [word, monthUpdate('monthNamesShort')],\n                    MMMM: [word, monthUpdate('monthNames')],\n                    a: [word, function (d, v, i18n) {\n                            var val = v.toLowerCase();\n                            if (val === i18n.amPm[0]) {\n                                d.isPm = false;\n                            }\n                            else if (val === i18n.amPm[1]) {\n                                d.isPm = true;\n                            }\n                        }],\n                    ZZ: [/([\\+\\-]\\d\\d:?\\d\\d|Z)/, function (d, v) {\n                            if (v === 'Z')\n                                v = '+00:00';\n                            var parts = (v + '').match(/([\\+\\-]|\\d\\d)/gi), minutes;\n                            if (parts) {\n                                minutes = +(parts[1] * 60) + parseInt(parts[2], 10);\n                                d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;\n                            }\n                        }]\n                };\n                parseFlags.dd = parseFlags.d;\n                parseFlags.dddd = parseFlags.ddd;\n                parseFlags.DD = parseFlags.D;\n                parseFlags.mm = parseFlags.m;\n                parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;\n                parseFlags.MM = parseFlags.M;\n                parseFlags.ss = parseFlags.s;\n                parseFlags.A = parseFlags.a; // Some common format strings\n                fecha.masks = {\n                    default: 'ddd MMM DD YYYY HH:mm:ss',\n                    shortDate: 'M/D/YY',\n                    mediumDate: 'MMM D, YYYY',\n                    longDate: 'MMMM D, YYYY',\n                    fullDate: 'dddd, MMMM D, YYYY',\n                    shortTime: 'HH:mm',\n                    mediumTime: 'HH:mm:ss',\n                    longTime: 'HH:mm:ss.SSS'\n                };\n                /***\n                 * Format a date\n                 * @method format\n                 * @param {Date|number} dateObj\n                 * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n                 */\n                fecha.format = function (dateObj, mask, i18nSettings) {\n                    var i18n = i18nSettings || fecha.i18n;\n                    if (typeof dateObj === 'number') {\n                        dateObj = new Date(dateObj);\n                    }\n                    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {\n                        throw new Error('Invalid Date in fecha.format');\n                    }\n                    mask = fecha.masks[mask] || mask || fecha.masks['default'];\n                    var literals = []; // Make literals inactive by replacing them with ??\n                    mask = mask.replace(literal, function ($0, $1) {\n                        literals.push($1);\n                        return '??';\n                    }); // Apply formatting rules\n                    mask = mask.replace(token, function ($0) {\n                        return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);\n                    }); // Inline literal values back into the formatted value\n                    return mask.replace(/\\?\\?/g, function () {\n                        return literals.shift();\n                    });\n                };\n                /**\n                 * Parse a date string into an object, changes - into /\n                 * @method parse\n                 * @param {string} dateStr Date string\n                 * @param {string} format Date parse format\n                 * @returns {Date|boolean}\n                 */\n                fecha.parse = function (dateStr, format, i18nSettings) {\n                    var i18n = i18nSettings || fecha.i18n;\n                    if (typeof format !== 'string') {\n                        throw new Error('Invalid format in fecha.parse');\n                    }\n                    format = fecha.masks[format] || format; // Avoid regular expression denial of service, fail early for really long strings\n                    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n                    if (dateStr.length > 1000) {\n                        return false;\n                    }\n                    var isValid = true;\n                    var dateInfo = {};\n                    format.replace(token, function ($0) {\n                        if (parseFlags[$0]) {\n                            var info = parseFlags[$0];\n                            var index = dateStr.search(info[0]);\n                            if (!~index) {\n                                isValid = false;\n                            }\n                            else {\n                                dateStr.replace(info[0], function (result) {\n                                    info[1](dateInfo, result, i18n);\n                                    dateStr = dateStr.substr(index + result.length);\n                                    return result;\n                                });\n                            }\n                        }\n                        return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);\n                    });\n                    if (!isValid) {\n                        return false;\n                    }\n                    var today = new Date();\n                    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {\n                        dateInfo.hour = +dateInfo.hour + 12;\n                    }\n                    else if (dateInfo.isPm === false && +dateInfo.hour === 12) {\n                        dateInfo.hour = 0;\n                    }\n                    var date;\n                    if (dateInfo.timezoneOffset != null) {\n                        dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;\n                        date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));\n                    }\n                    else {\n                        date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);\n                    }\n                    return date;\n                };\n                /* istanbul ignore next */\n                if (typeof module !== 'undefined' && module.exports) {\n                    module.exports = fecha;\n                }\n                else if (true) {\n                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n                        return fecha;\n                    }.call(exports, __webpack_require__, exports, module),\n                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n                }\n                else {}\n            })(this);\n            /***/ \n        }),\n        /* 118 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var isType = __webpack_require__(16);\n            var isDate = function isDate(value) {\n                return isType(value, 'Date');\n            };\n            module.exports = isDate;\n            /***/ \n        }),\n        /* 119 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            var Arc = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Arc, _GuideBase);\n                function Arc() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Arc.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'arc';\n                    /**\n                     * start point\n                     * @type {Array | Function}\n                     */\n                    this.start = [];\n                    /**\n                     * end point\n                     * @type {Array | Function}\n                     */\n                    this.end = [];\n                    /**\n                     * style configuration\n                     * @type {Object}\n                     */\n                    this.style = {\n                        stroke: '#999',\n                        lineWidth: 1\n                    };\n                };\n                _proto.render = function render(coord, container) {\n                    var self = this;\n                    var start = self.parsePoint(coord, self.start);\n                    var end = self.parsePoint(coord, self.end);\n                    if (!start || !end) {\n                        return;\n                    }\n                    var coordCenter = coord.center;\n                    var radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));\n                    var startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);\n                    var endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);\n                    var shape = container.addShape('arc', {\n                        className: 'guide-arc',\n                        attrs: Util.mix({\n                            x: coordCenter.x,\n                            y: coordCenter.y,\n                            r: radius,\n                            startAngle: startAngle,\n                            endAngle: endAngle\n                        }, self.style)\n                    });\n                    self.element = shape;\n                    return shape;\n                };\n                return Arc;\n            }(GuideBase);\n            GuideBase.Arc = Arc;\n            module.exports = Arc;\n            /***/ \n        }),\n        /* 120 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            function getOffsetFromAlign(alignX, alignY, width, height) {\n                var result = [];\n                if (alignX === 'left' && alignY === 'top') {\n                    result[0] = 0;\n                    result[1] = 0;\n                }\n                else if (alignX === 'right' && alignY === 'top') {\n                    result[0] = -width;\n                    result[1] = 0;\n                }\n                else if (alignX === 'left' && alignY === 'bottom') {\n                    result[0] = 0;\n                    result[1] = Math.floor(-height);\n                }\n                else if (alignX === 'right' && alignY === 'bottom') {\n                    result[0] = Math.floor(-width);\n                    result[1] = Math.floor(-height);\n                }\n                else if (alignX === 'right' && alignY === 'middle') {\n                    result[0] = Math.floor(-width);\n                    result[1] = Math.floor(-height / 2);\n                }\n                else if (alignX === 'left' && alignY === 'middle') {\n                    result[0] = 0;\n                    result[1] = Math.floor(-height / 2);\n                }\n                else if (alignX === 'center' && alignY === 'bottom') {\n                    result[0] = Math.floor(-width / 2);\n                    result[1] = Math.floor(-height);\n                }\n                else if (alignX === 'center' && alignY === 'top') {\n                    result[0] = Math.floor(-width / 2);\n                    result[1] = 0;\n                }\n                else {\n                    result[0] = Math.floor(-width / 2);\n                    result[1] = Math.floor(-height / 2);\n                }\n                return result;\n            }\n            function modifyCSS(DOM, CSS) {\n                for (var key in CSS) {\n                    if (CSS.hasOwnProperty(key)) {\n                        DOM.style[key] = CSS[key];\n                    }\n                }\n                return DOM;\n            }\n            function createDom(str) {\n                var container = document.createElement('div');\n                str = str.replace(/(^\\s*)|(\\s*$)/g, '');\n                container.innerHTML = '' + str;\n                return container.childNodes[0];\n            }\n            var Html = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Html, _GuideBase);\n                function Html() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Html.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'html';\n                    /**\n                     * dom position\n                     * @type {Object | Array}\n                     */\n                    this.position = null;\n                    /**\n                      * alignment for horizontal direction，can be 'left','center','right'\n                      * @type {String}\n                      */\n                    this.alignX = 'center';\n                    /**\n                      * alignment for vertical direction，can be 'top', 'middle', 'bottom'\n                      * @type {String}\n                      */\n                    this.alignY = 'middle';\n                    /**\n                      * offset for horizontal direction\n                      * @type {Number}\n                      */\n                    this.offsetX = null;\n                    /**\n                      * offset for vertical direction\n                      * @type {Number}\n                      */\n                    this.offsetY = null;\n                    /**\n                    * the html string\n                    *@type {String | Function}\n                    */\n                    this.html = null;\n                } // override paint\n                ;\n                _proto.render = function render(coord, container) {\n                    var self = this;\n                    var position = self.parsePoint(coord, self.position);\n                    if (!position) {\n                        return;\n                    }\n                    var myNode = createDom(self.html);\n                    myNode = modifyCSS(myNode, {\n                        position: 'absolute',\n                        top: Math.floor(position.y) + 'px',\n                        left: Math.floor(position.x) + 'px',\n                        visibility: 'hidden'\n                    });\n                    var canvasDom = container.get('canvas').get('el');\n                    var parentNode = canvasDom.parentNode;\n                    parentNode = modifyCSS(parentNode, {\n                        position: 'relative'\n                    });\n                    var wrapperNode = createDom('<div class=\"guideWapper\" style=\"position: absolute;top: 0; left: 0;\"></div>');\n                    parentNode.appendChild(wrapperNode);\n                    wrapperNode.appendChild(myNode);\n                    var canvasOffsetTop = canvasDom.offsetTop;\n                    var canvasOffsetLeft = canvasDom.offsetLeft;\n                    var alignX = self.alignX, alignY = self.alignY, offsetX = self.offsetX, offsetY = self.offsetY;\n                    var width = Util.getWidth(myNode);\n                    var height = Util.getHeight(myNode);\n                    var newOffset = getOffsetFromAlign(alignX, alignY, width, height);\n                    position.x = position.x + newOffset[0] + canvasOffsetLeft;\n                    position.y = position.y + newOffset[1] + canvasOffsetTop;\n                    if (offsetX) {\n                        position.x += offsetX;\n                    }\n                    if (offsetY) {\n                        position.y += offsetY;\n                    }\n                    modifyCSS(myNode, {\n                        top: Math.floor(position.y) + 'px',\n                        left: Math.floor(position.x) + 'px',\n                        visibility: 'visible'\n                    });\n                    self.element = wrapperNode;\n                };\n                _proto.remove = function remove() {\n                    var element = this.element;\n                    element && element.parentNode && element.parentNode.removeChild(element);\n                };\n                return Html;\n            }(GuideBase);\n            GuideBase.Html = Html;\n            module.exports = Html;\n            /***/ \n        }),\n        /* 121 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            var Line = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Line, _GuideBase);\n                function Line() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Line.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'line';\n                    this.start = [];\n                    this.end = [];\n                    this.style = {\n                        stroke: '#000',\n                        lineWidth: 1\n                    };\n                };\n                _proto.render = function render(coord, container) {\n                    var points = [];\n                    points[0] = this.parsePoint(coord, this.start);\n                    points[1] = this.parsePoint(coord, this.end);\n                    if (!points[0] || !points[1]) {\n                        return;\n                    }\n                    var shape = container.addShape('Line', {\n                        className: 'guide-line',\n                        attrs: Util.mix({\n                            x1: points[0].x,\n                            y1: points[0].y,\n                            x2: points[1].x,\n                            y2: points[1].y\n                        }, this.style)\n                    });\n                    this.element = shape;\n                    return shape;\n                };\n                return Line;\n            }(GuideBase);\n            GuideBase.Line = Line;\n            module.exports = Line;\n            /***/ \n        }),\n        /* 122 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            var Rect = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Rect, _GuideBase);\n                function Rect() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Rect.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'rect';\n                    this.start = [];\n                    this.end = [];\n                    this.style = {\n                        fill: '#CCD7EB',\n                        opacity: 0.4\n                    };\n                };\n                _proto.render = function render(coord, container) {\n                    var start = this.parsePoint(coord, this.start);\n                    var end = this.parsePoint(coord, this.end);\n                    if (!start || !end) {\n                        return;\n                    }\n                    var shape = container.addShape('rect', {\n                        className: 'guide-rect',\n                        attrs: Util.mix({\n                            x: Math.min(start.x, end.x),\n                            y: Math.min(start.y, end.y),\n                            width: Math.abs(end.x - start.x),\n                            height: Math.abs(start.y - end.y)\n                        }, this.style)\n                    });\n                    this.element = shape;\n                    return shape;\n                };\n                return Rect;\n            }(GuideBase);\n            GuideBase.Rect = Rect;\n            module.exports = Rect;\n            /***/ \n        }),\n        /* 123 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            var Text = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Text, _GuideBase);\n                function Text() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Text.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'text';\n                    /**\n                     * the position of text\n                     * @type {Function | Array}\n                     */\n                    this.position = null;\n                    /**\n                     * the display content\n                     * @type {String}\n                     */\n                    this.content = null;\n                    /**\n                     * style configuration for text\n                     * @type {Object}\n                     */\n                    this.style = {\n                        fill: '#000'\n                    };\n                    /**\n                     * offset of horizontal direction\n                     * @type {Number}\n                     */\n                    this.offsetX = 0;\n                    /**\n                     * offset of vertical direction\n                     * @type {Number}\n                     */\n                    this.offsetY = 0;\n                };\n                _proto.render = function render(coord, container) {\n                    var position = this.position;\n                    var point = this.parsePoint(coord, position);\n                    if (!point) {\n                        return;\n                    }\n                    var content = this.content, style = this.style, offsetX = this.offsetX, offsetY = this.offsetY;\n                    if (offsetX) {\n                        point.x += offsetX;\n                    }\n                    if (offsetY) {\n                        point.y += offsetY;\n                    }\n                    var shape = container.addShape('text', {\n                        className: 'guide-text',\n                        attrs: Util.mix({\n                            x: point.x,\n                            y: point.y,\n                            text: content\n                        }, style)\n                    });\n                    this.element = shape;\n                    return shape;\n                };\n                return Text;\n            }(GuideBase);\n            GuideBase.Text = Text;\n            module.exports = Text;\n            /***/ \n        }),\n        /* 124 */\n        /***/ (function (module, exports, __webpack_require__) {\n            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n            var Util = __webpack_require__(0);\n            var GuideBase = __webpack_require__(11);\n            var Tag = \n            /*#__PURE__*/\n            function (_GuideBase) {\n                _inheritsLoose(Tag, _GuideBase);\n                function Tag() {\n                    return _GuideBase.apply(this, arguments) || this;\n                }\n                var _proto = Tag.prototype;\n                _proto._initDefaultCfg = function _initDefaultCfg() {\n                    this.type = 'tag';\n                    this.position = null;\n                    this.content = null;\n                    this.direct = 'tl';\n                    this.autoAdjust = true;\n                    this.offsetX = 0;\n                    this.offsetY = 0;\n                    this.side = 4;\n                    this.background = {\n                        padding: 5,\n                        radius: 2,\n                        fill: '#1890FF'\n                    };\n                    this.textStyle = {\n                        fontSize: 12,\n                        fill: '#fff',\n                        textAlign: 'center',\n                        textBaseline: 'middle'\n                    };\n                    this.withPoint = true;\n                    this.pointStyle = {\n                        fill: '#1890FF',\n                        r: 3,\n                        lineWidth: 1,\n                        stroke: '#fff'\n                    };\n                };\n                _proto._getDirect = function _getDirect(container, point, tagWidth, tagHeight) {\n                    var direct = this.direct;\n                    var side = this.side;\n                    var canvas = container.get('canvas');\n                    var clientWidth = canvas.get('width');\n                    var clientHeight = canvas.get('height');\n                    var x = point.x, y = point.y;\n                    var vertical = direct[0];\n                    var horizontal = direct[1]; // adjust for vertical direction\n                    if (vertical === 't' && y - side - tagHeight < 0) {\n                        vertical = 'b';\n                    }\n                    else if (vertical === 'b' && y + side + tagHeight > clientHeight) {\n                        vertical = 't';\n                    } // adjust for horizontal direction\n                    var diff = vertical === 'c' ? side : 0;\n                    if (horizontal === 'l' && x - diff - tagWidth < 0) {\n                        horizontal = 'r';\n                    }\n                    else if (horizontal === 'r' && x + diff + tagWidth > clientWidth) {\n                        horizontal = 'l';\n                    }\n                    else if (horizontal === 'c') {\n                        if (tagWidth / 2 + x + diff > clientWidth) {\n                            horizontal = 'l';\n                        }\n                        else if (x - tagWidth / 2 - diff < 0) {\n                            horizontal = 'r';\n                        }\n                    }\n                    direct = vertical + horizontal;\n                    return direct;\n                };\n                _proto.render = function render(coord, container) {\n                    var position = this.parsePoint(coord, this.position);\n                    if (!position) {\n                        return;\n                    }\n                    var content = this.content, background = this.background, textStyle = this.textStyle;\n                    var shapes = [];\n                    var wrapperContainer = container.addGroup({\n                        className: 'guide-tag'\n                    });\n                    if (this.withPoint) {\n                        var pointShape = wrapperContainer.addShape('Circle', {\n                            className: 'guide-tag-point',\n                            attrs: Util.mix({\n                                x: position.x,\n                                y: position.y\n                            }, this.pointStyle)\n                        });\n                        shapes.push(pointShape);\n                    }\n                    var tagContainer = wrapperContainer.addGroup(); // create a text shape\n                    var tagText = tagContainer.addShape('text', {\n                        className: 'guide-tag-text',\n                        zIndex: 1,\n                        attrs: Util.mix({\n                            x: 0,\n                            y: 0,\n                            text: content\n                        }, textStyle)\n                    });\n                    shapes.push(tagText); // create background box\n                    var textBBox = tagText.getBBox();\n                    var padding = Util.parsePadding(background.padding);\n                    var tagWidth = textBBox.width + padding[1] + padding[3];\n                    var tagHeight = textBBox.height + padding[0] + padding[2];\n                    var yMin = textBBox.minY - padding[0];\n                    var xMin = textBBox.minX - padding[3];\n                    var tagBg = tagContainer.addShape('rect', {\n                        className: 'guide-tag-bg',\n                        zIndex: -1,\n                        attrs: Util.mix({\n                            x: xMin,\n                            y: yMin,\n                            width: tagWidth,\n                            height: tagHeight\n                        }, background)\n                    });\n                    shapes.push(tagBg);\n                    var direct = this.autoAdjust ? this._getDirect(container, position, tagWidth, tagHeight) : this.direct;\n                    var side = this.side;\n                    var x = position.x + this.offsetX;\n                    var y = position.y + this.offsetY;\n                    var arrowPoints;\n                    var radius = Util.parsePadding(background.radius);\n                    if (direct === 'tl') {\n                        arrowPoints = [{\n                                x: tagWidth + xMin - side - 1,\n                                y: tagHeight + yMin - 1\n                            },\n                            {\n                                x: tagWidth + xMin,\n                                y: tagHeight + yMin - 1\n                            }, {\n                                x: tagWidth + xMin,\n                                y: tagHeight + side + yMin\n                            }];\n                        radius[2] = 0;\n                        x = x - tagWidth;\n                        y = y - side - tagHeight;\n                    }\n                    else if (direct === 'cl') {\n                        arrowPoints = [{\n                                x: tagWidth + xMin - 1,\n                                y: (tagHeight - side) / 2 + yMin - 1\n                            }, {\n                                x: tagWidth + xMin - 1,\n                                y: (tagHeight + side) / 2 + yMin + 1\n                            }, {\n                                x: tagWidth + side + xMin,\n                                y: tagHeight / 2 + yMin\n                            }];\n                        x = x - tagWidth - side;\n                        y = y - tagHeight / 2;\n                    }\n                    else if (direct === 'bl') {\n                        arrowPoints = [{\n                                x: tagWidth + xMin,\n                                y: -side + yMin\n                            }, {\n                                x: tagWidth + xMin - side - 1,\n                                y: yMin + 1\n                            }, {\n                                x: tagWidth + xMin,\n                                y: yMin + 1\n                            }];\n                        radius[1] = 0;\n                        x = x - tagWidth;\n                        y = y + side;\n                    }\n                    else if (direct === 'bc') {\n                        arrowPoints = [{\n                                x: tagWidth / 2 + xMin,\n                                y: -side + yMin\n                            }, {\n                                x: (tagWidth - side) / 2 + xMin - 1,\n                                y: yMin + 1\n                            }, {\n                                x: (tagWidth + side) / 2 + xMin + 1,\n                                y: yMin + 1\n                            }];\n                        x = x - tagWidth / 2;\n                        y = y + side;\n                    }\n                    else if (direct === 'br') {\n                        arrowPoints = [{\n                                x: xMin,\n                                y: yMin - side\n                            }, {\n                                x: xMin,\n                                y: yMin + 1\n                            }, {\n                                x: xMin + side + 1,\n                                y: yMin + 1\n                            }];\n                        radius[0] = 0;\n                        y = y + side;\n                    }\n                    else if (direct === 'cr') {\n                        arrowPoints = [{\n                                x: xMin - side,\n                                y: tagHeight / 2 + yMin\n                            }, {\n                                x: xMin + 1,\n                                y: (tagHeight - side) / 2 + yMin - 1\n                            }, {\n                                x: xMin + 1,\n                                y: (tagHeight + side) / 2 + yMin + 1\n                            }];\n                        x = x + side;\n                        y = y - tagHeight / 2;\n                    }\n                    else if (direct === 'tr') {\n                        arrowPoints = [{\n                                x: xMin,\n                                y: tagHeight + side + yMin\n                            }, {\n                                x: xMin,\n                                y: tagHeight + yMin - 1\n                            }, {\n                                x: side + xMin + 1,\n                                y: tagHeight + yMin - 1\n                            }];\n                        radius[3] = 0;\n                        y = y - tagHeight - side;\n                    }\n                    else if (direct === 'tc') {\n                        arrowPoints = [{\n                                x: (tagWidth - side) / 2 + xMin - 1,\n                                y: tagHeight + yMin - 1\n                            }, {\n                                x: (tagWidth + side) / 2 + xMin + 1,\n                                y: tagHeight + yMin - 1\n                            }, {\n                                x: tagWidth / 2 + xMin,\n                                y: tagHeight + side + yMin\n                            }];\n                        x = x - tagWidth / 2;\n                        y = y - tagHeight - side;\n                    }\n                    var sideShape = tagContainer.addShape('Polygon', {\n                        className: 'guide-tag-side',\n                        zIndex: 0,\n                        attrs: {\n                            points: arrowPoints,\n                            fill: background.fill\n                        }\n                    });\n                    shapes.push(sideShape);\n                    tagBg.attr('radius', radius);\n                    tagContainer.moveTo(x - xMin, y - yMin);\n                    tagContainer.sort();\n                    this.element = wrapperContainer;\n                    return shapes;\n                };\n                return Tag;\n            }(GuideBase);\n            GuideBase.Tag = Tag;\n            module.exports = Tag;\n            /***/ \n        }),\n        /* 125 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Global = __webpack_require__(1);\n            var Tooltip = __webpack_require__(126);\n            var Helper = __webpack_require__(28); // Register the default configuration for Tooltip\n            Global.tooltip = Util.deepMix({\n                triggerOn: ['touchstart', 'touchmove'],\n                // triggerOff: 'touchend',\n                alwaysShow: false,\n                showTitle: false,\n                showCrosshairs: false,\n                crosshairsStyle: {\n                    stroke: 'rgba(0, 0, 0, 0.25)',\n                    lineWidth: 1\n                },\n                showTooltipMarker: true,\n                background: {\n                    radius: 1,\n                    fill: 'rgba(0, 0, 0, 0.65)',\n                    padding: [3, 5]\n                },\n                titleStyle: {\n                    fontSize: 12,\n                    fill: '#fff',\n                    textAlign: 'start',\n                    textBaseline: 'top'\n                },\n                nameStyle: {\n                    fontSize: 12,\n                    fill: 'rgba(255, 255, 255, 0.65)',\n                    textAlign: 'start',\n                    textBaseline: 'middle'\n                },\n                valueStyle: {\n                    fontSize: 12,\n                    fill: '#fff',\n                    textAlign: 'start',\n                    textBaseline: 'middle'\n                },\n                showItemMarker: true,\n                itemMarkerStyle: {\n                    radius: 3,\n                    symbol: 'circle',\n                    lineWidth: 1,\n                    stroke: '#fff'\n                },\n                layout: 'horizontal',\n                snap: false\n            }, Global.tooltip || {});\n            function _getTooltipValueScale(geom) {\n                var colorAttr = geom.getAttr('color');\n                if (colorAttr) {\n                    var colorScale = colorAttr.getScale(colorAttr.type);\n                    if (colorScale.isLinear) {\n                        return colorScale;\n                    }\n                }\n                var xScale = geom.getXScale();\n                var yScale = geom.getYScale();\n                if (yScale) {\n                    return yScale;\n                }\n                return xScale;\n            }\n            function getTooltipName(geom, origin) {\n                var name;\n                var nameScale;\n                var groupScales = geom._getGroupScales();\n                if (groupScales.length) {\n                    Util.each(groupScales, function (scale) {\n                        nameScale = scale;\n                        return false;\n                    });\n                }\n                if (nameScale) {\n                    var field = nameScale.field;\n                    name = nameScale.getText(origin[field]);\n                }\n                else {\n                    var valueScale = _getTooltipValueScale(geom);\n                    name = valueScale.alias || valueScale.field;\n                }\n                return name;\n            }\n            function getTooltipValue(geom, origin) {\n                var scale = _getTooltipValueScale(geom);\n                return scale.getText(origin[scale.field]);\n            }\n            function getTooltipTitle(geom, origin) {\n                var position = geom.getAttr('position');\n                var field = position.getFields()[0];\n                var scale = geom.get('scales')[field];\n                return scale.getText(origin[scale.field]);\n            }\n            function _indexOfArray(items, item) {\n                var rst = -1;\n                Util.each(items, function (sub, index) {\n                    if (sub.title === item.title && sub.name === item.name && sub.value === item.value && sub.color === item.color) {\n                        rst = index;\n                        return false;\n                    }\n                });\n                return rst;\n            }\n            function _uniqItems(items) {\n                var tmp = [];\n                Util.each(items, function (item) {\n                    var index = _indexOfArray(tmp, item);\n                    if (index === -1) {\n                        tmp.push(item);\n                    }\n                    else {\n                        tmp[index] = item;\n                    }\n                });\n                return tmp;\n            }\n            function isEqual(arr1, arr2) {\n                return JSON.stringify(arr1) === JSON.stringify(arr2);\n            }\n            var TooltipController = \n            /*#__PURE__*/\n            function () {\n                function TooltipController(cfg) {\n                    this.enable = true;\n                    this.cfg = {};\n                    this.tooltip = null;\n                    this.chart = null;\n                    this.timeStamp = 0;\n                    Util.mix(this, cfg);\n                    var chart = this.chart;\n                    this.canvasDom = chart.get('canvas').get('el');\n                }\n                var _proto = TooltipController.prototype;\n                _proto._setCrosshairsCfg = function _setCrosshairsCfg() {\n                    var self = this;\n                    var chart = self.chart;\n                    var defaultCfg = Util.mix({}, Global.tooltip);\n                    var geoms = chart.get('geoms');\n                    var shapes = [];\n                    Util.each(geoms, function (geom) {\n                        var type = geom.get('type');\n                        if (shapes.indexOf(type) === -1) {\n                            shapes.push(type);\n                        }\n                    });\n                    var coordType = chart.get('coord').type;\n                    if (geoms.length && (coordType === 'cartesian' || coordType === 'rect')) {\n                        if (shapes.length === 1 && ['line', 'area', 'path', 'point'].indexOf(shapes[0]) !== -1) {\n                            Util.mix(defaultCfg, {\n                                showCrosshairs: true\n                            });\n                        }\n                    }\n                    return defaultCfg;\n                };\n                _proto._getMaxLength = function _getMaxLength(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    var _cfg = cfg, layout = _cfg.layout, plotRange = _cfg.plotRange;\n                    return layout === 'horizontal' ? plotRange.br.x - plotRange.bl.x : plotRange.bl.y - plotRange.tr.y;\n                };\n                _proto.render = function render() {\n                    var self = this;\n                    if (self.tooltip) {\n                        return;\n                    }\n                    var chart = self.chart;\n                    var canvas = chart.get('canvas');\n                    var frontPlot = chart.get('frontPlot').addGroup({\n                        className: 'tooltipContainer',\n                        zIndex: 10\n                    });\n                    var backPlot = chart.get('backPlot').addGroup({\n                        className: 'tooltipContainer'\n                    });\n                    var plotRange = chart.get('plotRange');\n                    var coord = chart.get('coord');\n                    var defaultCfg = self._setCrosshairsCfg();\n                    var cfg = self.cfg; // 通过 chart.tooltip() 接口传入的 tooltip 配置项\n                    var tooltipCfg = Util.deepMix({\n                        plotRange: plotRange,\n                        frontPlot: frontPlot,\n                        backPlot: backPlot,\n                        canvas: canvas,\n                        fixed: coord.transposed || coord.isPolar\n                    }, defaultCfg, cfg); // 创建 tooltip 实例需要的配置，不应该修改 this.cfg，即用户传入的配置\n                    tooltipCfg.maxLength = self._getMaxLength(tooltipCfg);\n                    this._tooltipCfg = tooltipCfg;\n                    var tooltip = new Tooltip(tooltipCfg);\n                    self.tooltip = tooltip;\n                    self.bindEvents();\n                };\n                _proto.clear = function clear() {\n                    var tooltip = this.tooltip;\n                    tooltip && tooltip.destroy();\n                    this.tooltip = null;\n                    this.prePoint = null;\n                    this._lastActive = null;\n                    this.unBindEvents();\n                };\n                _proto._getTooltipMarkerStyle = function _getTooltipMarkerStyle(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    var _cfg2 = cfg, type = _cfg2.type, items = _cfg2.items;\n                    var tooltipCfg = this._tooltipCfg;\n                    if (type === 'rect') {\n                        var x;\n                        var y;\n                        var width;\n                        var height;\n                        var chart = this.chart;\n                        var _chart$get = chart.get('plotRange'), tl = _chart$get.tl, br = _chart$get.br;\n                        var coord = chart.get('coord');\n                        var firstItem = items[0];\n                        var lastItem = items[items.length - 1];\n                        var intervalWidth = firstItem.width;\n                        if (coord.transposed) {\n                            x = tl.x;\n                            y = lastItem.y - intervalWidth * 0.75;\n                            width = br.x - tl.x;\n                            height = firstItem.y - lastItem.y + 1.5 * intervalWidth;\n                        }\n                        else {\n                            x = firstItem.x - intervalWidth * 0.75;\n                            y = tl.y;\n                            width = lastItem.x - firstItem.x + 1.5 * intervalWidth;\n                            height = br.y - tl.y;\n                        }\n                        cfg.style = Util.mix({\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height,\n                            fill: '#CCD6EC',\n                            opacity: 0.3\n                        }, tooltipCfg.tooltipMarkerStyle);\n                    }\n                    else {\n                        cfg.style = Util.mix({\n                            radius: 4,\n                            fill: '#fff',\n                            lineWidth: 2\n                        }, tooltipCfg.tooltipMarkerStyle);\n                    }\n                    return cfg;\n                };\n                _proto._setTooltip = function _setTooltip(point, items, tooltipMarkerCfg) {\n                    if (tooltipMarkerCfg === void 0) {\n                        tooltipMarkerCfg = {};\n                    }\n                    var lastActive = this._lastActive;\n                    var tooltip = this.tooltip;\n                    var cfg = this._tooltipCfg;\n                    items = _uniqItems(items);\n                    var chart = this.chart;\n                    var coord = chart.get('coord');\n                    var yScale = chart.getYScales()[0];\n                    var snap = cfg.snap;\n                    if (snap === false && yScale.isLinear) {\n                        var invertPoint = coord.invertPoint(point);\n                        var plot = chart.get('plotRange');\n                        var tip;\n                        var pos;\n                        if (Helper.isPointInPlot(point, plot)) {\n                            if (coord.transposed) {\n                                tip = yScale.invert(invertPoint.x);\n                                pos = point.x;\n                                tooltip.setXTipContent(tip);\n                                tooltip.setXTipPosition(pos);\n                                tooltip.setYCrosshairPosition(pos);\n                            }\n                            else {\n                                tip = yScale.invert(invertPoint.y);\n                                pos = point.y;\n                                tooltip.setYTipContent(tip);\n                                tooltip.setYTipPosition(pos);\n                                tooltip.setXCrosshairPosition(pos);\n                            }\n                        }\n                    }\n                    if (cfg.onShow) {\n                        cfg.onShow({\n                            x: point.x,\n                            y: point.y,\n                            tooltip: tooltip,\n                            items: items,\n                            tooltipMarkerCfg: tooltipMarkerCfg\n                        });\n                    }\n                    if (isEqual(lastActive, items)) {\n                        if (snap === false && (Util.directionEnabled(cfg.crosshairsType, 'y') || cfg.showYTip)) {\n                            var canvas = this.chart.get('canvas');\n                            canvas.draw();\n                        }\n                        return;\n                    }\n                    this._lastActive = items;\n                    var onChange = cfg.onChange;\n                    if (onChange) {\n                        onChange({\n                            x: point.x,\n                            y: point.y,\n                            tooltip: tooltip,\n                            items: items,\n                            tooltipMarkerCfg: tooltipMarkerCfg\n                        });\n                    }\n                    var first = items[0];\n                    var title = first.title || first.name;\n                    var xTipPosX = first.x;\n                    if (items.length > 1) {\n                        xTipPosX = (items[0].x + items[items.length - 1].x) / 2;\n                    }\n                    tooltip.setContent(title, items, coord.transposed);\n                    tooltip.setPosition(items, point);\n                    if (coord.transposed) {\n                        var yTipPosY = first.y;\n                        if (items.length > 1) {\n                            yTipPosY = (items[0].y + items[items.length - 1].y) / 2;\n                        }\n                        tooltip.setYTipContent(title);\n                        tooltip.setYTipPosition(yTipPosY);\n                        tooltip.setXCrosshairPosition(yTipPosY);\n                        if (snap) {\n                            tooltip.setXTipContent(first.value);\n                            tooltip.setXTipPosition(xTipPosX);\n                            tooltip.setYCrosshairPosition(xTipPosX);\n                        }\n                    }\n                    else {\n                        tooltip.setXTipContent(title);\n                        tooltip.setXTipPosition(xTipPosX);\n                        tooltip.setYCrosshairPosition(xTipPosX);\n                        if (snap) {\n                            tooltip.setYTipContent(first.value);\n                            tooltip.setYTipPosition(first.y);\n                            tooltip.setXCrosshairPosition(first.y);\n                        }\n                    }\n                    var markerItems = tooltipMarkerCfg.items;\n                    if (cfg.showTooltipMarker && markerItems.length) {\n                        tooltipMarkerCfg = this._getTooltipMarkerStyle(tooltipMarkerCfg);\n                        tooltip.setMarkers(tooltipMarkerCfg);\n                    }\n                    else {\n                        tooltip.clearMarkers();\n                    }\n                    tooltip.show();\n                };\n                _proto.showTooltip = function showTooltip(point) {\n                    var self = this;\n                    var chart = self.chart;\n                    var tooltipMarkerType;\n                    var tooltipMarkerItems = [];\n                    var items = [];\n                    var cfg = self._tooltipCfg;\n                    var marker;\n                    if (cfg.showItemMarker) {\n                        marker = cfg.itemMarkerStyle;\n                    }\n                    var geoms = chart.get('geoms');\n                    var coord = chart.get('coord');\n                    Util.each(geoms, function (geom) {\n                        if (geom.get('visible')) {\n                            var type = geom.get('type');\n                            var records = geom.getSnapRecords(point);\n                            Util.each(records, function (record) {\n                                if (record.x && record.y) {\n                                    var x = record.x, y = record.y, _origin = record._origin, color = record.color;\n                                    var tooltipItem = {\n                                        x: x,\n                                        y: Util.isArray(y) ? y[1] : y,\n                                        color: color || Global.defaultColor,\n                                        origin: _origin,\n                                        name: getTooltipName(geom, _origin),\n                                        value: getTooltipValue(geom, _origin),\n                                        title: getTooltipTitle(geom, _origin)\n                                    };\n                                    if (marker) {\n                                        tooltipItem.marker = Util.mix({\n                                            fill: color || Global.defaultColor\n                                        }, marker);\n                                    }\n                                    items.push(tooltipItem);\n                                    if (['line', 'area', 'path'].indexOf(type) !== -1) {\n                                        tooltipMarkerType = 'circle';\n                                        tooltipMarkerItems.push(tooltipItem);\n                                    }\n                                    else if (type === 'interval' && (coord.type === 'cartesian' || coord.type === 'rect')) {\n                                        tooltipMarkerType = 'rect';\n                                        tooltipItem.width = geom.getSize(record._origin);\n                                        tooltipMarkerItems.push(tooltipItem);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                    if (items.length) {\n                        var tooltipMarkerCfg = {\n                            items: tooltipMarkerItems,\n                            type: tooltipMarkerType\n                        };\n                        self._setTooltip(point, items, tooltipMarkerCfg);\n                    }\n                    else {\n                        self.hideTooltip();\n                    }\n                };\n                _proto.hideTooltip = function hideTooltip() {\n                    var cfg = this._tooltipCfg;\n                    this._lastActive = null;\n                    var tooltip = this.tooltip;\n                    if (tooltip) {\n                        tooltip.hide();\n                        if (cfg.onHide) {\n                            cfg.onHide({\n                                tooltip: tooltip\n                            });\n                        }\n                        var canvas = this.chart.get('canvas');\n                        canvas.draw();\n                    }\n                };\n                _proto.handleShowEvent = function handleShowEvent(ev) {\n                    var chart = this.chart;\n                    if (!this.enable || chart.get('_closeTooltip'))\n                        return;\n                    var plot = chart.get('plotRange');\n                    var point = Util.createEvent(ev, chart);\n                    if (!Helper.isPointInPlot(point, plot) && !this._tooltipCfg.alwaysShow) {\n                        // not in chart plot\n                        this.hideTooltip();\n                        return;\n                    }\n                    var lastTimeStamp = this.timeStamp;\n                    var timeStamp = +new Date();\n                    if (timeStamp - lastTimeStamp > 16) {\n                        this.showTooltip(point);\n                        this.timeStamp = timeStamp;\n                    }\n                };\n                _proto.handleHideEvent = function handleHideEvent() {\n                    var chart = this.chart;\n                    if (!this.enable || chart.get('_closeTooltip'))\n                        return;\n                    this.hideTooltip();\n                };\n                _proto.handleDocEvent = function handleDocEvent(ev) {\n                    var chart = this.chart;\n                    if (!this.enable || chart.get('_closeTooltip'))\n                        return;\n                    var canvasDom = this.canvasDom;\n                    if (ev.target !== canvasDom) {\n                        this.hideTooltip();\n                    }\n                };\n                _proto._handleEvent = function _handleEvent(methodName, method, action) {\n                    var canvasDom = this.canvasDom;\n                    Util.each([].concat(methodName), function (aMethod) {\n                        if (action === 'bind') {\n                            Util.addEventListener(canvasDom, aMethod, method);\n                        }\n                        else {\n                            Util.removeEventListener(canvasDom, aMethod, method);\n                        }\n                    });\n                };\n                _proto.bindEvents = function bindEvents() {\n                    var cfg = this._tooltipCfg;\n                    var triggerOn = cfg.triggerOn, triggerOff = cfg.triggerOff, alwaysShow = cfg.alwaysShow;\n                    var showMethod = Util.wrapBehavior(this, 'handleShowEvent');\n                    var hideMethod = Util.wrapBehavior(this, 'handleHideEvent');\n                    triggerOn && this._handleEvent(triggerOn, showMethod, 'bind');\n                    triggerOff && this._handleEvent(triggerOff, hideMethod, 'bind'); // TODO: 当用户点击 canvas 外的事件时 tooltip 消失\n                    if (!alwaysShow) {\n                        var docMethod = Util.wrapBehavior(this, 'handleDocEvent');\n                        Util.isBrowser && Util.addEventListener(document, 'touchstart', docMethod);\n                    }\n                };\n                _proto.unBindEvents = function unBindEvents() {\n                    var cfg = this._tooltipCfg;\n                    var triggerOn = cfg.triggerOn, triggerOff = cfg.triggerOff, alwaysShow = cfg.alwaysShow;\n                    var showMethod = Util.getWrapBehavior(this, 'handleShowEvent');\n                    var hideMethod = Util.getWrapBehavior(this, 'handleHideEvent');\n                    triggerOn && this._handleEvent(triggerOn, showMethod, 'unBind');\n                    triggerOff && this._handleEvent(triggerOff, hideMethod, 'unBind');\n                    if (!alwaysShow) {\n                        var docMethod = Util.getWrapBehavior(this, 'handleDocEvent');\n                        Util.isBrowser && Util.removeEventListener(document, 'touchstart', docMethod);\n                    }\n                };\n                return TooltipController;\n            }();\n            module.exports = {\n                init: function init(chart) {\n                    var tooltipController = new TooltipController({\n                        chart: chart\n                    });\n                    chart.set('tooltipController', tooltipController);\n                    chart.tooltip = function (enable, cfg) {\n                        if (Util.isObject(enable)) {\n                            cfg = enable;\n                            enable = true;\n                        }\n                        tooltipController.enable = enable;\n                        if (cfg) {\n                            tooltipController.cfg = cfg;\n                        }\n                        return this;\n                    };\n                },\n                afterGeomDraw: function afterGeomDraw(chart) {\n                    var tooltipController = chart.get('tooltipController');\n                    tooltipController.render();\n                    chart.showTooltip = function (point) {\n                        tooltipController.showTooltip(point);\n                        return this;\n                    };\n                    chart.hideTooltip = function () {\n                        tooltipController.hideTooltip();\n                        return this;\n                    };\n                },\n                clearInner: function clearInner(chart) {\n                    var tooltipController = chart.get('tooltipController');\n                    tooltipController.clear();\n                }\n            };\n            /***/ \n        }),\n        /* 126 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Marker = __webpack_require__(100);\n            var Container = __webpack_require__(101);\n            var TextBox = __webpack_require__(127);\n            var GAP = 4;\n            /**\n             * TODOList：\n             * 1. 移除 fixed 参数\n             */\n            var Tooltip = \n            /*#__PURE__*/\n            function () {\n                var _proto = Tooltip.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {\n                        /**\n                         * wether show the crosshairs\n                         * @type {Object}\n                         */\n                        showCrosshairs: false,\n                        /**\n                         * the style for crosshairs\n                         * @type {Object}\n                         */\n                        crosshairsStyle: {\n                            stroke: 'rgba(0, 0, 0, 0.25)',\n                            lineWidth: 1\n                        },\n                        /**\n                         * the type of crosshairs, optional value is 'x', 'y' or 'xy', default is 'y'\n                         */\n                        crosshairsType: 'y',\n                        /**\n                         * show or hide the x axis tip\n                         */\n                        showXTip: false,\n                        /**\n                         * show or hide the y axis tip\n                         */\n                        showYTip: false,\n                        xTip: null,\n                        xTipBackground: {\n                            radius: 1,\n                            fill: 'rgba(0, 0, 0, 0.65)',\n                            padding: [3, 5]\n                        },\n                        yTip: null,\n                        yTipBackground: {\n                            radius: 1,\n                            fill: 'rgba(0, 0, 0, 0.65)',\n                            padding: [3, 5]\n                        },\n                        /**\n                         * the style for tooltip container's background\n                         * @type {Object}\n                         */\n                        background: null,\n                        /**\n                         * layout, can be horizontal or vertical\n                         * @type {String}\n                         */\n                        layout: 'horizontal',\n                        offsetX: 0,\n                        offsetY: 0\n                    };\n                };\n                function Tooltip(cfg) {\n                    Util.deepMix(this, this.getDefaultCfg(), cfg);\n                    var frontPlot = this.frontPlot, custom = this.custom;\n                    if (!custom) {\n                        // custom means user do customize\n                        var container = new Container(Util.mix({\n                            parent: frontPlot,\n                            zIndex: 3\n                        }, cfg));\n                        this.container = container;\n                        var fixed = this.fixed, background = this.background;\n                        if (!fixed) {\n                            this.tooltipArrow = frontPlot.addShape('Polygon', {\n                                className: 'tooltip-arrow',\n                                visible: false,\n                                zIndex: 2,\n                                attrs: Util.mix({\n                                    points: []\n                                }, background)\n                            });\n                        }\n                    }\n                    if (this.showXTip) {\n                        var xTipBackground = this.xTipBackground;\n                        var xTipBox = new TextBox({\n                            className: 'xTip',\n                            background: xTipBackground,\n                            visible: false\n                        });\n                        frontPlot.add(xTipBox.container);\n                        this.xTipBox = xTipBox;\n                    }\n                    if (this.showYTip) {\n                        var yTipBackground = this.yTipBackground;\n                        var yTipBox = new TextBox({\n                            className: 'yTip',\n                            background: yTipBackground,\n                            visible: false\n                        });\n                        frontPlot.add(yTipBox.container);\n                        this.yTipBox = yTipBox;\n                    }\n                    if (this.showCrosshairs) {\n                        this._renderCrosshairs();\n                    }\n                    frontPlot.sort();\n                }\n                _proto.setContent = function setContent(title, items) {\n                    this.title = title;\n                    this.items = items;\n                    if (!this.custom) {\n                        var container = this.container;\n                        container.setTitle(title);\n                        container.setItems(items);\n                    }\n                };\n                _proto.setYTipContent = function setYTipContent(val) {\n                    var yTip = this.yTip;\n                    if (Util.isFunction(yTip)) {\n                        val = yTip(val);\n                    }\n                    else {\n                        val = Util.mix({\n                            text: val\n                        }, yTip);\n                    }\n                    this.yTipBox && this.yTipBox.updateContent(val);\n                };\n                _proto.setYTipPosition = function setYTipPosition(pos) {\n                    var plotRange = this.plotRange;\n                    var crosshairsShapeX = this.crosshairsShapeX;\n                    if (this.showYTip) {\n                        var yTipBox = this.yTipBox;\n                        var yTipHeight = yTipBox.getHeight();\n                        var yTipWidth = yTipBox.getWidth();\n                        var posX = plotRange.tl.x - yTipWidth;\n                        var posY = pos - yTipHeight / 2;\n                        if (posY <= plotRange.tl.y) {\n                            posY = plotRange.tl.y;\n                        }\n                        if (posY + yTipHeight >= plotRange.br.y) {\n                            posY = plotRange.br.y - yTipHeight;\n                        }\n                        if (posX < 0) {\n                            posX = plotRange.tl.x;\n                            crosshairsShapeX && crosshairsShapeX.attr('x1', plotRange.tl.x + yTipWidth);\n                        }\n                        yTipBox.updatePosition(posX, posY);\n                    }\n                };\n                _proto.setXTipContent = function setXTipContent(val) {\n                    var xTip = this.xTip;\n                    if (Util.isFunction(xTip)) {\n                        val = xTip(val);\n                    }\n                    else {\n                        val = Util.mix({\n                            text: val\n                        }, xTip);\n                    }\n                    this.xTipBox && this.xTipBox.updateContent(val);\n                };\n                _proto.setXTipPosition = function setXTipPosition(pos) {\n                    var showXTip = this.showXTip, canvas = this.canvas, plotRange = this.plotRange, xTipBox = this.xTipBox, crosshairsShapeY = this.crosshairsShapeY;\n                    if (showXTip) {\n                        // const el = canvas.get('el');\n                        // const canvasHeight = Util.getHeight(el);\n                        var canvasHeight = canvas.get('height');\n                        var xTipWidth = xTipBox.getWidth();\n                        var xTipHeight = xTipBox.getHeight();\n                        var posX = pos - xTipWidth / 2;\n                        var posY = plotRange.br.y;\n                        if (posX <= plotRange.tl.x) {\n                            posX = plotRange.tl.x;\n                        }\n                        if (posX + xTipWidth >= plotRange.tr.x) {\n                            posX = plotRange.tr.x - xTipWidth;\n                        }\n                        if (canvasHeight - posY < xTipHeight) {\n                            posY -= xTipHeight;\n                        }\n                        xTipBox.updatePosition(posX, posY);\n                        crosshairsShapeY && crosshairsShapeY.attr('y1', posY);\n                    }\n                };\n                _proto.setXCrosshairPosition = function setXCrosshairPosition(pos) {\n                    this.crosshairsShapeX && this.crosshairsShapeX.moveTo(0, pos);\n                };\n                _proto.setYCrosshairPosition = function setYCrosshairPosition(pos) {\n                    this.crosshairsShapeY && this.crosshairsShapeY.moveTo(pos, 0);\n                };\n                _proto.setPosition = function setPosition(items) {\n                    var container = this.container, plotRange = this.plotRange, offsetX = this.offsetX, offsetY = this.offsetY, fixed = this.fixed, tooltipArrow = this.tooltipArrow;\n                    if (!container) {\n                        return;\n                    }\n                    var containerBBox = container.container.getBBox();\n                    var minX = containerBBox.minX, minY = containerBBox.minY, width = containerBBox.width, height = containerBBox.height;\n                    var tl = plotRange.tl, tr = plotRange.tr;\n                    var posX = 0;\n                    var posY = tl.y - height - GAP + offsetY;\n                    if (fixed) {\n                        var x = (tl.x + tr.x) / 2;\n                        posX = x - width / 2 + offsetX;\n                    }\n                    else {\n                        var _x;\n                        if (items.length > 1) {\n                            _x = (items[0].x + items[items.length - 1].x) / 2;\n                        }\n                        else {\n                            _x = items[0].x;\n                        }\n                        posX = _x - width / 2 + offsetX;\n                        if (posX < tl.x) {\n                            posX = tl.x;\n                        }\n                        if (posX + width > tr.x) {\n                            posX = tr.x - width;\n                        }\n                        if (tooltipArrow) {\n                            tooltipArrow.attr('points', [{\n                                    x: _x - 3,\n                                    y: tl.y - GAP + offsetY\n                                }, {\n                                    x: _x + 3,\n                                    y: tl.y - GAP + offsetY\n                                }, {\n                                    x: _x,\n                                    y: tl.y + offsetY\n                                }]);\n                            var backShape = container.backShape;\n                            var radius = Util.parsePadding(backShape.attr('radius'));\n                            if (_x === tl.x) {\n                                radius[3] = 0;\n                                tooltipArrow.attr('points', [{\n                                        x: tl.x,\n                                        y: tl.y + offsetY\n                                    }, {\n                                        x: tl.x,\n                                        y: tl.y - GAP + offsetY\n                                    }, {\n                                        x: tl.x + GAP,\n                                        y: tl.y - GAP + offsetY\n                                    }]);\n                            }\n                            else if (_x === tr.x) {\n                                radius[2] = 0;\n                                tooltipArrow.attr('points', [{\n                                        x: tr.x,\n                                        y: tl.y + offsetY\n                                    }, {\n                                        x: tr.x - GAP,\n                                        y: tl.y - GAP + offsetY\n                                    }, {\n                                        x: tr.x,\n                                        y: tl.y - GAP + offsetY\n                                    }]);\n                            }\n                            backShape.attr('radius', radius);\n                        }\n                    }\n                    container.moveTo(posX - minX, posY - minY);\n                };\n                _proto.setMarkers = function setMarkers(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    var self = this;\n                    var _cfg = cfg, items = _cfg.items, style = _cfg.style, type = _cfg.type;\n                    var markerGroup = self._getMarkerGroup(type);\n                    if (type === 'circle') {\n                        for (var i = 0, length = items.length; i < length; i++) {\n                            var item = items[i];\n                            var marker = new Marker({\n                                className: 'tooltip-circle-marker',\n                                attrs: Util.mix({\n                                    x: item.x,\n                                    y: item.y,\n                                    stroke: item.color\n                                }, style)\n                            });\n                            markerGroup.add(marker);\n                        }\n                    }\n                    else {\n                        markerGroup.addShape('rect', {\n                            className: 'tooltip-rect-marker',\n                            attrs: style\n                        });\n                    }\n                };\n                _proto.clearMarkers = function clearMarkers() {\n                    var markerGroup = this.markerGroup;\n                    markerGroup && markerGroup.clear();\n                };\n                _proto.show = function show() {\n                    var crosshairsShapeX = this.crosshairsShapeX;\n                    var crosshairsShapeY = this.crosshairsShapeY;\n                    var markerGroup = this.markerGroup;\n                    var container = this.container;\n                    var tooltipArrow = this.tooltipArrow;\n                    var xTipBox = this.xTipBox;\n                    var yTipBox = this.yTipBox;\n                    var canvas = this.canvas;\n                    crosshairsShapeX && crosshairsShapeX.show();\n                    crosshairsShapeY && crosshairsShapeY.show();\n                    markerGroup && markerGroup.show();\n                    container && container.show();\n                    tooltipArrow && tooltipArrow.show();\n                    xTipBox && xTipBox.show();\n                    yTipBox && yTipBox.show();\n                    canvas.draw();\n                };\n                _proto.hide = function hide() {\n                    var crosshairsShapeX = this.crosshairsShapeX;\n                    var crosshairsShapeY = this.crosshairsShapeY;\n                    var markerGroup = this.markerGroup;\n                    var container = this.container;\n                    var tooltipArrow = this.tooltipArrow;\n                    var xTipBox = this.xTipBox;\n                    var yTipBox = this.yTipBox;\n                    crosshairsShapeX && crosshairsShapeX.hide();\n                    crosshairsShapeY && crosshairsShapeY.hide();\n                    markerGroup && markerGroup.hide();\n                    container && container.hide();\n                    tooltipArrow && tooltipArrow.hide();\n                    xTipBox && xTipBox.hide();\n                    yTipBox && yTipBox.hide();\n                };\n                _proto.destroy = function destroy() {\n                    var crosshairsShapeX = this.crosshairsShapeX;\n                    var crosshairsShapeY = this.crosshairsShapeY;\n                    var markerGroup = this.markerGroup;\n                    var container = this.container;\n                    var tooltipArrow = this.tooltipArrow;\n                    var xTipBox = this.xTipBox;\n                    var yTipBox = this.yTipBox;\n                    crosshairsShapeX && crosshairsShapeX.remove(true);\n                    crosshairsShapeY && crosshairsShapeY.remove(true);\n                    markerGroup && markerGroup.remove(true);\n                    tooltipArrow && tooltipArrow.remove(true);\n                    container && container.clear();\n                    xTipBox && xTipBox.clear();\n                    yTipBox && yTipBox.clear();\n                    this.destroyed = true;\n                };\n                _proto._getMarkerGroup = function _getMarkerGroup(type) {\n                    var markerGroup = this.markerGroup;\n                    if (!markerGroup) {\n                        if (type === 'circle') {\n                            markerGroup = this.frontPlot.addGroup({\n                                zIndex: 1\n                            });\n                            this.frontPlot.sort();\n                        }\n                        else {\n                            markerGroup = this.backPlot.addGroup();\n                        }\n                        this.markerGroup = markerGroup;\n                    }\n                    else {\n                        markerGroup.clear();\n                    }\n                    return markerGroup;\n                };\n                _proto._renderCrosshairs = function _renderCrosshairs() {\n                    var crosshairsType = this.crosshairsType, crosshairsStyle = this.crosshairsStyle, frontPlot = this.frontPlot, plotRange = this.plotRange;\n                    var tl = plotRange.tl, br = plotRange.br;\n                    if (Util.directionEnabled(crosshairsType, 'x')) {\n                        this.crosshairsShapeX = frontPlot.addShape('Line', {\n                            className: 'tooltip-crosshairs-x',\n                            zIndex: 0,\n                            visible: false,\n                            attrs: Util.mix({\n                                x1: tl.x,\n                                y1: 0,\n                                x2: br.x,\n                                y2: 0\n                            }, crosshairsStyle)\n                        });\n                    }\n                    if (Util.directionEnabled(crosshairsType, 'y')) {\n                        this.crosshairsShapeY = frontPlot.addShape('Line', {\n                            className: 'tooltip-crosshairs-y',\n                            zIndex: 0,\n                            visible: false,\n                            attrs: Util.mix({\n                                x1: 0,\n                                y1: br.y,\n                                x2: 0,\n                                y2: tl.y\n                            }, crosshairsStyle)\n                        });\n                    }\n                };\n                return Tooltip;\n            }();\n            module.exports = Tooltip;\n            /***/ \n        }),\n        /* 127 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var _require = __webpack_require__(5), Group = _require.Group;\n            var TextBox = \n            /*#__PURE__*/\n            function () {\n                var _proto = TextBox.prototype;\n                _proto.getDefaultCfg = function getDefaultCfg() {\n                    return {\n                        x: 0,\n                        y: 0,\n                        content: '',\n                        textStyle: {\n                            fontSize: 12,\n                            fill: '#fff',\n                            textAlign: 'center',\n                            textBaseline: 'middle'\n                        },\n                        background: {\n                            radius: 1,\n                            fill: 'rgba(0, 0, 0, 0.65)',\n                            padding: [3, 5]\n                        },\n                        width: 0,\n                        height: 0,\n                        className: ''\n                    };\n                };\n                function TextBox(cfg) {\n                    Util.deepMix(this, this.getDefaultCfg(), cfg);\n                    this._init();\n                    var content = this.content, x = this.x, y = this.y;\n                    if (!Util.isNil(content)) {\n                        this.updateContent(content);\n                    }\n                    this.updatePosition(x, y);\n                }\n                _proto._init = function _init() {\n                    var content = this.content, textStyle = this.textStyle, background = this.background, className = this.className, visible = this.visible;\n                    var container = new Group({\n                        className: className,\n                        zIndex: 0,\n                        visible: visible\n                    });\n                    var text = container.addShape('Text', {\n                        className: className + '-text',\n                        zIndex: 1,\n                        attrs: Util.mix({\n                            text: content,\n                            x: 0,\n                            y: 0\n                        }, textStyle)\n                    });\n                    var backgroundShape = container.addShape('Rect', {\n                        className: className + '-bg',\n                        zIndex: -1,\n                        attrs: Util.mix({\n                            x: 0,\n                            y: 0,\n                            width: 0,\n                            height: 0\n                        }, background)\n                    });\n                    container.sort();\n                    this.container = container;\n                    this.textShape = text;\n                    this.backgroundShape = backgroundShape;\n                };\n                _proto._getBBox = function _getBBox() {\n                    var textShape = this.textShape;\n                    var background = this.background;\n                    var textBBox = textShape.getBBox();\n                    var padding = Util.parsePadding(background.padding);\n                    var width = textBBox.width + padding[1] + padding[3];\n                    var height = textBBox.height + padding[0] + padding[2];\n                    var x = textBBox.minX - padding[3];\n                    var y = textBBox.minY - padding[0];\n                    return {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    };\n                };\n                _proto.updateContent = function updateContent(text) {\n                    var textShape = this.textShape, backgroundShape = this.backgroundShape;\n                    if (!Util.isNil(text)) {\n                        if (!Util.isObject(text)) {\n                            text = {\n                                text: text\n                            };\n                        }\n                        textShape.attr(text); // update box shape\n                        var _this$_getBBox = this._getBBox(), x = _this$_getBBox.x, y = _this$_getBBox.y, tipWidth = _this$_getBBox.width, tipHeight = _this$_getBBox.height;\n                        var width = this.width || tipWidth;\n                        var height = this.height || tipHeight;\n                        backgroundShape.attr({\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height\n                        });\n                        this._width = width;\n                        this._height = height;\n                        this.content = text.text;\n                    }\n                };\n                _proto.updatePosition = function updatePosition(x, y) {\n                    var container = this.container;\n                    var _this$_getBBox2 = this._getBBox(), xMin = _this$_getBBox2.x, yMin = _this$_getBBox2.y;\n                    container.moveTo(x - xMin, y - yMin);\n                    this.x = x - xMin;\n                    this.y = y - yMin;\n                };\n                _proto.getWidth = function getWidth() {\n                    return this._width;\n                };\n                _proto.getHeight = function getHeight() {\n                    return this._height;\n                };\n                _proto.show = function show() {\n                    this.container.show();\n                };\n                _proto.hide = function hide() {\n                    this.container.hide();\n                };\n                _proto.clear = function clear() {\n                    var container = this.container;\n                    container.clear();\n                    container.remove(true);\n                    this.container = null;\n                    this.textShape = null;\n                    this.backgroundShape = null;\n                };\n                return TextBox;\n            }();\n            module.exports = TextBox;\n            /***/ \n        }),\n        /* 128 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var Guide = __webpack_require__(11);\n            var Global = __webpack_require__(1); // register the default configuration for Guide\n            Global.guide = Util.deepMix({\n                line: {\n                    style: {\n                        stroke: '#a3a3a3',\n                        lineWidth: 1\n                    },\n                    top: true\n                },\n                text: {\n                    style: {\n                        fill: '#787878',\n                        textAlign: 'center',\n                        textBaseline: 'middle'\n                    },\n                    offsetX: 0,\n                    offsetY: 0,\n                    top: true\n                },\n                rect: {\n                    style: {\n                        fill: '#fafafa'\n                    },\n                    top: false\n                },\n                arc: {\n                    style: {\n                        stroke: '#a3a3a3'\n                    },\n                    top: true\n                },\n                html: {\n                    offsetX: 0,\n                    offsetY: 0,\n                    alignX: 'center',\n                    alignY: 'middle'\n                },\n                tag: {\n                    top: true,\n                    offsetX: 0,\n                    offsetY: 0,\n                    side: 4,\n                    background: {\n                        padding: 5,\n                        radius: 2,\n                        fill: '#1890FF'\n                    },\n                    textStyle: {\n                        fontSize: 12,\n                        fill: '#fff',\n                        textAlign: 'center',\n                        textBaseline: 'middle'\n                    }\n                },\n                point: {\n                    top: true,\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        fill: '#fff',\n                        r: 3,\n                        lineWidth: 2,\n                        stroke: '#1890ff'\n                    }\n                }\n            }, Global.guide || {});\n            var GuideController = \n            /*#__PURE__*/\n            function () {\n                function GuideController(cfg) {\n                    this.guides = [];\n                    this.xScale = null;\n                    this.yScales = null;\n                    this.guideShapes = [];\n                    Util.mix(this, cfg);\n                }\n                var _proto = GuideController.prototype;\n                _proto._toString = function _toString(position) {\n                    if (Util.isFunction(position)) {\n                        position = position(this.xScale, this.yScales);\n                    }\n                    position = position.toString();\n                    return position;\n                };\n                _proto._getId = function _getId(shape, guide) {\n                    var id = guide.id;\n                    if (!id) {\n                        var type = guide.type;\n                        if (type === 'arc' || type === 'line' || type === 'rect') {\n                            id = this._toString(guide.start) + '-' + this._toString(guide.end);\n                        }\n                        else {\n                            id = this._toString(guide.position);\n                        }\n                    }\n                    return id;\n                };\n                _proto.paint = function paint(coord) {\n                    var self = this;\n                    var chart = self.chart, guides = self.guides, xScale = self.xScale, yScales = self.yScales;\n                    var guideShapes = [];\n                    Util.each(guides, function (guide, idx) {\n                        guide.xScale = xScale;\n                        guide.yScales = yScales;\n                        var container;\n                        if (guide.type === 'regionFilter') {\n                            // TODO: RegionFilter support animation\n                            guide.chart = chart;\n                        }\n                        else {\n                            container = guide.top ? self.frontPlot : self.backPlot;\n                        }\n                        guide.coord = coord;\n                        guide.container = container;\n                        guide.canvas = chart.get('canvas');\n                        var shape = guide.render(coord, container);\n                        if (shape) {\n                            var id = self._getId(shape, guide);\n                            [].concat(shape).forEach(function (s) {\n                                s._id = s.get('className') + '-' + id;\n                                s.set('index', idx);\n                                guideShapes.push(s);\n                            });\n                        }\n                    });\n                    self.guideShapes = guideShapes;\n                };\n                _proto.clear = function clear() {\n                    this.reset();\n                    this.guides = [];\n                    return this;\n                };\n                _proto.reset = function reset() {\n                    var guides = this.guides;\n                    Util.each(guides, function (guide) {\n                        guide.remove();\n                    });\n                };\n                _proto._createGuide = function _createGuide(type, cfg) {\n                    var ClassName = Util.upperFirst(type);\n                    var guide = new Guide[ClassName](Util.deepMix({}, Global.guide[type], cfg));\n                    this.guides.push(guide);\n                    return guide;\n                };\n                _proto.line = function line(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('line', cfg);\n                };\n                _proto.text = function text(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('text', cfg);\n                };\n                _proto.arc = function arc(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('arc', cfg);\n                };\n                _proto.html = function html(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('html', cfg);\n                };\n                _proto.rect = function rect(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('rect', cfg);\n                };\n                _proto.tag = function tag(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('tag', cfg);\n                };\n                _proto.point = function point(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('point', cfg);\n                };\n                _proto.regionFilter = function regionFilter(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    return this._createGuide('regionFilter', cfg);\n                };\n                return GuideController;\n            }();\n            module.exports = {\n                init: function init(chart) {\n                    var guideController = new GuideController({\n                        frontPlot: chart.get('frontPlot').addGroup({\n                            zIndex: 20,\n                            className: 'guideContainer'\n                        }),\n                        backPlot: chart.get('backPlot').addGroup({\n                            className: 'guideContainer'\n                        })\n                    });\n                    chart.set('guideController', guideController);\n                    /**\n                     * 为图表添加 guide\n                     * @return {GuideController} 返回 guide 控制器\n                     */\n                    chart.guide = function () {\n                        return guideController;\n                    };\n                },\n                afterGeomDraw: function afterGeomDraw(chart) {\n                    var guideController = chart.get('guideController');\n                    if (!guideController.guides.length) {\n                        return;\n                    }\n                    var xScale = chart.getXScale();\n                    var yScales = chart.getYScales();\n                    var coord = chart.get('coord');\n                    guideController.xScale = xScale;\n                    guideController.yScales = yScales;\n                    guideController.chart = chart; // for regionFilter\n                    guideController.paint(coord);\n                },\n                clear: function clear(chart) {\n                    chart.get('guideController').clear();\n                },\n                repaint: function repaint(chart) {\n                    chart.get('guideController').reset();\n                }\n            };\n            /***/ \n        }),\n        /* 129 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Util = __webpack_require__(0);\n            var List = __webpack_require__(101);\n            var Global = __webpack_require__(1);\n            var LEGEND_GAP = 12;\n            var MARKER_SIZE = 3;\n            var DEFAULT_CFG = {\n                itemMarginBottom: 12,\n                itemGap: 10,\n                showTitle: false,\n                titleStyle: {\n                    fontSize: 12,\n                    fill: '#808080',\n                    textAlign: 'start',\n                    textBaseline: 'top'\n                },\n                nameStyle: {\n                    fill: '#808080',\n                    fontSize: 12,\n                    textAlign: 'start',\n                    textBaseline: 'middle'\n                },\n                valueStyle: {\n                    fill: '#000000',\n                    fontSize: 12,\n                    textAlign: 'start',\n                    textBaseline: 'middle'\n                },\n                unCheckStyle: {\n                    fill: '#bfbfbf'\n                },\n                itemWidth: 'auto',\n                wordSpace: 6,\n                selectedMode: 'multiple' // 'multiple' or 'single'\n            }; // Register the default configuration for Legend\n            Global.legend = Util.deepMix({\n                common: DEFAULT_CFG,\n                // common legend configuration\n                right: Util.mix({\n                    position: 'right',\n                    layout: 'vertical'\n                }, DEFAULT_CFG),\n                left: Util.mix({\n                    position: 'left',\n                    layout: 'vertical'\n                }, DEFAULT_CFG),\n                top: Util.mix({\n                    position: 'top',\n                    layout: 'horizontal'\n                }, DEFAULT_CFG),\n                bottom: Util.mix({\n                    position: 'bottom',\n                    layout: 'horizontal'\n                }, DEFAULT_CFG)\n            }, Global.legend || {});\n            function getPaddingByPos(pos, appendPadding) {\n                var padding = 0;\n                appendPadding = Util.parsePadding(appendPadding);\n                switch (pos) {\n                    case 'top':\n                        padding = appendPadding[0];\n                        break;\n                    case 'right':\n                        padding = appendPadding[1];\n                        break;\n                    case 'bottom':\n                        padding = appendPadding[2];\n                        break;\n                    case 'left':\n                        padding = appendPadding[3];\n                        break;\n                    default:\n                        break;\n                }\n                return padding;\n            }\n            var LegendController = \n            /*#__PURE__*/\n            function () {\n                function LegendController(cfg) {\n                    this.legendCfg = {};\n                    this.enable = true;\n                    this.position = 'top';\n                    Util.mix(this, cfg);\n                    var chart = this.chart;\n                    this.canvasDom = chart.get('canvas').get('el');\n                    this.clear();\n                }\n                var _proto = LegendController.prototype;\n                _proto.addLegend = function addLegend(scale, items, filterVals) {\n                    var self = this;\n                    var legendCfg = self.legendCfg;\n                    var field = scale.field;\n                    var fieldCfg = legendCfg[field];\n                    if (fieldCfg === false) {\n                        return null;\n                    }\n                    if (fieldCfg && fieldCfg.custom) {\n                        self.addCustomLegend(field);\n                    }\n                    else {\n                        var position = legendCfg.position || self.position;\n                        if (fieldCfg && fieldCfg.position) {\n                            position = fieldCfg.position;\n                        }\n                        if (scale.isCategory) {\n                            self._addCategoryLegend(scale, items, position, filterVals);\n                        }\n                    }\n                };\n                _proto.addCustomLegend = function addCustomLegend(field) {\n                    var self = this;\n                    var legendCfg = self.legendCfg;\n                    if (field && legendCfg[field]) {\n                        legendCfg = legendCfg[field];\n                    }\n                    var position = legendCfg.position || self.position;\n                    var legends = self.legends;\n                    legends[position] = legends[position] || [];\n                    var items = legendCfg.items;\n                    if (!items) {\n                        return null;\n                    }\n                    var container = self.container;\n                    Util.each(items, function (item) {\n                        if (!Util.isPlainObject(item.marker)) {\n                            item.marker = {\n                                symbol: item.marker || 'circle',\n                                fill: item.fill,\n                                radius: MARKER_SIZE\n                            };\n                        }\n                        else {\n                            item.marker.radius = item.marker.radius || MARKER_SIZE;\n                        }\n                        item.checked = Util.isNil(item.checked) ? true : item.checked;\n                        item.name = item.name || item.value;\n                    });\n                    var legend = new List(Util.deepMix({}, Global.legend[position], legendCfg, {\n                        maxLength: self._getMaxLength(position),\n                        items: items,\n                        parent: container\n                    }));\n                    legends[position].push(legend);\n                };\n                _proto.clear = function clear() {\n                    var legends = this.legends;\n                    Util.each(legends, function (legendItems) {\n                        Util.each(legendItems, function (legend) {\n                            legend.clear();\n                        });\n                    });\n                    this.legends = {};\n                    this.unBindEvents();\n                };\n                _proto._isFiltered = function _isFiltered(scale, values, value) {\n                    var rst = false;\n                    Util.each(values, function (val) {\n                        rst = rst || scale.getText(val) === scale.getText(value);\n                        if (rst) {\n                            return false;\n                        }\n                    });\n                    return rst;\n                };\n                _proto._getMaxLength = function _getMaxLength(position) {\n                    var chart = this.chart;\n                    var appendPadding = Util.parsePadding(chart.get('appendPadding'));\n                    return position === 'right' || position === 'left' ? chart.get('height') - (appendPadding[0] + appendPadding[2]) : chart.get('width') - (appendPadding[1] + appendPadding[3]);\n                };\n                _proto._addCategoryLegend = function _addCategoryLegend(scale, items, position, filterVals) {\n                    var self = this;\n                    var legendCfg = self.legendCfg, legends = self.legends, container = self.container, chart = self.chart;\n                    var field = scale.field;\n                    legends[position] = legends[position] || [];\n                    var symbol = 'circle';\n                    if (legendCfg[field] && legendCfg[field].marker) {\n                        symbol = legendCfg[field].marker;\n                    }\n                    else if (legendCfg.marker) {\n                        symbol = legendCfg.marker;\n                    }\n                    Util.each(items, function (item) {\n                        if (Util.isPlainObject(symbol)) {\n                            Util.mix(item.marker, symbol);\n                        }\n                        else {\n                            item.marker.symbol = symbol;\n                        }\n                        if (filterVals) {\n                            item.checked = self._isFiltered(scale, filterVals, item.dataValue);\n                        }\n                    });\n                    var legendItems = chart.get('legendItems');\n                    legendItems[field] = items;\n                    var lastCfg = Util.deepMix({}, Global.legend[position], legendCfg[field] || legendCfg, {\n                        maxLength: self._getMaxLength(position),\n                        items: items,\n                        field: field,\n                        filterVals: filterVals,\n                        parent: container\n                    });\n                    if (lastCfg.showTitle) {\n                        Util.deepMix(lastCfg, {\n                            title: scale.alias || scale.field\n                        });\n                    }\n                    var legend = new List(lastCfg);\n                    legends[position].push(legend);\n                    return legend;\n                };\n                _proto._alignLegend = function _alignLegend(legend, pre, position) {\n                    var self = this;\n                    var _self$plotRange = self.plotRange, tl = _self$plotRange.tl, bl = _self$plotRange.bl;\n                    var chart = self.chart;\n                    var offsetX = legend.offsetX || 0;\n                    var offsetY = legend.offsetY || 0;\n                    var chartWidth = chart.get('width');\n                    var chartHeight = chart.get('height');\n                    var appendPadding = Util.parsePadding(chart.get('appendPadding'));\n                    var legendHeight = legend.getHeight();\n                    var legendWidth = legend.getWidth();\n                    var x = 0;\n                    var y = 0;\n                    if (position === 'left' || position === 'right') {\n                        var verticalAlign = legend.verticalAlign || 'middle';\n                        var height = Math.abs(tl.y - bl.y);\n                        x = position === 'left' ? appendPadding[3] : chartWidth - legendWidth - appendPadding[1];\n                        y = (height - legendHeight) / 2 + tl.y;\n                        if (verticalAlign === 'top') {\n                            y = tl.y;\n                        }\n                        else if (verticalAlign === 'bottom') {\n                            y = bl.y - legendHeight;\n                        }\n                        if (pre) {\n                            y = pre.get('y') - legendHeight - LEGEND_GAP;\n                        }\n                    }\n                    else {\n                        var align = legend.align || 'left';\n                        x = appendPadding[3];\n                        if (align === 'center') {\n                            x = chartWidth / 2 - legendWidth / 2;\n                        }\n                        else if (align === 'right') {\n                            x = chartWidth - (legendWidth + appendPadding[1]);\n                        }\n                        y = position === 'top' ? appendPadding[0] + Math.abs(legend.container.getBBox().minY) : chartHeight - legendHeight;\n                        if (pre) {\n                            var preWidth = pre.getWidth();\n                            x = pre.x + preWidth + LEGEND_GAP;\n                        }\n                    }\n                    if (position === 'bottom' && offsetY > 0) {\n                        offsetY = 0;\n                    }\n                    if (position === 'right' && offsetX > 0) {\n                        offsetX = 0;\n                    }\n                    legend.moveTo(x + offsetX, y + offsetY);\n                };\n                _proto.alignLegends = function alignLegends() {\n                    var self = this;\n                    var legends = self.legends;\n                    Util.each(legends, function (legendItems, position) {\n                        Util.each(legendItems, function (legend, index) {\n                            var pre = legendItems[index - 1];\n                            self._alignLegend(legend, pre, position);\n                        });\n                    });\n                    return self;\n                };\n                _proto.handleEvent = function handleEvent(ev) {\n                    var self = this;\n                    function findItem(x, y) {\n                        var result = null;\n                        var legends = self.legends;\n                        Util.each(legends, function (legendItems) {\n                            Util.each(legendItems, function (legend) {\n                                var itemsGroup = legend.itemsGroup, legendHitBoxes = legend.legendHitBoxes;\n                                var children = itemsGroup.get('children');\n                                if (children.length) {\n                                    var legendPosX = legend.x;\n                                    var legendPosY = legend.y;\n                                    Util.each(legendHitBoxes, function (box, index) {\n                                        if (x >= box.x + legendPosX && x <= box.x + box.width + legendPosX && y >= box.y + legendPosY && y <= box.height + box.y + legendPosY) {\n                                            // inbox\n                                            result = {\n                                                clickedItem: children[index],\n                                                clickedLegend: legend\n                                            };\n                                            return false;\n                                        }\n                                    });\n                                }\n                            });\n                        });\n                        return result;\n                    }\n                    var chart = self.chart;\n                    var _Util$createEvent = Util.createEvent(ev, chart), x = _Util$createEvent.x, y = _Util$createEvent.y;\n                    var clicked = findItem(x, y);\n                    if (clicked && clicked.clickedLegend.clickable !== false) {\n                        var clickedItem = clicked.clickedItem, clickedLegend = clicked.clickedLegend;\n                        if (clickedLegend.onClick) {\n                            ev.clickedItem = clickedItem;\n                            clickedLegend.onClick(ev);\n                        }\n                        else if (!clickedLegend.custom) {\n                            var checked = clickedItem.get('checked');\n                            var value = clickedItem.get('dataValue');\n                            var filterVals = clickedLegend.filterVals, field = clickedLegend.field, selectedMode = clickedLegend.selectedMode;\n                            var isSingeSelected = selectedMode === 'single';\n                            if (isSingeSelected) {\n                                chart.filter(field, function (val) {\n                                    return val === value;\n                                });\n                            }\n                            else {\n                                if (!checked) {\n                                    filterVals.push(value);\n                                }\n                                else {\n                                    Util.Array.remove(filterVals, value);\n                                }\n                                chart.filter(field, function (val) {\n                                    return filterVals.indexOf(val) !== -1;\n                                });\n                            }\n                            chart.repaint();\n                        }\n                    }\n                };\n                _proto.bindEvents = function bindEvents() {\n                    var legendCfg = this.legendCfg;\n                    var triggerOn = legendCfg.triggerOn || 'touchstart';\n                    var method = Util.wrapBehavior(this, 'handleEvent');\n                    Util.addEventListener(this.canvasDom, triggerOn, method);\n                };\n                _proto.unBindEvents = function unBindEvents() {\n                    var legendCfg = this.legendCfg;\n                    var triggerOn = legendCfg.triggerOn || 'touchstart';\n                    var method = Util.getWrapBehavior(this, 'handleEvent');\n                    Util.removeEventListener(this.canvasDom, triggerOn, method);\n                };\n                return LegendController;\n            }();\n            module.exports = {\n                init: function init(chart) {\n                    var legendController = new LegendController({\n                        container: chart.get('backPlot'),\n                        plotRange: chart.get('plotRange'),\n                        chart: chart\n                    });\n                    chart.set('legendController', legendController);\n                    chart.legend = function (field, cfg) {\n                        var legendCfg = legendController.legendCfg;\n                        legendController.enable = true;\n                        if (Util.isBoolean(field)) {\n                            legendController.enable = field;\n                            legendCfg = cfg || {};\n                        }\n                        else if (Util.isObject(field)) {\n                            legendCfg = field;\n                        }\n                        else {\n                            legendCfg[field] = cfg;\n                        }\n                        legendController.legendCfg = legendCfg;\n                        return this;\n                    };\n                },\n                beforeGeomDraw: function beforeGeomDraw(chart) {\n                    var legendController = chart.get('legendController');\n                    if (!legendController.enable)\n                        return null; // legend is not displayed\n                    var legendCfg = legendController.legendCfg;\n                    if (legendCfg && legendCfg.custom) {\n                        legendController.addCustomLegend();\n                    }\n                    else {\n                        var legendItems = chart.getLegendItems();\n                        var scales = chart.get('scales');\n                        var filters = chart.get('filters');\n                        Util.each(legendItems, function (items, field) {\n                            var scale = scales[field];\n                            var values = scale.values;\n                            var filterVals;\n                            if (filters && filters[field]) {\n                                filterVals = values.filter(filters[field]);\n                            }\n                            else {\n                                filterVals = values.slice(0);\n                            }\n                            legendController.addLegend(scale, items, filterVals);\n                        });\n                    }\n                    if (legendCfg && legendCfg.clickable !== false) {\n                        legendController.bindEvents();\n                    }\n                    var legends = legendController.legends;\n                    var legendRange = {\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    };\n                    Util.each(legends, function (legendItems, position) {\n                        var padding = 0;\n                        Util.each(legendItems, function (legend) {\n                            var width = legend.getWidth();\n                            var height = legend.getHeight();\n                            if (position === 'top' || position === 'bottom') {\n                                padding = Math.max(padding, height);\n                                if (legend.offsetY > 0) {\n                                    padding += legend.offsetY;\n                                }\n                            }\n                            else {\n                                padding = Math.max(padding, width);\n                                if (legend.offsetX > 0) {\n                                    padding += legend.offsetX;\n                                }\n                            }\n                        });\n                        legendRange[position] = padding + getPaddingByPos(position, chart.get('appendPadding'));\n                    });\n                    chart.set('legendRange', legendRange);\n                },\n                afterGeomDraw: function afterGeomDraw(chart) {\n                    var legendController = chart.get('legendController');\n                    legendController.alignLegends();\n                },\n                clearInner: function clearInner(chart) {\n                    var legendController = chart.get('legendController');\n                    legendController.clear();\n                    chart.set('legendRange', null);\n                }\n            };\n            /***/ \n        }),\n        /* 130 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Handle the detail animations\n             * @author sima.zhang1990@gmail.com\n             */\n            var Util = __webpack_require__(0);\n            var Element = __webpack_require__(27);\n            var Timeline = __webpack_require__(131);\n            var Animator = __webpack_require__(132);\n            var Animate = __webpack_require__(102);\n            var ShapeAction = __webpack_require__(134);\n            var GroupAction = __webpack_require__(135);\n            var Chart = __webpack_require__(15);\n            var timeline;\n            Element.prototype.animate = function () {\n                var attrs = Util.mix({}, this.get('attrs'));\n                return new Animator(this, attrs, timeline);\n            };\n            Chart.prototype.animate = function (cfg) {\n                this.set('animate', cfg);\n                return this;\n            };\n            Animate.Action = ShapeAction;\n            Animate.defaultCfg = {\n                interval: {\n                    enter: function enter(coord) {\n                        if (coord.isPolar && coord.transposed) {\n                            // for pie chart\n                            return function (shape) {\n                                shape.set('zIndex', -1);\n                                var container = shape.get('parent');\n                                container.sort();\n                            };\n                        }\n                        return ShapeAction.fadeIn;\n                    }\n                },\n                area: {\n                    enter: function enter(coord) {\n                        if (coord.isPolar)\n                            return null;\n                        return ShapeAction.fadeIn;\n                    }\n                },\n                line: {\n                    enter: function enter(coord) {\n                        if (coord.isPolar)\n                            return null;\n                        return ShapeAction.fadeIn;\n                    }\n                },\n                path: {\n                    enter: function enter(coord) {\n                        if (coord.isPolar)\n                            return null;\n                        return ShapeAction.fadeIn;\n                    }\n                }\n            };\n            var GROUP_ANIMATION = {\n                line: function line(coord) {\n                    if (coord.isPolar) {\n                        return GroupAction.groupScaleInXY;\n                    }\n                    return GroupAction.groupWaveIn;\n                },\n                area: function area(coord) {\n                    if (coord.isPolar) {\n                        return GroupAction.groupScaleInXY;\n                    }\n                    return GroupAction.groupWaveIn;\n                },\n                path: function path(coord) {\n                    if (coord.isPolar) {\n                        return GroupAction.groupScaleInXY;\n                    }\n                    return GroupAction.groupWaveIn;\n                },\n                point: function point() {\n                    return GroupAction.shapesScaleInXY;\n                },\n                interval: function interval(coord) {\n                    var result;\n                    if (coord.isPolar) {\n                        // polar coodinate\n                        result = GroupAction.groupScaleInXY;\n                        if (coord.transposed) {\n                            // pie chart\n                            result = GroupAction.groupWaveIn;\n                        }\n                    }\n                    else {\n                        result = coord.transposed ? GroupAction.groupScaleInX : GroupAction.groupScaleInY;\n                    }\n                    return result;\n                },\n                schema: function schema() {\n                    return GroupAction.groupWaveIn;\n                }\n            };\n            function diff(fromAttrs, toAttrs) {\n                var endState = {};\n                for (var k in toAttrs) {\n                    if (Util.isNumber(fromAttrs[k]) && fromAttrs[k] !== toAttrs[k]) {\n                        endState[k] = toAttrs[k];\n                    }\n                    else if (Util.isArray(fromAttrs[k]) && JSON.stringify(fromAttrs[k]) !== JSON.stringify(toAttrs[k])) {\n                        endState[k] = toAttrs[k];\n                    }\n                }\n                return endState;\n            } // Add a unique id identifier to each shape\n            function _getShapeId(geom, dataObj, geomIdx) {\n                var type = geom.get('type');\n                var id = 'geom' + geomIdx + '-' + type;\n                var xScale = geom.getXScale();\n                var yScale = geom.getYScale();\n                var xField = xScale.field || 'x';\n                var yField = yScale.field || 'y';\n                var yVal = dataObj[yField];\n                var xVal;\n                if (xScale.isIdentity) {\n                    xVal = xScale.value;\n                }\n                else {\n                    xVal = dataObj[xField];\n                }\n                if (type === 'interval' || type === 'schema') {\n                    id += '-' + xVal;\n                }\n                else if (type === 'line' || type === 'area' || type === 'path') {\n                    id += '-' + type;\n                }\n                else {\n                    id += xScale.isCategory ? '-' + xVal : '-' + xVal + '-' + yVal;\n                }\n                var groupScales = geom._getGroupScales();\n                Util.each(groupScales, function (groupScale) {\n                    var field = groupScale.field;\n                    if (groupScale.type !== 'identity') {\n                        id += '-' + dataObj[field];\n                    }\n                });\n                return id;\n            } // get geometry's shapes\n            function getShapes(geoms, chart, coord) {\n                var shapes = [];\n                Util.each(geoms, function (geom, geomIdx) {\n                    var geomContainer = geom.get('container');\n                    var geomShapes = geomContainer.get('children');\n                    var type = geom.get('type');\n                    var animateCfg = Util.isNil(geom.get('animateCfg')) ? _getAnimateCfgByShapeType(type, chart) : geom.get('animateCfg');\n                    if (animateCfg !== false) {\n                        Util.each(geomShapes, function (shape, index) {\n                            if (shape.get('className') === type) {\n                                shape._id = _getShapeId(geom, shape.get('origin')._origin, geomIdx);\n                                shape.set('coord', coord);\n                                shape.set('animateCfg', animateCfg);\n                                shape.set('index', index);\n                                shapes.push(shape);\n                            }\n                        });\n                    }\n                    geom.set('shapes', geomShapes);\n                });\n                return shapes;\n            }\n            function cache(shapes) {\n                var rst = {};\n                for (var i = 0, len = shapes.length; i < len; i++) {\n                    var shape = shapes[i];\n                    if (!shape._id || shape.isClip)\n                        continue;\n                    var id = shape._id;\n                    rst[id] = {\n                        _id: id,\n                        type: shape.get('type'),\n                        // the type of shape\n                        attrs: Util.mix({}, shape._attrs.attrs),\n                        // the graphics attributes of shape\n                        className: shape.get('className'),\n                        geomType: shape.get('className'),\n                        index: shape.get('index'),\n                        coord: shape.get('coord'),\n                        animateCfg: shape.get('animateCfg')\n                    };\n                }\n                return rst;\n            }\n            function getAnimate(geomType, coord, animationType, animationName) {\n                var result;\n                if (Util.isFunction(animationName)) {\n                    result = animationName;\n                }\n                else if (Util.isString(animationName)) {\n                    result = Animate.Action[animationName];\n                }\n                else {\n                    result = Animate.getAnimation(geomType, coord, animationType);\n                }\n                return result;\n            }\n            function getAnimateCfg(geomType, animationType, animateCfg) {\n                if (animateCfg === false || Util.isObject(animateCfg) && animateCfg[animationType] === false) {\n                    return false;\n                }\n                var defaultCfg = Animate.getAnimateCfg(geomType, animationType);\n                if (animateCfg && animateCfg[animationType]) {\n                    return Util.deepMix({}, defaultCfg, animateCfg[animationType]);\n                }\n                return defaultCfg;\n            }\n            function addAnimate(cache, shapes, canvas) {\n                var animate;\n                var animateCfg; // the order of animation: leave -> update -> enter\n                var updateShapes = [];\n                var newShapes = [];\n                Util.each(shapes, function (shape) {\n                    var result = cache[shape._id];\n                    if (!result) {\n                        newShapes.push(shape);\n                    }\n                    else {\n                        shape.set('cacheShape', result);\n                        updateShapes.push(shape);\n                        delete cache[shape._id];\n                    }\n                }); // first do the leave animation\n                Util.each(cache, function (deletedShape) {\n                    var className = deletedShape.className, coord = deletedShape.coord, _id = deletedShape._id, attrs = deletedShape.attrs, index = deletedShape.index, type = deletedShape.type;\n                    animateCfg = getAnimateCfg(className, 'leave', deletedShape.animateCfg);\n                    if (animateCfg === false)\n                        return true;\n                    animate = getAnimate(className, coord, 'leave', animateCfg.animation);\n                    if (Util.isFunction(animate)) {\n                        var tempShape = canvas.addShape(type, {\n                            attrs: attrs,\n                            index: index,\n                            canvas: canvas,\n                            className: className\n                        });\n                        tempShape._id = _id;\n                        animate(tempShape, animateCfg, coord);\n                    }\n                }); // then do the update animation\n                Util.each(updateShapes, function (updateShape) {\n                    var className = updateShape.get('className');\n                    animateCfg = getAnimateCfg(className, 'update', updateShape.get('animateCfg'));\n                    if (animateCfg === false)\n                        return true;\n                    var coord = updateShape.get('coord');\n                    var cacheAttrs = updateShape.get('cacheShape').attrs;\n                    var endState = diff(cacheAttrs, updateShape._attrs.attrs); // 判断如果属性相同的话就不进行变换\n                    if (Object.keys(endState).length) {\n                        animate = getAnimate(className, coord, 'update', animateCfg.animation);\n                        if (Util.isFunction(animate)) {\n                            animate(updateShape, animateCfg, coord);\n                        }\n                        else {\n                            updateShape.attr(cacheAttrs);\n                            updateShape.animate().to({\n                                attrs: endState,\n                                duration: animateCfg.duration,\n                                easing: animateCfg.easing,\n                                delay: animateCfg.delay\n                            }).onEnd(function () {\n                                updateShape.set('cacheShape', null);\n                            });\n                        }\n                    }\n                }); // last, enter animation\n                Util.each(newShapes, function (newShape) {\n                    // 新图形元素的进场元素\n                    var className = newShape.get('className');\n                    var coord = newShape.get('coord');\n                    animateCfg = getAnimateCfg(className, 'enter', newShape.get('animateCfg'));\n                    if (animateCfg === false)\n                        return true;\n                    animate = getAnimate(className, coord, 'enter', animateCfg.animation);\n                    if (Util.isFunction(animate)) {\n                        if (className === 'interval' && coord.isPolar && coord.transposed) {\n                            var index = newShape.get('index');\n                            var lastShape = updateShapes[index - 1];\n                            animate(newShape, animateCfg, lastShape);\n                        }\n                        else {\n                            animate(newShape, animateCfg, coord);\n                        }\n                    }\n                });\n            }\n            function _getAnimateCfgByShapeType(type, chart) {\n                if (!type) {\n                    return null;\n                }\n                var animateCfg = chart.get('animate');\n                if (type.indexOf('guide-tag') > -1) {\n                    type = 'guide-tag';\n                }\n                if (Util.isObject(animateCfg)) {\n                    return animateCfg[type];\n                }\n                if (animateCfg === false) {\n                    return false;\n                }\n                return null;\n            }\n            module.exports = {\n                afterCanvasInit: function afterCanvasInit() {\n                    timeline = new Timeline();\n                    timeline.play();\n                },\n                beforeCanvasDraw: function beforeCanvasDraw(chart) {\n                    if (chart.get('animate') === false) {\n                        return;\n                    }\n                    var isUpdate = chart.get('isUpdate');\n                    var canvas = chart.get('canvas');\n                    var coord = chart.get('coord');\n                    var geoms = chart.get('geoms');\n                    var caches = canvas.get('caches') || [];\n                    if (caches.length === 0) {\n                        isUpdate = false;\n                    }\n                    var cacheShapes = getShapes(geoms, chart, coord);\n                    var _chart$get = chart.get('axisController'), frontPlot = _chart$get.frontPlot, backPlot = _chart$get.backPlot;\n                    var axisShapes = frontPlot.get('children').concat(backPlot.get('children'));\n                    var guideShapes = [];\n                    if (chart.get('guideController')) {\n                        guideShapes = chart.get('guideController').guideShapes;\n                    }\n                    var componentShapes = [];\n                    axisShapes.concat(guideShapes).forEach(function (s) {\n                        var className = s.get('className');\n                        var animateCfg = _getAnimateCfgByShapeType(className, chart);\n                        s.set('coord', coord);\n                        s.set('animateCfg', animateCfg);\n                        componentShapes.push(s);\n                        cacheShapes.push(s);\n                    });\n                    canvas.set('caches', cache(cacheShapes));\n                    if (isUpdate) {\n                        addAnimate(caches, cacheShapes, canvas);\n                    }\n                    else {\n                        // do the appear animation\n                        var animateCfg;\n                        var animate;\n                        Util.each(geoms, function (geom) {\n                            var type = geom.get('type');\n                            var geomCfg = Util.isNil(geom.get('animateCfg')) ? _getAnimateCfgByShapeType(type, chart) : geom.get('animateCfg');\n                            if (geomCfg !== false) {\n                                animateCfg = getAnimateCfg(type, 'appear', geomCfg);\n                                animate = getAnimate(type, coord, 'appear', animateCfg.animation);\n                                if (Util.isFunction(animate)) {\n                                    var shapes = geom.get('shapes');\n                                    Util.each(shapes, function (shape) {\n                                        animate(shape, animateCfg, coord);\n                                    });\n                                }\n                                else if (GROUP_ANIMATION[type]) {\n                                    // do the default animation\n                                    animate = GroupAction[animateCfg.animation] || GROUP_ANIMATION[type](coord);\n                                    var yScale = geom.getYScale();\n                                    var zeroY = coord.convertPoint({\n                                        x: 0,\n                                        y: yScale.scale(geom.getYMinValue())\n                                    });\n                                    var container = geom.get('container');\n                                    animate && animate(container, animateCfg, coord, zeroY);\n                                }\n                            }\n                        }); // do the animation of components\n                        Util.each(componentShapes, function (shape) {\n                            var animateCfg = shape.get('animateCfg');\n                            var className = shape.get('className');\n                            if (animateCfg && animateCfg.appear) {\n                                // if user configure\n                                var defaultCfg = Animate.getAnimateCfg(className, 'appear');\n                                var appearCfg = Util.deepMix({}, defaultCfg, animateCfg.appear);\n                                var _animate = getAnimate(className, coord, 'appear', appearCfg.animation);\n                                if (Util.isFunction(_animate)) {\n                                    _animate(shape, appearCfg, coord);\n                                }\n                            }\n                        });\n                    }\n                },\n                afterCanvasDestroyed: function afterCanvasDestroyed() {\n                    timeline.stop();\n                }\n            };\n            /***/ \n        }),\n        /* 131 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var _require = __webpack_require__(40), requestAnimationFrame = _require.requestAnimationFrame;\n            var clock = typeof performance === 'object' && performance.now ? performance : Date;\n            var Timeline = \n            /*#__PURE__*/\n            function () {\n                function Timeline() {\n                    this.anims = [];\n                    this.time = null;\n                    this.playing = false;\n                    this.canvas = [];\n                }\n                var _proto = Timeline.prototype;\n                _proto.play = function play() {\n                    var self = this;\n                    self.time = clock.now();\n                    self.playing = true;\n                    function step() {\n                        if (self.playing) {\n                            requestAnimationFrame(step);\n                            self.update();\n                        }\n                    }\n                    requestAnimationFrame(step);\n                };\n                _proto.stop = function stop() {\n                    this.playing = false;\n                    this.time = null;\n                    this.canvas = [];\n                };\n                _proto.update = function update() {\n                    var currentTime = clock.now();\n                    this.canvas = [];\n                    for (var i = 0; i < this.anims.length; i++) {\n                        var propertyAnim = this.anims[i];\n                        if (currentTime < propertyAnim.startTime || propertyAnim.hasEnded) {\n                            continue;\n                        }\n                        var shape = propertyAnim.shape; // shape\n                        if (shape.get('destroyed')) {\n                            this.anims.splice(i, 1);\n                            i--;\n                            continue;\n                        }\n                        var startState = propertyAnim.startState, endState = propertyAnim.endState, interpolate = propertyAnim.interpolate, duration = propertyAnim.duration;\n                        if (currentTime >= propertyAnim.startTime && !propertyAnim.hasStarted) {\n                            propertyAnim.hasStarted = true;\n                            if (propertyAnim.onStart) {\n                                propertyAnim.onStart();\n                            }\n                        }\n                        var t = (currentTime - propertyAnim.startTime) / duration;\n                        t = Math.max(0, Math.min(t, 1));\n                        t = propertyAnim.easing(t);\n                        if (propertyAnim.onFrame) {\n                            propertyAnim.onFrame(t);\n                        }\n                        else {\n                            for (var key in interpolate) {\n                                var diff = interpolate[key];\n                                var value = diff(t);\n                                var newValue = void 0;\n                                if (key === 'points') {\n                                    newValue = [];\n                                    var aLen = Math.max(startState.points.length, endState.points.length);\n                                    for (var j = 0; j < aLen; j += 2) {\n                                        newValue.push({\n                                            x: value[j],\n                                            y: value[j + 1]\n                                        });\n                                    }\n                                }\n                                else {\n                                    newValue = value;\n                                }\n                                shape._attrs.attrs[key] = newValue;\n                                shape._attrs.bbox = null; // should clear calculated bbox\n                            }\n                        }\n                        var canvas = shape.get('canvas');\n                        if (this.canvas.indexOf(canvas) === -1) {\n                            this.canvas.push(canvas);\n                        }\n                        if (propertyAnim.onUpdate) {\n                            propertyAnim.onUpdate(t);\n                        }\n                        if (currentTime >= propertyAnim.endTime && !propertyAnim.hasEnded) {\n                            propertyAnim.hasEnded = true;\n                            if (propertyAnim.onEnd) {\n                                propertyAnim.onEnd();\n                            }\n                        }\n                        if (t === 1) {\n                            // end\n                            this.anims.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    this.canvas.map(function (c) {\n                        c.draw();\n                        return c;\n                    });\n                    this.time = clock.now();\n                };\n                return Timeline;\n            }();\n            module.exports = Timeline;\n            /***/ \n        }),\n        /* 132 */\n        /***/ (function (module, exports, __webpack_require__) {\n            var Easing = __webpack_require__(133);\n            function plainArray(arr) {\n                var result = [];\n                for (var i = 0, len = arr.length; i < len; i++) {\n                    if (arr[i]) {\n                        result.push(arr[i].x);\n                        result.push(arr[i].y);\n                    }\n                }\n                return result;\n            }\n            function interpolateNumber(a, b) {\n                a = +a;\n                b -= a;\n                return function (t) {\n                    return a + b * t;\n                };\n            }\n            function interpolateArray(a, b) {\n                var nb = b ? b.length : 0;\n                var na = a ? Math.min(nb, a.length) : 0;\n                var x = new Array(na);\n                var c = new Array(nb);\n                var i;\n                for (i = 0; i < na; ++i) {\n                    x[i] = interpolateNumber(a[i], b[i]);\n                }\n                for (; i < nb; ++i) {\n                    c[i] = b[i];\n                }\n                return function (t) {\n                    for (i = 0; i < na; ++i) {\n                        c[i] = x[i](t);\n                    }\n                    return c;\n                };\n            }\n            var Animator = \n            /*#__PURE__*/\n            function () {\n                function Animator(shape, source, timeline) {\n                    this.hasStarted = false;\n                    this.hasEnded = false;\n                    this.shape = shape;\n                    this.source = source;\n                    this.timeline = timeline;\n                    this.animate = null;\n                } // delay, attrs, duration, easing\n                var _proto = Animator.prototype;\n                _proto.to = function to(cfg) {\n                    if (cfg === void 0) {\n                        cfg = {};\n                    }\n                    var delay = cfg.delay || 0;\n                    var attrs = cfg.attrs || {};\n                    var duration = cfg.duration || 1000;\n                    var easing; // 缓动函数\n                    if (typeof cfg.easing === 'function') {\n                        easing = cfg.easing;\n                    }\n                    else {\n                        easing = Easing[cfg.easing] || Easing.linear;\n                    }\n                    var animInfo = {\n                        shape: this.shape,\n                        startTime: this.timeline.time + delay,\n                        duration: duration,\n                        easing: easing\n                    };\n                    var interpolate = {}; // 差值函数\n                    for (var attrName in attrs) {\n                        var startValue = this.source[attrName];\n                        var endValue = attrs[attrName];\n                        if (attrName === 'points') {\n                            startValue = plainArray(startValue);\n                            endValue = plainArray(endValue);\n                            interpolate.points = interpolateArray(startValue, endValue);\n                            this.source.points = startValue;\n                            attrs.points = endValue;\n                        }\n                        else if (attrName === 'matrix') {\n                            interpolate.matrix = interpolateArray(startValue, endValue);\n                        }\n                        else {\n                            interpolate[attrName] = interpolateNumber(startValue, endValue);\n                        }\n                    }\n                    animInfo.interpolate = interpolate;\n                    animInfo.startState = this.source;\n                    animInfo.endState = attrs;\n                    animInfo.endTime = animInfo.startTime + duration;\n                    this.timeline.anims.push(animInfo);\n                    this.animate = animInfo;\n                    return this;\n                };\n                _proto.onFrame = function onFrame(callback) {\n                    // 自定义每一帧动画的动作\n                    if (this.animate) {\n                        this.animate.onFrame = function (frame) {\n                            callback(frame);\n                        };\n                    }\n                    return this;\n                };\n                _proto.onStart = function onStart(callback) {\n                    if (this.animate) {\n                        this.animate.onStart = function () {\n                            callback();\n                        };\n                    }\n                    return this;\n                };\n                _proto.onUpdate = function onUpdate(callback) {\n                    if (this.animate) {\n                        this.animate.onUpdate = function (frame) {\n                            callback(frame);\n                        };\n                    }\n                    return this;\n                };\n                _proto.onEnd = function onEnd(callback) {\n                    if (this.animate) {\n                        this.animate.onEnd = function () {\n                            callback();\n                        };\n                    }\n                    return this;\n                };\n                return Animator;\n            }();\n            module.exports = Animator;\n            /***/ \n        }),\n        /* 133 */\n        /***/ (function (module, exports) {\n            var Easing = {\n                linear: function linear(k) {\n                    return k;\n                },\n                quadraticIn: function quadraticIn(k) {\n                    return k * k;\n                },\n                quadraticOut: function quadraticOut(k) {\n                    return k * (2 - k);\n                },\n                quadraticInOut: function quadraticInOut(k) {\n                    if ((k *= 2) < 1) {\n                        return 0.5 * k * k;\n                    }\n                    return -0.5 * (--k * (k - 2) - 1);\n                },\n                cubicIn: function cubicIn(k) {\n                    return k * k * k;\n                },\n                cubicOut: function cubicOut(k) {\n                    return --k * k * k + 1;\n                },\n                cubicInOut: function cubicInOut(k) {\n                    if ((k *= 2) < 1) {\n                        return 0.5 * k * k * k;\n                    }\n                    return 0.5 * ((k -= 2) * k * k + 2);\n                },\n                elasticIn: function elasticIn(k) {\n                    var s;\n                    var a = 0.1;\n                    var p = 0.4;\n                    if (k === 0)\n                        return 0;\n                    if (k === 1)\n                        return 1;\n                    if (!p) {\n                        p = 0.3;\n                    }\n                    if (!a || a < 1) {\n                        a = 1;\n                        s = p / 4;\n                    }\n                    else {\n                        s = p / (2 * Math.PI) * Math.asin(1 / a);\n                    }\n                    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n                },\n                elasticOut: function elasticOut(k) {\n                    var s;\n                    var a = 0.1;\n                    var p = 0.4;\n                    if (k === 0)\n                        return 0;\n                    if (k === 1)\n                        return 1;\n                    if (!p) {\n                        p = 0.3;\n                    }\n                    if (!a || a < 1) {\n                        a = 1;\n                        s = p / 4;\n                    }\n                    else {\n                        s = p / (2 * Math.PI) * Math.asin(1 / a);\n                    }\n                    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;\n                },\n                elasticInOut: function elasticInOut(k) {\n                    var s;\n                    var a = 0.1;\n                    var p = 0.4;\n                    if (k === 0)\n                        return 0;\n                    if (k === 1)\n                        return 1;\n                    if (!p) {\n                        p = 0.3;\n                    }\n                    if (!a || a < 1) {\n                        a = 1;\n                        s = p / 4;\n                    }\n                    else {\n                        s = p / (2 * Math.PI) * Math.asin(1 / a);\n                    }\n                    if ((k *= 2) < 1) {\n                        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n                    }\n                    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n                },\n                backIn: function backIn(k) {\n                    var s = 1.70158;\n                    return k * k * ((s + 1) * k - s);\n                },\n                backOut: function backOut(k) {\n                    var s = 1.70158;\n                    return (k = k - 1) * k * ((s + 1) * k + s) + 1;\n                },\n                backInOut: function backInOut(k) {\n                    var s = 1.70158 * 1.525;\n                    if ((k *= 2) < 1) {\n                        return 0.5 * (k * k * ((s + 1) * k - s));\n                    }\n                    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n                },\n                bounceIn: function bounceIn(k) {\n                    return 1 - Easing.bounceOut(1 - k);\n                },\n                bounceOut: function bounceOut(k) {\n                    if ((k /= 1) < 1 / 2.75) {\n                        return 7.5625 * k * k;\n                    }\n                    else if (k < 2 / 2.75) {\n                        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n                    }\n                    else if (k < 2.5 / 2.75) {\n                        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n                    }\n                    return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n                },\n                bounceInOut: function bounceInOut(k) {\n                    if (k < 0.5) {\n                        return Easing.bounceIn(k * 2) * 0.5;\n                    }\n                    return Easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n                }\n            };\n            module.exports = Easing;\n            /***/ \n        }),\n        /* 134 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Animation functions for shape\n             * @author sima.zhang1990@gmail.com\n             */\n            var Util = __webpack_require__(0);\n            var Helpers = __webpack_require__(103);\n            /*\n            function waveIn(shape, animateCfg, coord) {\n              const clip = Helpers.getClip(coord);\n              clip.set('canvas', shape.get('canvas'));\n              shape.attr('clip', clip);\n              const onEnd = function() {\n                shape.attr('clip', null);\n                clip.remove(true);\n              };\n              Helpers.doAnimation(clip, clip.endState, animateCfg, onEnd);\n            }\n            \n            function scaleInX(shape, animateCfg) {\n              const box = shape.getBBox();\n              const points = shape.get('origin').points;\n              let x;\n              const y = (box.minY + box.maxY) / 2;\n            \n              if (points[0].y - points[1].y > 0) { // 当顶点在零点之下\n                x = box.maxX;\n              } else {\n                x = box.minX;\n              }\n              const scaledMatrix = Helpers.getScaledMatrix(shape, [ x, y ], 'x');\n              Helpers.doAnimation(shape, { matrix: scaledMatrix }, animateCfg);\n            }\n            \n            function scaleInY(shape, animateCfg) {\n              const box = shape.getBBox();\n              const points = shape.get('origin').points;\n              const x = (box.minX + box.maxX) / 2;\n              let y;\n            \n              if (points[0].y - points[1].y <= 0) { // 当顶点在零点之下\n                y = box.maxY;\n              } else {\n                y = box.minY;\n              }\n              const scaledMatrix = Helpers.getScaledMatrix(shape, [ x, y ], 'x');\n              Helpers.doAnimation(shape, { matrix: scaledMatrix }, animateCfg);\n            }\n            */\n            function fadeIn(shape, animateCfg) {\n                var fillOpacity = Util.isNil(shape.attr('fillOpacity')) ? 1 : shape.attr('fillOpacity');\n                var strokeOpacity = Util.isNil(shape.attr('strokeOpacity')) ? 1 : shape.attr('strokeOpacity');\n                shape.attr('fillOpacity', 0);\n                shape.attr('strokeOpacity', 0);\n                var endState = {\n                    fillOpacity: fillOpacity,\n                    strokeOpacity: strokeOpacity\n                };\n                Helpers.doAnimation(shape, endState, animateCfg);\n            }\n            module.exports = {\n                // waveIn,\n                // scaleInX,\n                // scaleInY,\n                fadeIn: fadeIn\n            };\n            /***/ \n        }),\n        /* 135 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Group animate functions\n             * @author sima.zhang1990@gmail.com\n             */\n            var Util = __webpack_require__(103);\n            var Helper = __webpack_require__(28);\n            var _require = __webpack_require__(5), Shape = _require.Shape;\n            function _groupScaleIn(container, animateCfg, coord, zeroY, type) {\n                var _Util$getCoordInfo = Util.getCoordInfo(coord), start = _Util$getCoordInfo.start, end = _Util$getCoordInfo.end, width = _Util$getCoordInfo.width, height = _Util$getCoordInfo.height;\n                var x;\n                var y;\n                var clip = new Shape.Rect({\n                    attrs: {\n                        x: start.x,\n                        y: end.y,\n                        width: width,\n                        height: height\n                    }\n                });\n                if (type === 'y') {\n                    x = start.x + width / 2;\n                    y = zeroY.y < start.y ? zeroY.y : start.y;\n                }\n                else if (type === 'x') {\n                    x = zeroY.x > start.x ? zeroY.x : start.x;\n                    y = start.y + height / 2;\n                }\n                else if (type === 'xy') {\n                    if (coord.isPolar) {\n                        x = coord.center.x;\n                        y = coord.center.y;\n                    }\n                    else {\n                        x = (start.x + end.x) / 2;\n                        y = (start.y + end.y) / 2;\n                    }\n                }\n                var endMatrix = Util.getScaledMatrix(clip, [x, y], type);\n                clip.isClip = true;\n                clip.endState = {\n                    matrix: endMatrix\n                };\n                clip.set('canvas', container.get('canvas'));\n                container.attr('clip', clip);\n                var onEnd = function onEnd() {\n                    container.attr('clip', null);\n                    clip.remove(true);\n                };\n                Util.doAnimation(clip, clip.endState, animateCfg, onEnd);\n            }\n            function _shapeScale(container, animateCfg, type) {\n                var shapes = container.get('children');\n                var x;\n                var y;\n                var endMatrix;\n                for (var i = 0, len = shapes.length; i < len; i++) {\n                    var shape = shapes[i];\n                    var box = shape.getBBox();\n                    x = (box.minX + box.maxX) / 2;\n                    y = (box.minY + box.maxY) / 2;\n                    endMatrix = Util.getScaledMatrix(shape, [x, y], type);\n                    Util.doAnimation(shape, {\n                        matrix: endMatrix\n                    }, animateCfg);\n                }\n            }\n            function groupScaleInX(container, animateCfg, coord, zeroY) {\n                _groupScaleIn(container, animateCfg, coord, zeroY, 'x');\n            }\n            function groupScaleInY(container, animateCfg, coord, zeroY) {\n                _groupScaleIn(container, animateCfg, coord, zeroY, 'y');\n            }\n            function groupScaleInXY(container, animateCfg, coord, zeroY) {\n                _groupScaleIn(container, animateCfg, coord, zeroY, 'xy');\n            }\n            function shapesScaleInX(container, animateCfg) {\n                _shapeScale(container, animateCfg, 'x');\n            }\n            function shapesScaleInY(container, animateCfg) {\n                _shapeScale(container, animateCfg, 'y');\n            }\n            function shapesScaleInXY(container, animateCfg) {\n                _shapeScale(container, animateCfg, 'xy');\n            }\n            function groupWaveIn(container, animateCfg, coord) {\n                var clip = Helper.getClip(coord);\n                clip.set('canvas', container.get('canvas'));\n                container.attr('clip', clip);\n                var onEnd = function onEnd() {\n                    container.attr('clip', null);\n                    clip.remove(true);\n                };\n                var endState = {};\n                if (coord.isPolar) {\n                    var startAngle = coord.startAngle, endAngle = coord.endAngle;\n                    endState.endAngle = endAngle;\n                    clip.attr('endAngle', startAngle);\n                }\n                else {\n                    var start = coord.start, end = coord.end;\n                    var width = Math.abs(start.x - end.x);\n                    var height = Math.abs(start.y - end.y);\n                    if (coord.isTransposed) {\n                        clip.attr('height', 0);\n                        endState.height = height;\n                    }\n                    else {\n                        clip.attr('width', 0);\n                        endState.width = width;\n                    }\n                }\n                Util.doAnimation(clip, endState, animateCfg, onEnd);\n            }\n            module.exports = {\n                groupWaveIn: groupWaveIn,\n                groupScaleInX: groupScaleInX,\n                groupScaleInY: groupScaleInY,\n                groupScaleInXY: groupScaleInXY,\n                shapesScaleInX: shapesScaleInX,\n                shapesScaleInY: shapesScaleInY,\n                shapesScaleInXY: shapesScaleInXY\n            };\n            /***/ \n        }),\n        /* 136 */ ,\n        /* 137 */ ,\n        /* 138 */ ,\n        /* 139 */ ,\n        /* 140 */\n        /***/ (function (module, exports, __webpack_require__) {\n            /**\n             * Default, without interactins\n             */\n            var F2 = __webpack_require__(45);\n            __webpack_require__(105);\n            __webpack_require__(93);\n            __webpack_require__(98); // polar coordinate\n            __webpack_require__(114); // the axis for polar coordinate\n            __webpack_require__(115); // timeCat scale\n            __webpack_require__(119);\n            __webpack_require__(120);\n            __webpack_require__(121);\n            __webpack_require__(122);\n            __webpack_require__(123);\n            __webpack_require__(124);\n            var Tooltip = __webpack_require__(125);\n            var Guide = __webpack_require__(128);\n            var Legend = __webpack_require__(129);\n            var Animation = __webpack_require__(130);\n            F2.Animate = __webpack_require__(102); // register plugins\n            F2.Chart.plugins.register([Tooltip, Legend, Guide, Animation]);\n            module.exports = F2;\n            /***/ \n        })\n        /******/ \n    ]);\n});\n\n\n//# sourceURL=webpack:///./node_modules/@antv/f2/build/f2.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/components/chart/chart.css":
/*!******************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/components/chart/chart.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \".i-chart .canvas {\\n    width: 100%;\\n    display: block;\\n}\", \"\"]);\n\n\n//# sourceURL=webpack:///./src/components/chart/chart.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n    var list = []; // return the list of modules as css string\n    list.toString = function toString() {\n        return this.map(function (item) {\n            var content = cssWithMappingToString(item, useSourceMap);\n            if (item[2]) {\n                return \"@media \".concat(item[2], \"{\").concat(content, \"}\");\n            }\n            return content;\n        }).join('');\n    }; // import a list of modules into the list\n    // eslint-disable-next-line func-names\n    list.i = function (modules, mediaQuery) {\n        if (typeof modules === 'string') {\n            // eslint-disable-next-line no-param-reassign\n            modules = [[null, modules, '']];\n        }\n        var alreadyImportedModules = {};\n        for (var i = 0; i < this.length; i++) {\n            // eslint-disable-next-line prefer-destructuring\n            var id = this[i][0];\n            if (id != null) {\n                alreadyImportedModules[id] = true;\n            }\n        }\n        for (var _i = 0; _i < modules.length; _i++) {\n            var item = modules[_i]; // skip already imported module\n            // this implementation is not 100% perfect for weird media query combinations\n            // when a module is imported multiple times with different media queries.\n            // I hope this will never occur (Hey this way we have smaller bundles)\n            if (item[0] == null || !alreadyImportedModules[item[0]]) {\n                if (mediaQuery && !item[2]) {\n                    item[2] = mediaQuery;\n                }\n                else if (mediaQuery) {\n                    item[2] = \"(\".concat(item[2], \") and (\").concat(mediaQuery, \")\");\n                }\n                list.push(item);\n            }\n        }\n    };\n    return list;\n};\nfunction cssWithMappingToString(item, useSourceMap) {\n    var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n    var cssMapping = item[3];\n    if (!cssMapping) {\n        return content;\n    }\n    if (useSourceMap && typeof btoa === 'function') {\n        var sourceMapping = toComment(cssMapping);\n        var sourceURLs = cssMapping.sources.map(function (source) {\n            return \"/*# sourceURL=\".concat(cssMapping.sourceRoot).concat(source, \" */\");\n        });\n        return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n    }\n    return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    return \"/*# \".concat(data, \" */\");\n}\n\n\n//# sourceURL=webpack:///./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\nfunction shouldUseNative() {\n    try {\n        if (!Object.assign) {\n            return false;\n        }\n        // Detect buggy property enumeration order in older V8 versions.\n        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n        test1[5] = 'de';\n        if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n        }\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test2 = {};\n        for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n        }\n        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n        });\n        if (order2.join('') !== '0123456789') {\n            return false;\n        }\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test3 = {};\n        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n        });\n        if (Object.keys(Object.assign({}, test3)).join('') !==\n            'abcdefghijklmnopqrst') {\n            return false;\n        }\n        return true;\n    }\n    catch (err) {\n        // We don't expect any of the above to throw, but better to be safe.\n        return false;\n    }\n}\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n};\n\n\n//# sourceURL=webpack:///./node_modules/object-assign/index.js?");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar printWarning = function () { };\nif (true) {\n    var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n    var loggedTypeFailures = {};\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n    printWarning = function (text) {\n        var message = 'Warning: ' + text;\n        if (typeof console !== 'undefined') {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        }\n        catch (x) { }\n    };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n    if (true) {\n        for (var typeSpecName in typeSpecs) {\n            if (has(typeSpecs, typeSpecName)) {\n                var error;\n                // Prop type validation may throw. In case they do, we don't want to\n                // fail the render phase where it didn't fail before. So we log it.\n                // After these have been cleaned up, we'll let them throw.\n                try {\n                    // This is intentionally an invariant that gets caught. It's the same\n                    // behavior as without this statement except with a better message.\n                    if (typeof typeSpecs[typeSpecName] !== 'function') {\n                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n                            'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n                        err.name = 'Invariant Violation';\n                        throw err;\n                    }\n                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n                }\n                catch (ex) {\n                    error = ex;\n                }\n                if (error && !(error instanceof Error)) {\n                    printWarning((componentName || 'React class') + ': type specification of ' +\n                        location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n                        'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n                        'You may have forgotten to pass an argument to the type checker ' +\n                        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n                        'shape all require an argument).');\n                }\n                if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                    // Only monitor this failure once because there tends to be a lot of the\n                    // same error.\n                    loggedTypeFailures[error.message] = true;\n                    var stack = getStack ? getStack() : '';\n                    printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n                }\n            }\n        }\n    }\n}\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function () {\n    if (true) {\n        loggedTypeFailures = {};\n    }\n};\nmodule.exports = checkPropTypes;\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/checkPropTypes.js?");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nmodule.exports = ReactPropTypesSecret;\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js?");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.8.6\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (true) {\n    (function () {\n        'use strict';\n        var _assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n        var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n        // TODO: this is special because it gets imported during build.\n        var ReactVersion = '16.8.6';\n        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n        // nor polyfill, then a plain number is used for performance.\n        var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\n        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = '@@iterator';\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== 'object') {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === 'function') {\n                return maybeIterator;\n            }\n            return null;\n        }\n        /**\n         * Use invariant() to assert state which your program assumes to be true.\n         *\n         * Provide sprintf-style format (only %s is supported) and arguments\n         * to provide information about what broke and what you were\n         * expecting.\n         *\n         * The invariant message will be stripped in production, but the invariant\n         * will remain to ensure logic does not differ in production.\n         */\n        var validateFormat = function () { };\n        {\n            validateFormat = function (format) {\n                if (format === undefined) {\n                    throw new Error('invariant requires an error message argument');\n                }\n            };\n        }\n        function invariant(condition, format, a, b, c, d, e, f) {\n            validateFormat(format);\n            if (!condition) {\n                var error = void 0;\n                if (format === undefined) {\n                    error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n                }\n                else {\n                    var args = [a, b, c, d, e, f];\n                    var argIndex = 0;\n                    error = new Error(format.replace(/%s/g, function () {\n                        return args[argIndex++];\n                    }));\n                    error.name = 'Invariant Violation';\n                }\n                error.framesToPop = 1; // we don't care about invariant's own frame\n                throw error;\n            }\n        }\n        // Relying on the `invariant()` implementation lets us\n        // preserve the format and params in the www builds.\n        /**\n         * Forked from fbjs/warning:\n         * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n         *\n         * Only change is we use console.warn instead of console.error,\n         * and do nothing when 'console' is not supported.\n         * This really simplifies the code.\n         * ---\n         * Similar to invariant but only logs a warning if the condition is not met.\n         * This can be used to log issues in development environments in critical\n         * paths. Removing the logging code for production environments will keep the\n         * same logic and follow the same code paths.\n         */\n        var lowPriorityWarning = function () { };\n        {\n            var printWarning = function (format) {\n                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                    args[_key - 1] = arguments[_key];\n                }\n                var argIndex = 0;\n                var message = 'Warning: ' + format.replace(/%s/g, function () {\n                    return args[argIndex++];\n                });\n                if (typeof console !== 'undefined') {\n                    console.warn(message);\n                }\n                try {\n                    // --- Welcome to debugging React ---\n                    // This error was thrown as a convenience so that you can use this stack\n                    // to find the callsite that caused this warning to fire.\n                    throw new Error(message);\n                }\n                catch (x) { }\n            };\n            lowPriorityWarning = function (condition, format) {\n                if (format === undefined) {\n                    throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n                }\n                if (!condition) {\n                    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n                        args[_key2 - 2] = arguments[_key2];\n                    }\n                    printWarning.apply(undefined, [format].concat(args));\n                }\n            };\n        }\n        var lowPriorityWarning$1 = lowPriorityWarning;\n        /**\n         * Similar to invariant but only logs a warning if the condition is not met.\n         * This can be used to log issues in development environments in critical\n         * paths. Removing the logging code for production environments will keep the\n         * same logic and follow the same code paths.\n         */\n        var warningWithoutStack = function () { };\n        {\n            warningWithoutStack = function (condition, format) {\n                for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                    args[_key - 2] = arguments[_key];\n                }\n                if (format === undefined) {\n                    throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n                }\n                if (args.length > 8) {\n                    // Check before the condition to catch violations early.\n                    throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n                }\n                if (condition) {\n                    return;\n                }\n                if (typeof console !== 'undefined') {\n                    var argsWithFormat = args.map(function (item) {\n                        return '' + item;\n                    });\n                    argsWithFormat.unshift('Warning: ' + format);\n                    // We intentionally don't use spread (or .apply) directly because it\n                    // breaks IE9: https://github.com/facebook/react/issues/13610\n                    Function.prototype.apply.call(console.error, console, argsWithFormat);\n                }\n                try {\n                    // --- Welcome to debugging React ---\n                    // This error was thrown as a convenience so that you can use this stack\n                    // to find the callsite that caused this warning to fire.\n                    var argIndex = 0;\n                    var message = 'Warning: ' + format.replace(/%s/g, function () {\n                        return args[argIndex++];\n                    });\n                    throw new Error(message);\n                }\n                catch (x) { }\n            };\n        }\n        var warningWithoutStack$1 = warningWithoutStack;\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n                var warningKey = componentName + '.' + callerName;\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                    return;\n                }\n                warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n            }\n        }\n        /**\n         * This is the abstract API for an update queue.\n         */\n        var ReactNoopUpdateQueue = {\n            /**\n             * Checks whether or not this composite component is mounted.\n             * @param {ReactClass} publicInstance The instance we want to test.\n             * @return {boolean} True if mounted, false otherwise.\n             * @protected\n             * @final\n             */\n            isMounted: function (publicInstance) {\n                return false;\n            },\n            /**\n             * Forces an update. This should only be invoked when it is known with\n             * certainty that we are **not** in a DOM transaction.\n             *\n             * You may want to call this when you know that some deeper aspect of the\n             * component's state has changed but `setState` was not called.\n             *\n             * This will not invoke `shouldComponentUpdate`, but it will invoke\n             * `componentWillUpdate` and `componentDidUpdate`.\n             *\n             * @param {ReactClass} publicInstance The instance that should rerender.\n             * @param {?function} callback Called after component is updated.\n             * @param {?string} callerName name of the calling function in the public API.\n             * @internal\n             */\n            enqueueForceUpdate: function (publicInstance, callback, callerName) {\n                warnNoop(publicInstance, 'forceUpdate');\n            },\n            /**\n             * Replaces all of the state. Always use this or `setState` to mutate state.\n             * You should treat `this.state` as immutable.\n             *\n             * There is no guarantee that `this.state` will be immediately updated, so\n             * accessing `this.state` after calling this method may return the old value.\n             *\n             * @param {ReactClass} publicInstance The instance that should rerender.\n             * @param {object} completeState Next state.\n             * @param {?function} callback Called after component is updated.\n             * @param {?string} callerName name of the calling function in the public API.\n             * @internal\n             */\n            enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, 'replaceState');\n            },\n            /**\n             * Sets a subset of the state. This only exists because _pendingState is\n             * internal. This provides a merging strategy that is not available to deep\n             * properties which is confusing. TODO: Expose pendingState or don't use it\n             * during the merge.\n             *\n             * @param {ReactClass} publicInstance The instance that should rerender.\n             * @param {object} partialState Next partial state to be merged with state.\n             * @param {?function} callback Called after component is updated.\n             * @param {?string} Name of the calling function in the public API.\n             * @internal\n             */\n            enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, 'setState');\n            }\n        };\n        var emptyObject = {};\n        {\n            Object.freeze(emptyObject);\n        }\n        /**\n         * Base class helpers for the updating state of a component.\n         */\n        function Component(props, context, updater) {\n            this.props = props;\n            this.context = context;\n            // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            // We initialize the default updater but the real one gets injected by the\n            // renderer.\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        /**\n         * Sets a subset of the state. Always use this to mutate\n         * state. You should treat `this.state` as immutable.\n         *\n         * There is no guarantee that `this.state` will be immediately updated, so\n         * accessing `this.state` after calling this method may return the old value.\n         *\n         * There is no guarantee that calls to `setState` will run synchronously,\n         * as they may eventually be batched together.  You can provide an optional\n         * callback that will be executed when the call to setState is actually\n         * completed.\n         *\n         * When a function is provided to setState, it will be called at some point in\n         * the future (not synchronously). It will be called with the up to date\n         * component arguments (state, props, context). These values can be different\n         * from this.* because your function may be called after receiveProps but before\n         * shouldComponentUpdate, and this new state, props, and context will not yet be\n         * assigned to this.\n         *\n         * @param {object|function} partialState Next partial state or function to\n         *        produce next partial state to be merged with current state.\n         * @param {?function} callback Called after state is updated.\n         * @final\n         * @protected\n         */\n        Component.prototype.setState = function (partialState, callback) {\n            !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n            this.updater.enqueueSetState(this, partialState, callback, 'setState');\n        };\n        /**\n         * Forces an update. This should only be invoked when it is known with\n         * certainty that we are **not** in a DOM transaction.\n         *\n         * You may want to call this when you know that some deeper aspect of the\n         * component's state has changed but `setState` was not called.\n         *\n         * This will not invoke `shouldComponentUpdate`, but it will invoke\n         * `componentWillUpdate` and `componentDidUpdate`.\n         *\n         * @param {?function} callback Called after update is complete.\n         * @final\n         * @protected\n         */\n        Component.prototype.forceUpdate = function (callback) {\n            this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n        };\n        /**\n         * Deprecated APIs. These APIs used to exist on classic React classes but since\n         * we would like to deprecate them, we're not going to move them over to this\n         * modern base class. Instead, we define a getter that warns if it's accessed.\n         */\n        {\n            var deprecatedAPIs = {\n                isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n                replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n            };\n            var defineDeprecationWarning = function (methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                    get: function () {\n                        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n                        return undefined;\n                    }\n                });\n            };\n            for (var fnName in deprecatedAPIs) {\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n            }\n        }\n        function ComponentDummy() { }\n        ComponentDummy.prototype = Component.prototype;\n        /**\n         * Convenience component with default shallow equality check for sCU.\n         */\n        function PureComponent(props, context, updater) {\n            this.props = props;\n            this.context = context;\n            // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent;\n        // Avoid an extra prototype jump for these methods.\n        _assign(pureComponentPrototype, Component.prototype);\n        pureComponentPrototype.isPureReactComponent = true;\n        // an immutable object with a single mutable value\n        function createRef() {\n            var refObject = {\n                current: null\n            };\n            {\n                Object.seal(refObject);\n            }\n            return refObject;\n        }\n        /**\n         * Keeps track of the current dispatcher.\n         */\n        var ReactCurrentDispatcher = {\n            /**\n             * @internal\n             * @type {ReactComponent}\n             */\n            current: null\n        };\n        /**\n         * Keeps track of the current owner.\n         *\n         * The current owner is the component who should own any components that are\n         * currently being constructed.\n         */\n        var ReactCurrentOwner = {\n            /**\n             * @internal\n             * @type {ReactComponent}\n             */\n            current: null\n        };\n        var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n        var describeComponentFrame = function (name, source, ownerName) {\n            var sourceInfo = '';\n            if (source) {\n                var path = source.fileName;\n                var fileName = path.replace(BEFORE_SLASH_RE, '');\n                {\n                    // In DEV, include code for a common special case:\n                    // prefer \"folder/index.js\" instead of just \"index.js\".\n                    if (/^index\\./.test(fileName)) {\n                        var match = path.match(BEFORE_SLASH_RE);\n                        if (match) {\n                            var pathBeforeSlash = match[1];\n                            if (pathBeforeSlash) {\n                                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n                                fileName = folderName + '/' + fileName;\n                            }\n                        }\n                    }\n                }\n                sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n            }\n            else if (ownerName) {\n                sourceInfo = ' (created by ' + ownerName + ')';\n            }\n            return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n        };\n        var Resolved = 1;\n        function refineResolvedLazyComponent(lazyComponent) {\n            return lazyComponent._status === Resolved ? lazyComponent._result : null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var functionName = innerType.displayName || innerType.name || '';\n            return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);\n        }\n        function getComponentName(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === 'number') {\n                    warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n                }\n            }\n            if (typeof type === 'function') {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === 'string') {\n                return type;\n            }\n            switch (type) {\n                case REACT_CONCURRENT_MODE_TYPE:\n                    return 'ConcurrentMode';\n                case REACT_FRAGMENT_TYPE:\n                    return 'Fragment';\n                case REACT_PORTAL_TYPE:\n                    return 'Portal';\n                case REACT_PROFILER_TYPE:\n                    return 'Profiler';\n                case REACT_STRICT_MODE_TYPE:\n                    return 'StrictMode';\n                case REACT_SUSPENSE_TYPE:\n                    return 'Suspense';\n            }\n            if (typeof type === 'object') {\n                switch (type.$$typeof) {\n                    case REACT_CONTEXT_TYPE:\n                        return 'Context.Consumer';\n                    case REACT_PROVIDER_TYPE:\n                        return 'Context.Provider';\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, 'ForwardRef');\n                    case REACT_MEMO_TYPE:\n                        return getComponentName(type.type);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var thenable = type;\n                            var resolvedThenable = refineResolvedLazyComponent(thenable);\n                            if (resolvedThenable) {\n                                return getComponentName(resolvedThenable);\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var ReactDebugCurrentFrame = {};\n        var currentlyValidatingElement = null;\n        function setCurrentlyValidatingElement(element) {\n            {\n                currentlyValidatingElement = element;\n            }\n        }\n        {\n            // Stack implementation injected by the current renderer.\n            ReactDebugCurrentFrame.getCurrentStack = null;\n            ReactDebugCurrentFrame.getStackAddendum = function () {\n                var stack = '';\n                // Add an extra top frame while an element is being validated\n                if (currentlyValidatingElement) {\n                    var name = getComponentName(currentlyValidatingElement.type);\n                    var owner = currentlyValidatingElement._owner;\n                    stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n                }\n                // Delegate to the injected renderer-specific implementation\n                var impl = ReactDebugCurrentFrame.getCurrentStack;\n                if (impl) {\n                    stack += impl() || '';\n                }\n                return stack;\n            };\n        }\n        var ReactSharedInternals = {\n            ReactCurrentDispatcher: ReactCurrentDispatcher,\n            ReactCurrentOwner: ReactCurrentOwner,\n            // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n            assign: _assign\n        };\n        {\n            _assign(ReactSharedInternals, {\n                // These should not be included in production.\n                ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n                // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n                // TODO: remove in React 17.0.\n                ReactComponentTreeHook: {}\n            });\n        }\n        /**\n         * Similar to invariant but only logs a warning if the condition is not met.\n         * This can be used to log issues in development environments in critical\n         * paths. Removing the logging code for production environments will keep the\n         * same logic and follow the same code paths.\n         */\n        var warning = warningWithoutStack$1;\n        {\n            warning = function (condition, format) {\n                if (condition) {\n                    return;\n                }\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                // eslint-disable-next-line react-internal/warning-and-invariant-args\n                for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                    args[_key - 2] = arguments[_key];\n                }\n                warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));\n            };\n        }\n        var warning$1 = warning;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown = void 0;\n        var specialPropRefWarningShown = void 0;\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, 'ref')) {\n                    var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, 'key')) {\n                    var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            var warnAboutAccessingKey = function () {\n                if (!specialPropKeyWarningShown) {\n                    specialPropKeyWarningShown = true;\n                    warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n                }\n            };\n            warnAboutAccessingKey.isReactWarning = true;\n            Object.defineProperty(props, 'key', {\n                get: warnAboutAccessingKey,\n                configurable: true\n            });\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            var warnAboutAccessingRef = function () {\n                if (!specialPropRefWarningShown) {\n                    specialPropRefWarningShown = true;\n                    warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n                }\n            };\n            warnAboutAccessingRef.isReactWarning = true;\n            Object.defineProperty(props, 'ref', {\n                get: warnAboutAccessingRef,\n                configurable: true\n            });\n        }\n        /**\n         * Factory method to create a new React element. This no longer adheres to\n         * the class pattern, so do not use new to call it. Also, no instanceof check\n         * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n         * if something is a React Element.\n         *\n         * @param {*} type\n         * @param {*} key\n         * @param {string|object} ref\n         * @param {*} self A *temporary* helper to detect places where `this` is\n         * different from the `owner` when React.createElement is called, so that we\n         * can warn. We want to get rid of owner and replace string `ref`s with arrow\n         * functions, and as long as `this` and owner are the same, there will be no\n         * change in behavior.\n         * @param {*} source An annotation object (added by a transpiler or otherwise)\n         * indicating filename, line number, and/or other information.\n         * @param {*} owner\n         * @param {*} props\n         * @internal\n         */\n        var ReactElement = function (type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {};\n                // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, 'validated', {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                });\n                // self and source are DEV only properties.\n                Object.defineProperty(element, '_self', {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                });\n                // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, '_source', {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        };\n        /**\n         * Create and return a new ReactElement of the given type.\n         * See https://reactjs.org/docs/react-api.html#createelement\n         */\n        function createElement(type, config, children) {\n            var propName = void 0;\n            // Reserved names are extracted\n            var props = {};\n            var key = null;\n            var ref = null;\n            var self = null;\n            var source = null;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                }\n                if (hasValidKey(config)) {\n                    key = '' + config.key;\n                }\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source;\n                // Remaining properties are added to a new props object\n                for (propName in config) {\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                }\n            }\n            // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            }\n            else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for (var i = 0; i < childrenLength; i++) {\n                    childArray[i] = arguments[i + 2];\n                }\n                {\n                    if (Object.freeze) {\n                        Object.freeze(childArray);\n                    }\n                }\n                props.children = childArray;\n            }\n            // Resolve default props\n            if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n                for (propName in defaultProps) {\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n            }\n            {\n                if (key || ref) {\n                    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n            }\n            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        /**\n         * Return a function that produces ReactElements of a given type.\n         * See https://reactjs.org/docs/react-api.html#createfactory\n         */\n        function cloneAndReplaceKey(oldElement, newKey) {\n            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n            return newElement;\n        }\n        /**\n         * Clone and return a new ReactElement using element as the starting point.\n         * See https://reactjs.org/docs/react-api.html#cloneelement\n         */\n        function cloneElement(element, config, children) {\n            !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;\n            var propName = void 0;\n            // Original props are copied\n            var props = _assign({}, element.props);\n            // Reserved names are extracted\n            var key = element.key;\n            var ref = element.ref;\n            // Self is preserved since the owner is preserved.\n            var self = element._self;\n            // Source is preserved since cloneElement is unlikely to be targeted by a\n            // transpiler, and the original source is probably a better indicator of the\n            // true owner.\n            var source = element._source;\n            // Owner will be preserved, unless ref is overridden\n            var owner = element._owner;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    // Silently steal the ref from the parent.\n                    ref = config.ref;\n                    owner = ReactCurrentOwner.current;\n                }\n                if (hasValidKey(config)) {\n                    key = '' + config.key;\n                }\n                // Remaining properties override existing props\n                var defaultProps = void 0;\n                if (element.type && element.type.defaultProps) {\n                    defaultProps = element.type.defaultProps;\n                }\n                for (propName in config) {\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        if (config[propName] === undefined && defaultProps !== undefined) {\n                            // Resolve default props\n                            props[propName] = defaultProps[propName];\n                        }\n                        else {\n                            props[propName] = config[propName];\n                        }\n                    }\n                }\n            }\n            // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            }\n            else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for (var i = 0; i < childrenLength; i++) {\n                    childArray[i] = arguments[i + 2];\n                }\n                props.children = childArray;\n            }\n            return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n         * Verifies the object is a ReactElement.\n         * See https://reactjs.org/docs/react-api.html#isvalidelement\n         * @param {?object} object\n         * @return {boolean} True if `object` is a ReactElement.\n         * @final\n         */\n        function isValidElement(object) {\n            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        var SEPARATOR = '.';\n        var SUBSEPARATOR = ':';\n        /**\n         * Escape and wrap key so it is safe to use as a reactid\n         *\n         * @param {string} key to be escaped.\n         * @return {string} the escaped key.\n         */\n        function escape(key) {\n            var escapeRegex = /[=:]/g;\n            var escaperLookup = {\n                '=': '=0',\n                ':': '=2'\n            };\n            var escapedString = ('' + key).replace(escapeRegex, function (match) {\n                return escaperLookup[match];\n            });\n            return '$' + escapedString;\n        }\n        /**\n         * TODO: Test that a single child and an array with one item have the same key\n         * pattern.\n         */\n        var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n        function escapeUserProvidedKey(text) {\n            return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n        }\n        var POOL_SIZE = 10;\n        var traverseContextPool = [];\n        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n            if (traverseContextPool.length) {\n                var traverseContext = traverseContextPool.pop();\n                traverseContext.result = mapResult;\n                traverseContext.keyPrefix = keyPrefix;\n                traverseContext.func = mapFunction;\n                traverseContext.context = mapContext;\n                traverseContext.count = 0;\n                return traverseContext;\n            }\n            else {\n                return {\n                    result: mapResult,\n                    keyPrefix: keyPrefix,\n                    func: mapFunction,\n                    context: mapContext,\n                    count: 0\n                };\n            }\n        }\n        function releaseTraverseContext(traverseContext) {\n            traverseContext.result = null;\n            traverseContext.keyPrefix = null;\n            traverseContext.func = null;\n            traverseContext.context = null;\n            traverseContext.count = 0;\n            if (traverseContextPool.length < POOL_SIZE) {\n                traverseContextPool.push(traverseContext);\n            }\n        }\n        /**\n         * @param {?*} children Children tree container.\n         * @param {!string} nameSoFar Name of the key path so far.\n         * @param {!function} callback Callback to invoke with each child found.\n         * @param {?*} traverseContext Used to pass information throughout the traversal\n         * process.\n         * @return {!number} The number of children in this subtree.\n         */\n        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n            var type = typeof children;\n            if (type === 'undefined' || type === 'boolean') {\n                // All of the above are perceived as null.\n                children = null;\n            }\n            var invokeCallback = false;\n            if (children === null) {\n                invokeCallback = true;\n            }\n            else {\n                switch (type) {\n                    case 'string':\n                    case 'number':\n                        invokeCallback = true;\n                        break;\n                    case 'object':\n                        switch (children.$$typeof) {\n                            case REACT_ELEMENT_TYPE:\n                            case REACT_PORTAL_TYPE:\n                                invokeCallback = true;\n                        }\n                }\n            }\n            if (invokeCallback) {\n                callback(traverseContext, children, \n                // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows.\n                nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n                return 1;\n            }\n            var child = void 0;\n            var nextName = void 0;\n            var subtreeCount = 0; // Count of children found in the current subtree.\n            var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n            if (Array.isArray(children)) {\n                for (var i = 0; i < children.length; i++) {\n                    child = children[i];\n                    nextName = nextNamePrefix + getComponentKey(child, i);\n                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n                }\n            }\n            else {\n                var iteratorFn = getIteratorFn(children);\n                if (typeof iteratorFn === 'function') {\n                    {\n                        // Warn about using Maps as children\n                        if (iteratorFn === children.entries) {\n                            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                    var iterator = iteratorFn.call(children);\n                    var step = void 0;\n                    var ii = 0;\n                    while (!(step = iterator.next()).done) {\n                        child = step.value;\n                        nextName = nextNamePrefix + getComponentKey(child, ii++);\n                        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n                    }\n                }\n                else if (type === 'object') {\n                    var addendum = '';\n                    {\n                        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n                    }\n                    var childrenString = '' + children;\n                    invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n                }\n            }\n            return subtreeCount;\n        }\n        /**\n         * Traverses children that are typically specified as `props.children`, but\n         * might also be specified through attributes:\n         *\n         * - `traverseAllChildren(this.props.children, ...)`\n         * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n         *\n         * The `traverseContext` is an optional argument that is passed through the\n         * entire traversal. It can be used to store accumulations or anything else that\n         * the callback might find relevant.\n         *\n         * @param {?*} children Children tree object.\n         * @param {!function} callback To invoke upon traversing each child.\n         * @param {?*} traverseContext Context for traversal.\n         * @return {!number} The number of children in this subtree.\n         */\n        function traverseAllChildren(children, callback, traverseContext) {\n            if (children == null) {\n                return 0;\n            }\n            return traverseAllChildrenImpl(children, '', callback, traverseContext);\n        }\n        /**\n         * Generate a key string that identifies a component within a set.\n         *\n         * @param {*} component A component that could contain a manual key.\n         * @param {number} index Index that is used if a manual key is not provided.\n         * @return {string}\n         */\n        function getComponentKey(component, index) {\n            // Do some typechecking here since we call this blindly. We want to ensure\n            // that we don't block potential future ES APIs.\n            if (typeof component === 'object' && component !== null && component.key != null) {\n                // Explicit key\n                return escape(component.key);\n            }\n            // Implicit key determined by the index in the set\n            return index.toString(36);\n        }\n        function forEachSingleChild(bookKeeping, child, name) {\n            var func = bookKeeping.func, context = bookKeeping.context;\n            func.call(context, child, bookKeeping.count++);\n        }\n        /**\n         * Iterates through children that are typically specified as `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n         *\n         * The provided forEachFunc(child, index) will be called for each\n         * leaf child.\n         *\n         * @param {?*} children Children tree container.\n         * @param {function(*, int)} forEachFunc\n         * @param {*} forEachContext Context for forEachContext.\n         */\n        function forEachChildren(children, forEachFunc, forEachContext) {\n            if (children == null) {\n                return children;\n            }\n            var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n            traverseAllChildren(children, forEachSingleChild, traverseContext);\n            releaseTraverseContext(traverseContext);\n        }\n        function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n            var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;\n            var mappedChild = func.call(context, child, bookKeeping.count++);\n            if (Array.isArray(mappedChild)) {\n                mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n                    return c;\n                });\n            }\n            else if (mappedChild != null) {\n                if (isValidElement(mappedChild)) {\n                    mappedChild = cloneAndReplaceKey(mappedChild, \n                    // Keep both the (mapped) and old keys if they differ, just as\n                    // traverseAllChildren used to do for objects as children\n                    keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n                }\n                result.push(mappedChild);\n            }\n        }\n        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n            var escapedPrefix = '';\n            if (prefix != null) {\n                escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n            }\n            var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n            traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n            releaseTraverseContext(traverseContext);\n        }\n        /**\n         * Maps children that are typically specified as `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n         *\n         * The provided mapFunction(child, key, index) will be called for each\n         * leaf child.\n         *\n         * @param {?*} children Children tree container.\n         * @param {function(*, int)} func The map function.\n         * @param {*} context Context for mapFunction.\n         * @return {object} Object containing the ordered map of results.\n         */\n        function mapChildren(children, func, context) {\n            if (children == null) {\n                return children;\n            }\n            var result = [];\n            mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n            return result;\n        }\n        /**\n         * Count the number of children that are typically specified as\n         * `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#reactchildrencount\n         *\n         * @param {?*} children Children tree container.\n         * @return {number} The number of children.\n         */\n        function countChildren(children) {\n            return traverseAllChildren(children, function () {\n                return null;\n            }, null);\n        }\n        /**\n         * Flatten a children object (typically specified as `props.children`) and\n         * return an array with appropriately re-keyed children.\n         *\n         * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n         */\n        function toArray(children) {\n            var result = [];\n            mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n                return child;\n            });\n            return result;\n        }\n        /**\n         * Returns the first child in a collection of children and verifies that there\n         * is only one child in the collection.\n         *\n         * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n         *\n         * The current implementation of this function assumes that a single child gets\n         * passed without a wrapper, but the purpose of this helper function is to\n         * abstract away the particular structure of children.\n         *\n         * @param {?object} children Child collection structure.\n         * @return {ReactElement} The first and only `ReactElement` contained in the\n         * structure.\n         */\n        function onlyChild(children) {\n            !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n            return children;\n        }\n        function createContext(defaultValue, calculateChangedBits) {\n            if (calculateChangedBits === undefined) {\n                calculateChangedBits = null;\n            }\n            else {\n                {\n                    !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n                }\n            }\n            var context = {\n                $$typeof: REACT_CONTEXT_TYPE,\n                _calculateChangedBits: calculateChangedBits,\n                // As a workaround to support multiple concurrent renderers, we categorize\n                // some renderers as primary and others as secondary. We only expect\n                // there to be two concurrent renderers at most: React Native (primary) and\n                // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                // Secondary renderers store their context values on separate fields.\n                _currentValue: defaultValue,\n                _currentValue2: defaultValue,\n                // Used to track how many concurrent renderers this context currently\n                // supports within in a single renderer. Such as parallel server rendering.\n                _threadCount: 0,\n                // These are circular\n                Provider: null,\n                Consumer: null\n            };\n            context.Provider = {\n                $$typeof: REACT_PROVIDER_TYPE,\n                _context: context\n            };\n            var hasWarnedAboutUsingNestedContextConsumers = false;\n            var hasWarnedAboutUsingConsumerProvider = false;\n            {\n                // A separate object, but proxies back to the original context object for\n                // backwards compatibility. It has a different $$typeof, so we can properly\n                // warn for the incorrect usage of Context as a Consumer.\n                var Consumer = {\n                    $$typeof: REACT_CONTEXT_TYPE,\n                    _context: context,\n                    _calculateChangedBits: context._calculateChangedBits\n                };\n                // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n                Object.defineProperties(Consumer, {\n                    Provider: {\n                        get: function () {\n                            if (!hasWarnedAboutUsingConsumerProvider) {\n                                hasWarnedAboutUsingConsumerProvider = true;\n                                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n                            }\n                            return context.Provider;\n                        },\n                        set: function (_Provider) {\n                            context.Provider = _Provider;\n                        }\n                    },\n                    _currentValue: {\n                        get: function () {\n                            return context._currentValue;\n                        },\n                        set: function (_currentValue) {\n                            context._currentValue = _currentValue;\n                        }\n                    },\n                    _currentValue2: {\n                        get: function () {\n                            return context._currentValue2;\n                        },\n                        set: function (_currentValue2) {\n                            context._currentValue2 = _currentValue2;\n                        }\n                    },\n                    _threadCount: {\n                        get: function () {\n                            return context._threadCount;\n                        },\n                        set: function (_threadCount) {\n                            context._threadCount = _threadCount;\n                        }\n                    },\n                    Consumer: {\n                        get: function () {\n                            if (!hasWarnedAboutUsingNestedContextConsumers) {\n                                hasWarnedAboutUsingNestedContextConsumers = true;\n                                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n                            }\n                            return context.Consumer;\n                        }\n                    }\n                });\n                // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n                context.Consumer = Consumer;\n            }\n            {\n                context._currentRenderer = null;\n                context._currentRenderer2 = null;\n            }\n            return context;\n        }\n        function lazy(ctor) {\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _ctor: ctor,\n                // React uses these fields to store the result.\n                _status: -1,\n                _result: null\n            };\n            {\n                // In production, this would just set it on the object.\n                var defaultProps = void 0;\n                var propTypes = void 0;\n                Object.defineProperties(lazyType, {\n                    defaultProps: {\n                        configurable: true,\n                        get: function () {\n                            return defaultProps;\n                        },\n                        set: function (newDefaultProps) {\n                            warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n                            defaultProps = newDefaultProps;\n                            // Match production behavior more closely:\n                            Object.defineProperty(lazyType, 'defaultProps', {\n                                enumerable: true\n                            });\n                        }\n                    },\n                    propTypes: {\n                        configurable: true,\n                        get: function () {\n                            return propTypes;\n                        },\n                        set: function (newPropTypes) {\n                            warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n                            propTypes = newPropTypes;\n                            // Match production behavior more closely:\n                            Object.defineProperty(lazyType, 'propTypes', {\n                                enumerable: true\n                            });\n                        }\n                    }\n                });\n            }\n            return lazyType;\n        }\n        function forwardRef(render) {\n            {\n                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n                    warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n                }\n                else if (typeof render !== 'function') {\n                    warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n                }\n                else {\n                    !(\n                    // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n                    render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n                }\n                if (render != null) {\n                    !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n                }\n            }\n            return {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n            };\n        }\n        function isValidElementType(type) {\n            return typeof type === 'string' || typeof type === 'function' ||\n                // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n                type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);\n        }\n        function memo(type, compare) {\n            {\n                if (!isValidElementType(type)) {\n                    warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n                }\n            }\n            return {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n            };\n        }\n        function resolveDispatcher() {\n            var dispatcher = ReactCurrentDispatcher.current;\n            !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;\n            return dispatcher;\n        }\n        function useContext(Context, unstable_observedBits) {\n            var dispatcher = resolveDispatcher();\n            {\n                !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;\n                // TODO: add a more generic warning for invalid values.\n                if (Context._context !== undefined) {\n                    var realContext = Context._context;\n                    // Don't deduplicate because this legitimately causes bugs\n                    // and nobody should be using this in existing code.\n                    if (realContext.Consumer === Context) {\n                        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n                    }\n                    else if (realContext.Provider === Context) {\n                        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n                    }\n                }\n            }\n            return dispatcher.useContext(Context, unstable_observedBits);\n        }\n        function useState(initialState) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useState(initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useReducer(reducer, initialArg, init);\n        }\n        function useRef(initialValue) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useRef(initialValue);\n        }\n        function useEffect(create, inputs) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useEffect(create, inputs);\n        }\n        function useLayoutEffect(create, inputs) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useLayoutEffect(create, inputs);\n        }\n        function useCallback(callback, inputs) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useCallback(callback, inputs);\n        }\n        function useMemo(create, inputs) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useMemo(create, inputs);\n        }\n        function useImperativeHandle(ref, create, inputs) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useImperativeHandle(ref, create, inputs);\n        }\n        function useDebugValue(value, formatterFn) {\n            {\n                var dispatcher = resolveDispatcher();\n                return dispatcher.useDebugValue(value, formatterFn);\n            }\n        }\n        /**\n         * ReactElementValidator provides a wrapper around a element factory\n         * which validates the props passed to the element. This is intended to be\n         * used only in DEV and could be replaced by a static type checker for languages\n         * that support it.\n         */\n        var propTypesMisspellWarningShown = void 0;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        function getDeclarationErrorAddendum() {\n            if (ReactCurrentOwner.current) {\n                var name = getComponentName(ReactCurrentOwner.current.type);\n                if (name) {\n                    return '\\n\\nCheck the render method of `' + name + '`.';\n                }\n            }\n            return '';\n        }\n        function getSourceInfoErrorAddendum(elementProps) {\n            if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n                var source = elementProps.__source;\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n                var lineNumber = source.lineNumber;\n                return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n            }\n            return '';\n        }\n        /**\n         * Warn if there's no key explicitly set on dynamic arrays of children or\n         * object keys are not valid. This allows us to keep track of children between\n         * updates.\n         */\n        var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            var info = getDeclarationErrorAddendum();\n            if (!info) {\n                var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n                if (parentName) {\n                    info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n                }\n            }\n            return info;\n        }\n        /**\n         * Warn if the element doesn't have an explicit key assigned to it.\n         * This element is in an array. The array could grow and shrink or be\n         * reordered. All children that haven't already been validated are required to\n         * have a \"key\" property assigned to it. Error statuses are cached so a warning\n         * will only be shown once.\n         *\n         * @internal\n         * @param {ReactElement} element Element that requires a key.\n         * @param {*} parentType element's parent's type.\n         */\n        function validateExplicitKey(element, parentType) {\n            if (!element._store || element._store.validated || element.key != null) {\n                return;\n            }\n            element._store.validated = true;\n            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n            }\n            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n            // Usually the current owner is the offender, but if it accepts children as a\n            // property, it may be the creator of the child that's responsible for\n            // assigning it a key.\n            var childOwner = '';\n            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';\n            }\n            setCurrentlyValidatingElement(element);\n            {\n                warning$1(false, 'Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n            }\n            setCurrentlyValidatingElement(null);\n        }\n        /**\n         * Ensure that every element either is passed in a static location, in an\n         * array with an explicit keys property defined, or in an object literal\n         * with valid key property.\n         *\n         * @internal\n         * @param {ReactNode} node Statically passed child of any type.\n         * @param {*} parentType node's parent's type.\n         */\n        function validateChildKeys(node, parentType) {\n            if (typeof node !== 'object') {\n                return;\n            }\n            if (Array.isArray(node)) {\n                for (var i = 0; i < node.length; i++) {\n                    var child = node[i];\n                    if (isValidElement(child)) {\n                        validateExplicitKey(child, parentType);\n                    }\n                }\n            }\n            else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                    node._store.validated = true;\n                }\n            }\n            else if (node) {\n                var iteratorFn = getIteratorFn(node);\n                if (typeof iteratorFn === 'function') {\n                    // Entry iterators used to provide implicit keys,\n                    // but now we print a separate warning for them later.\n                    if (iteratorFn !== node.entries) {\n                        var iterator = iteratorFn.call(node);\n                        var step = void 0;\n                        while (!(step = iterator.next()).done) {\n                            if (isValidElement(step.value)) {\n                                validateExplicitKey(step.value, parentType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n         * Given an element, validate that its props follow the propTypes definition,\n         * provided by the type.\n         *\n         * @param {ReactElement} element\n         */\n        function validatePropTypes(element) {\n            var type = element.type;\n            if (type === null || type === undefined || typeof type === 'string') {\n                return;\n            }\n            var name = getComponentName(type);\n            var propTypes = void 0;\n            if (typeof type === 'function') {\n                propTypes = type.propTypes;\n            }\n            else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||\n                // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                propTypes = type.propTypes;\n            }\n            else {\n                return;\n            }\n            if (propTypes) {\n                setCurrentlyValidatingElement(element);\n                checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n                setCurrentlyValidatingElement(null);\n            }\n            else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                propTypesMisspellWarningShown = true;\n                warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n            }\n            if (typeof type.getDefaultProps === 'function') {\n                !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n            }\n        }\n        /**\n         * Given a fragment, validate that it can only be provided with fragment props\n         * @param {ReactElement} fragment\n         */\n        function validateFragmentProps(fragment) {\n            setCurrentlyValidatingElement(fragment);\n            var keys = Object.keys(fragment.props);\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                if (key !== 'children' && key !== 'key') {\n                    warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n                    break;\n                }\n            }\n            if (fragment.ref !== null) {\n                warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n            }\n            setCurrentlyValidatingElement(null);\n        }\n        function createElementWithValidation(type, props, children) {\n            var validType = isValidElementType(type);\n            // We warn in this case but don't throw. We expect the element creation to\n            // succeed and there will likely be errors in render.\n            if (!validType) {\n                var info = '';\n                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                    info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n                var sourceInfo = getSourceInfoErrorAddendum(props);\n                if (sourceInfo) {\n                    info += sourceInfo;\n                }\n                else {\n                    info += getDeclarationErrorAddendum();\n                }\n                var typeString = void 0;\n                if (type === null) {\n                    typeString = 'null';\n                }\n                else if (Array.isArray(type)) {\n                    typeString = 'array';\n                }\n                else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                    typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';\n                    info = ' Did you accidentally export a JSX literal instead of a component?';\n                }\n                else {\n                    typeString = typeof type;\n                }\n                warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n            }\n            var element = createElement.apply(this, arguments);\n            // The result can be nullish if a mock or a custom function is used.\n            // TODO: Drop this when these are no longer allowed as the type argument.\n            if (element == null) {\n                return element;\n            }\n            // Skip key warning if the type isn't valid since our key validation logic\n            // doesn't expect a non-string/function type and can throw confusing errors.\n            // We don't want exception behavior to differ between dev and prod.\n            // (Rendering will throw with a helpful message and as soon as the type is\n            // fixed, the key warnings will appear.)\n            if (validType) {\n                for (var i = 2; i < arguments.length; i++) {\n                    validateChildKeys(arguments[i], type);\n                }\n            }\n            if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n            }\n            else {\n                validatePropTypes(element);\n            }\n            return element;\n        }\n        function createFactoryWithValidation(type) {\n            var validatedFactory = createElementWithValidation.bind(null, type);\n            validatedFactory.type = type;\n            // Legacy hook: remove it\n            {\n                Object.defineProperty(validatedFactory, 'type', {\n                    enumerable: false,\n                    get: function () {\n                        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n                        Object.defineProperty(this, 'type', {\n                            value: type\n                        });\n                        return type;\n                    }\n                });\n            }\n            return validatedFactory;\n        }\n        function cloneElementWithValidation(element, props, children) {\n            var newElement = cloneElement.apply(this, arguments);\n            for (var i = 2; i < arguments.length; i++) {\n                validateChildKeys(arguments[i], newElement.type);\n            }\n            validatePropTypes(newElement);\n            return newElement;\n        }\n        // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n        // In some cases, StrictMode should also double-render lifecycles.\n        // This can be confusing for tests though,\n        // And it can be bad for performance in production.\n        // This feature flag can be used to control the behavior:\n        // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n        // replay the begin phase of a failed component inside invokeGuardedCallback.\n        // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n        // Gather advanced timing metrics for Profiler subtrees.\n        // Trace which interactions trigger each commit.\n        // Only used in www builds.\n        // TODO: true? Here it might just be false.\n        // Only used in www builds.\n        // Only used in www builds.\n        // React Fire: prevent the value and checked attributes from syncing\n        // with their related DOM properties\n        // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n        // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n        var enableStableConcurrentModeAPIs = false;\n        var React = {\n            Children: {\n                map: mapChildren,\n                forEach: forEachChildren,\n                count: countChildren,\n                toArray: toArray,\n                only: onlyChild\n            },\n            createRef: createRef,\n            Component: Component,\n            PureComponent: PureComponent,\n            createContext: createContext,\n            forwardRef: forwardRef,\n            lazy: lazy,\n            memo: memo,\n            useCallback: useCallback,\n            useContext: useContext,\n            useEffect: useEffect,\n            useImperativeHandle: useImperativeHandle,\n            useDebugValue: useDebugValue,\n            useLayoutEffect: useLayoutEffect,\n            useMemo: useMemo,\n            useReducer: useReducer,\n            useRef: useRef,\n            useState: useState,\n            Fragment: REACT_FRAGMENT_TYPE,\n            StrictMode: REACT_STRICT_MODE_TYPE,\n            Suspense: REACT_SUSPENSE_TYPE,\n            createElement: createElementWithValidation,\n            cloneElement: cloneElementWithValidation,\n            createFactory: createFactoryWithValidation,\n            isValidElement: isValidElement,\n            version: ReactVersion,\n            unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,\n            unstable_Profiler: REACT_PROFILER_TYPE,\n            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n        };\n        // Note: some APIs are added with feature flags.\n        // Make sure that stable builds for open source\n        // don't modify the React object to avoid deopts.\n        // Also let's not expose their names in stable builds.\n        if (enableStableConcurrentModeAPIs) {\n            React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n            React.Profiler = REACT_PROFILER_TYPE;\n            React.unstable_ConcurrentMode = undefined;\n            React.unstable_Profiler = undefined;\n        }\n        var React$2 = Object.freeze({\n            default: React\n        });\n        var React$3 = (React$2 && React) || React$2;\n        // TODO: decide on the top-level export form.\n        // This is hacky but makes it work with both Rollup and Jest.\n        var react = React$3.default || React$3;\n        module.exports = react;\n    })();\n}\n\n\n//# sourceURL=webpack:///./node_modules/react/cjs/react.development.js?");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nif (false) {}\nelse {\n    module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n\n\n//# sourceURL=webpack:///./node_modules/react/index.js?");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL=webpack:///./node_modules/style-loader/lib/addStyles.js?");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\nmodule.exports = function (css) {\n    // get current location\n    var location = typeof window !== \"undefined\" && window.location;\n    if (!location) {\n        throw new Error(\"fixUrls requires window.location\");\n    }\n    // blank or null?\n    if (!css || typeof css !== \"string\") {\n        return css;\n    }\n    var baseUrl = location.protocol + \"//\" + location.host;\n    var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n    // convert each url(...)\n    /*\n    This regular expression is just a way to recursively match brackets within\n    a string.\n\n     /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n       (  = Start a capturing group\n         (?:  = Start a non-capturing group\n             [^)(]  = Match anything that isn't a parentheses\n             |  = OR\n             \\(  = Match a start parentheses\n                 (?:  = Start another non-capturing groups\n                     [^)(]+  = Match anything that isn't a parentheses\n                     |  = OR\n                     \\(  = Match a start parentheses\n                         [^)(]*  = Match anything that isn't a parentheses\n                     \\)  = Match a end parentheses\n                 )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n     \\)  = Match a close parens\n\n     /gi  = Get all matches, not the first.  Be case insensitive.\n     */\n    var fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n        // strip quotes (if they exist)\n        var unquotedOrigUrl = origUrl\n            .trim()\n            .replace(/^\"(.*)\"$/, function (o, $1) { return $1; })\n            .replace(/^'(.*)'$/, function (o, $1) { return $1; });\n        // already a full url? no change\n        if (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n            return fullMatch;\n        }\n        // convert the url to a full url\n        var newUrl;\n        if (unquotedOrigUrl.indexOf(\"//\") === 0) {\n            //TODO: should we add protocol?\n            newUrl = unquotedOrigUrl;\n        }\n        else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n            // path should be relative to the base url\n            newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n        }\n        else {\n            // path should be relative to current directory\n            newUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n        }\n        // send back the fixed url(...)\n        return \"url(\" + JSON.stringify(newUrl) + \")\";\n    });\n    // send back the fixed css\n    return fixedCss;\n};\n\n\n//# sourceURL=webpack:///./node_modules/style-loader/lib/urls.js?");

/***/ }),

/***/ "./src/components/axis/axis.ts":
/*!*************************************!*\
  !*** ./src/components/axis/axis.ts ***!
  \*************************************/
/*! exports provided: Axis */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Axis\", function() { return Axis; });\nvar Axis = function (props) {\n    var field = props.field, chart = props.chart;\n    if (!chart) {\n        return null;\n    }\n    var propsKeys = Object.keys(props);\n    var value = {};\n    for (var index = 0; index < propsKeys.length; index++) {\n        var key = propsKeys[index];\n        if (key === 'chart' || key === 'field') {\n            continue;\n        }\n        value[key] = props[key];\n    }\n    chart.axis(field, value);\n    return null;\n};\n\n\n//# sourceURL=webpack:///./src/components/axis/axis.ts?");

/***/ }),

/***/ "./src/components/chart/chart.css":
/*!****************************************!*\
  !*** ./src/components/chart/chart.css ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./chart.css */ \"./node_modules/css-loader/dist/cjs.js!./src/components/chart/chart.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./src/components/chart/chart.css?");

/***/ }),

/***/ "./src/components/chart/chart.tsx":
/*!****************************************!*\
  !*** ./src/components/chart/chart.tsx ***!
  \****************************************/
/*! exports provided: Chart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Chart\", function() { return Chart; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _antv_f2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @antv/f2 */ \"./node_modules/@antv/f2/build/f2.js\");\n/* harmony import */ var _antv_f2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_antv_f2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _chart_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chart.css */ \"./src/components/chart/chart.css\");\n/* harmony import */ var _chart_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_chart_css__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar Chart = function (props) {\n    var data = props.data, className = props.className, padding = props.padding, width = props.width, height = props.height;\n    var canvasRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(null);\n    var _a = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(false), isInited = _a[0], setIsInited = _a[1];\n    var _b = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(null), matureChart = _b[0], setMatureChart = _b[1];\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n        initChart();\n    }, []);\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n        // 更新数据\n        if (matureChart !== null) {\n            matureChart.changeData(data);\n        }\n    }, [data]);\n    var initChart = function () {\n        var canvasDom = canvasRef.current;\n        if (canvasDom !== null) {\n            var chart_1 = new _antv_f2__WEBPACK_IMPORTED_MODULE_1___default.a.Chart({\n                el: canvasDom,\n                pixelRatio: devicePixelRatio,\n                padding: padding,\n                width: width,\n                height: height,\n            });\n            // Step 1: 载入数据源\n            chart_1.source(data);\n            // Step: 2: chart 初始化完毕，去执行图形语法\n            setMatureChart(chart_1);\n            setIsInited(true);\n            // Step 4: 渲染图表\n            setTimeout(function () {\n                chart_1.render();\n            }, 0);\n        }\n    };\n    // Step 3：子组件中执行图形语法\n    var getChildren = function () {\n        if (matureChart === null) {\n            return;\n        }\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.Children.map(props.children, function (child) {\n            return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(child, {\n                chart: matureChart,\n            });\n        });\n    };\n    var render = function () {\n        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", { className: \"i-chart \" + (className || '') },\n            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"canvas\", { ref: canvasRef }),\n            isInited && getChildren()));\n    };\n    return render();\n};\n\n\n//# sourceURL=webpack:///./src/components/chart/chart.tsx?");

/***/ }),

/***/ "./src/components/line/line.ts":
/*!*************************************!*\
  !*** ./src/components/line/line.ts ***!
  \*************************************/
/*! exports provided: Line */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return Line; });\nvar Line = function (props) {\n    var chart = props.chart, _a = props.config, config = _a === void 0 ? null : _a;\n    if (!chart) {\n        return null;\n    }\n    var geom = chart.line(config);\n    var propsKeys = Object.keys(props);\n    for (var index = 0; index < propsKeys.length; index++) {\n        var key = propsKeys[index];\n        if (key === 'chart' || key === 'config') {\n            continue;\n        }\n        // https://www.yuque.com/antv/f2/attribute\n        if (typeof geom[key] === 'function') {\n            var value = props[key];\n            if (typeof value === 'object') {\n                geom[key](value.field, value.value);\n            }\n            else {\n                geom[key](value);\n            }\n        }\n    }\n    return null;\n};\n\n\n//# sourceURL=webpack:///./src/components/line/line.ts?");

/***/ }),

/***/ "./src/components/scale/scale.ts":
/*!***************************************!*\
  !*** ./src/components/scale/scale.ts ***!
  \***************************************/
/*! exports provided: Scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scale\", function() { return Scale; });\nvar Scale = function (props) {\n    var field = props.field, chart = props.chart;\n    if (!chart) {\n        return null;\n    }\n    var propsKeys = Object.keys(props);\n    var value = {};\n    for (var index = 0; index < propsKeys.length; index++) {\n        var key = propsKeys[index];\n        if (key === 'chart' || key === 'field') {\n            continue;\n        }\n        value[key] = props[key];\n    }\n    chart.scale(field, value);\n    return null;\n};\n\n\n//# sourceURL=webpack:///./src/components/scale/scale.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: Axis, Line, Scale, Chart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_axis_axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/axis/axis */ \"./src/components/axis/axis.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Axis\", function() { return _components_axis_axis__WEBPACK_IMPORTED_MODULE_0__[\"Axis\"]; });\n\n/* harmony import */ var _components_chart_chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/chart/chart */ \"./src/components/chart/chart.tsx\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Chart\", function() { return _components_chart_chart__WEBPACK_IMPORTED_MODULE_1__[\"Chart\"]; });\n\n/* harmony import */ var _components_line_line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/line/line */ \"./src/components/line/line.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return _components_line_line__WEBPACK_IMPORTED_MODULE_2__[\"Line\"]; });\n\n/* harmony import */ var _components_scale_scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/scale/scale */ \"./src/components/scale/scale.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Scale\", function() { return _components_scale_scale__WEBPACK_IMPORTED_MODULE_3__[\"Scale\"]; });\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });